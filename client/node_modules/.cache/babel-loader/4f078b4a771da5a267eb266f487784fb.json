{"ast":null,"code":"'use strict';\n\nvar codec = require('../util/codec');\n\nvar Stats = require('../stats');\n\nvar util = require('util');\n\nfunction QuerySample(tracer, slowQuery) {\n  Stats.call(this);\n  this.tracer = tracer;\n  this.trace = slowQuery;\n  this.aggregate(slowQuery);\n}\n\nutil.inherits(QuerySample, Stats);\n\nQuerySample.prototype.aggregate = function aggregate(slowQuery) {\n  this.recordValue(slowQuery.duration);\n  if (this.trace && this.trace.duration >= slowQuery.duration) return;\n  this.trace = slowQuery;\n};\n\nQuerySample.prototype.merge = function merge(sample) {\n  Stats.prototype.merge.call(this, sample);\n\n  if (this.trace.duration < sample.trace.duration) {\n    this.trace = sample.trace;\n  }\n};\n\nQuerySample.prototype.prepareJSON = function prepareJSON(done) {\n  var transaction = this.trace.segment.transaction;\n  var sample = this;\n  var trace = sample.trace;\n  var params = sample.getParams();\n\n  if (!this.tracer.config.simple_compression) {\n    codec.encode(params, respond);\n  } else {\n    process.nextTick(respond.bind(null, null, params));\n  }\n\n  function respond(err, data) {\n    if (err) return done(err);\n    done(null, _getJSON(sample, trace, transaction, data));\n  }\n};\n\nQuerySample.prototype.prepareJSONSync = function prepareJSONSync() {\n  const transaction = this.trace.segment.transaction;\n  const sample = this;\n  const trace = sample.trace;\n  const params = sample.getParams();\n  const data = this.tracer.config.simple_compression ? params : codec.encodeSync(params);\n  return _getJSON(sample, trace, transaction, data);\n};\n\nfunction _getJSON(sample, trace, transaction, data) {\n  return [transaction.getFullName(), transaction.url || '<unknown>', trace.id, getQuery(sample.tracer.config, trace), trace.metric, sample.callCount, sample.total, sample.min, sample.max, data];\n}\n\nQuerySample.prototype.getParams = function getParams() {\n  var segmentAttrs = this.trace.segment.getAttributes();\n  var params = {\n    backtrace: this.trace.trace\n  };\n\n  if (segmentAttrs.host) {\n    params.host = segmentAttrs.host;\n  }\n\n  if (segmentAttrs.port_path_or_id) {\n    params.port_path_or_id = segmentAttrs.port_path_or_id;\n  }\n\n  if (segmentAttrs.database_name) {\n    params.database_name = segmentAttrs.database_name;\n  }\n\n  if (this.tracer.config.distributed_tracing.enabled) {\n    this.trace.segment.transaction.addDistributedTraceIntrinsics(params);\n  }\n\n  return params;\n};\n\nfunction getQuery(config, trace) {\n  switch (config.transaction_tracer.record_sql) {\n    case 'raw':\n      return trace.query;\n\n    case 'obfuscated':\n      return trace.obfuscated;\n\n    default:\n      return '?';\n  }\n}\n\nmodule.exports = QuerySample;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/db/query-sample.js"],"names":["codec","require","Stats","util","QuerySample","tracer","slowQuery","call","trace","aggregate","inherits","prototype","recordValue","duration","merge","sample","prepareJSON","done","transaction","segment","params","getParams","config","simple_compression","encode","respond","process","nextTick","bind","err","data","_getJSON","prepareJSONSync","encodeSync","getFullName","url","id","getQuery","metric","callCount","total","min","max","segmentAttrs","getAttributes","backtrace","host","port_path_or_id","database_name","distributed_tracing","enabled","addDistributedTraceIntrinsics","transaction_tracer","record_sql","query","obfuscated","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar codec = require('../util/codec')\nvar Stats = require('../stats')\nvar util = require('util')\n\nfunction QuerySample(tracer, slowQuery) {\n  Stats.call(this)\n  this.tracer = tracer\n  this.trace = slowQuery\n  this.aggregate(slowQuery)\n}\n\nutil.inherits(QuerySample, Stats)\n\nQuerySample.prototype.aggregate = function aggregate(slowQuery) {\n  this.recordValue(slowQuery.duration)\n  if (this.trace && this.trace.duration >= slowQuery.duration) return\n  this.trace = slowQuery\n}\n\nQuerySample.prototype.merge = function merge(sample) {\n  Stats.prototype.merge.call(this, sample)\n  if (this.trace.duration < sample.trace.duration) {\n    this.trace = sample.trace\n  }\n}\n\nQuerySample.prototype.prepareJSON = function prepareJSON(done) {\n  var transaction = this.trace.segment.transaction\n  var sample = this\n  var trace = sample.trace\n\n  var params = sample.getParams()\n\n  if (!this.tracer.config.simple_compression) {\n    codec.encode(params, respond)\n  } else {\n    process.nextTick(respond.bind(null, null, params))\n  }\n\n  function respond(err, data) {\n    if (err) return done(err)\n\n    done(null, _getJSON(sample, trace, transaction, data))\n  }\n}\n\nQuerySample.prototype.prepareJSONSync = function prepareJSONSync() {\n  const transaction = this.trace.segment.transaction\n  const sample = this\n  const trace = sample.trace\n\n  const params = sample.getParams()\n  const data = this.tracer.config.simple_compression ? params : codec.encodeSync(params)\n  return _getJSON(sample, trace, transaction, data)\n}\n\nfunction _getJSON(sample, trace, transaction, data) {\n  return [\n    transaction.getFullName(),\n    transaction.url || '<unknown>',\n    trace.id,\n    getQuery(sample.tracer.config, trace),\n    trace.metric,\n    sample.callCount,\n    sample.total,\n    sample.min,\n    sample.max,\n    data\n  ]\n}\n\nQuerySample.prototype.getParams = function getParams() {\n  var segmentAttrs = this.trace.segment.getAttributes()\n  var params = {\n    backtrace: this.trace.trace,\n  }\n\n  if (segmentAttrs.host) {\n    params.host = segmentAttrs.host\n  }\n\n  if (segmentAttrs.port_path_or_id) {\n    params.port_path_or_id = segmentAttrs.port_path_or_id\n  }\n\n  if (segmentAttrs.database_name) {\n    params.database_name = segmentAttrs.database_name\n  }\n\n  if (this.tracer.config.distributed_tracing.enabled) {\n    this.trace.segment.transaction.addDistributedTraceIntrinsics(params)\n  }\n\n  return params\n}\n\nfunction getQuery(config, trace) {\n  switch (config.transaction_tracer.record_sql) {\n    case 'raw':\n      return trace.query\n    case 'obfuscated':\n      return trace.obfuscated\n    default:\n      return '?'\n  }\n}\n\nmodule.exports = QuerySample\n"]},"metadata":{},"sourceType":"script"}