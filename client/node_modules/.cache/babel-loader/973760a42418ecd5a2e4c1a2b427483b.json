{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger').child({\n  component: 'distributedTracePayload'\n});\n\nconst DT_VERSION_MAJOR = 0;\nconst DT_VERSION_MINOR = 1;\nmodule.exports = class DistributedTracePayload {\n  /**\n   * The class reponsible for producing distributed trace payloads.\n   * Created by calling {@link TransactionHandle#createDistributedTracePayload}.\n   *\n   * @constructor\n   */\n  constructor(payload) {\n    logger.trace('DistributedTracePayload created with %s', payload);\n    this.plainTextPayload = JSON.stringify({\n      v: [DT_VERSION_MAJOR, DT_VERSION_MINOR],\n      d: payload\n    });\n    this.base64Payload = null;\n  }\n  /**\n   * @returns {String} The base64 encoded JSON representation of the\n   * distributed trace payload.\n   */\n\n\n  text() {\n    logger.trace('DistributedTracePayload text: %s', this.plainTextPayload);\n    return this.plainTextPayload;\n  }\n  /**\n   * Construct a payload suitable for HTTP transport.\n   *\n   * @returns {String} The base64 encoded JSON representation of the\n   * distributed trace payload.\n   */\n\n\n  httpSafe() {\n    if (!this.base64Payload) {\n      this.base64Payload = Buffer.from(this.plainTextPayload, 'utf-8').toString('base64');\n    }\n\n    logger.trace('DistributedTracePayload httpSafe: %s', this.base64Payload);\n    return this.base64Payload;\n  }\n\n};\nmodule.exports.Stub = class DistributedTracePayloadStub {\n  text() {\n    logger.debug('DistributedTracePayloadStub text');\n    return '';\n  }\n\n  httpSafe() {\n    logger.debug('DistributedTracePayloadStub httpSafe');\n    return '';\n  }\n\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/transaction/dt-payload.js"],"names":["logger","require","child","component","DT_VERSION_MAJOR","DT_VERSION_MINOR","module","exports","DistributedTracePayload","constructor","payload","trace","plainTextPayload","JSON","stringify","v","d","base64Payload","text","httpSafe","Buffer","from","toString","Stub","DistributedTracePayloadStub","debug"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,KAArB,CAA2B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA3B,CAAb;;AAEA,MAAMC,gBAAgB,GAAG,CAAzB;AACA,MAAMC,gBAAgB,GAAG,CAAzB;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,uBAAN,CAA8B;AAC7C;;;;;;AAMAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnBV,IAAAA,MAAM,CAACW,KAAP,CAAa,yCAAb,EAAwDD,OAAxD;AACA,SAAKE,gBAAL,GAAwBC,IAAI,CAACC,SAAL,CAAe;AACrCC,MAAAA,CAAC,EAAE,CAACX,gBAAD,EAAmBC,gBAAnB,CADkC;AAErCW,MAAAA,CAAC,EAAEN;AAFkC,KAAf,CAAxB;AAIA,SAAKO,aAAL,GAAqB,IAArB;AACD;AAED;;;;;;AAIAC,EAAAA,IAAI,GAAG;AACLlB,IAAAA,MAAM,CAACW,KAAP,CAAa,kCAAb,EAAiD,KAAKC,gBAAtD;AACA,WAAO,KAAKA,gBAAZ;AACD;AAED;;;;;;;;AAMAO,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKF,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqBG,MAAM,CAACC,IAAP,CAAY,KAAKT,gBAAjB,EAAmC,OAAnC,EAA4CU,QAA5C,CAAqD,QAArD,CAArB;AACD;;AACDtB,IAAAA,MAAM,CAACW,KAAP,CAAa,sCAAb,EAAqD,KAAKM,aAA1D;AACA,WAAO,KAAKA,aAAZ;AACD;;AArC4C,CAA/C;AAwCAX,MAAM,CAACC,OAAP,CAAegB,IAAf,GAAsB,MAAMC,2BAAN,CAAkC;AACtDN,EAAAA,IAAI,GAAG;AACLlB,IAAAA,MAAM,CAACyB,KAAP,CAAa,kCAAb;AACA,WAAO,EAAP;AACD;;AAEDN,EAAAA,QAAQ,GAAG;AACTnB,IAAAA,MAAM,CAACyB,KAAP,CAAa,sCAAb;AACA,WAAO,EAAP;AACD;;AATqD,CAAxD","sourcesContent":["'use strict'\n\nvar logger = require('../logger').child({component: 'distributedTracePayload'})\n\nconst DT_VERSION_MAJOR = 0\nconst DT_VERSION_MINOR = 1\n\nmodule.exports = class DistributedTracePayload {\n  /**\n   * The class reponsible for producing distributed trace payloads.\n   * Created by calling {@link TransactionHandle#createDistributedTracePayload}.\n   *\n   * @constructor\n   */\n  constructor(payload) {\n    logger.trace('DistributedTracePayload created with %s', payload)\n    this.plainTextPayload = JSON.stringify({\n      v: [DT_VERSION_MAJOR, DT_VERSION_MINOR],\n      d: payload\n    })\n    this.base64Payload = null\n  }\n\n  /**\n   * @returns {String} The base64 encoded JSON representation of the\n   * distributed trace payload.\n   */\n  text() {\n    logger.trace('DistributedTracePayload text: %s', this.plainTextPayload)\n    return this.plainTextPayload\n  }\n\n  /**\n   * Construct a payload suitable for HTTP transport.\n   *\n   * @returns {String} The base64 encoded JSON representation of the\n   * distributed trace payload.\n   */\n  httpSafe() {\n    if (!this.base64Payload) {\n      this.base64Payload = Buffer.from(this.plainTextPayload, 'utf-8').toString('base64')\n    }\n    logger.trace('DistributedTracePayload httpSafe: %s', this.base64Payload)\n    return this.base64Payload\n  }\n}\n\nmodule.exports.Stub = class DistributedTracePayloadStub {\n  text() {\n    logger.debug('DistributedTracePayloadStub text')\n    return ''\n  }\n\n  httpSafe() {\n    logger.debug('DistributedTracePayloadStub httpSafe')\n    return ''\n  }\n}\n"]},"metadata":{},"sourceType":"script"}