{"ast":null,"code":"'use strict';\n\nvar Logger = require('./util/logger');\n\nvar fs = require('./util/unwrapped-core').fs; // create bootstrapping logger\n\n\nmodule.exports = new Logger({\n  name: 'newrelic_bootstrap',\n  stream: process.stdout,\n  level: 'info'\n});\n/**\n * Don't load config until this point, because it requires this\n * module, and if it gets loaded too early, module.exports will have no\n * value.\n */\n\nvar config = require('./config').getOrCreateInstance();\n\nif (config) {\n  var options = {\n    name: 'newrelic',\n    level: config.logging.level,\n    enabled: config.logging.enabled\n  }; // create the \"real\" logger\n\n  module.exports = new Logger(options);\n\n  if (config.logging.enabled) {\n    var stream;\n\n    switch (config.logging.filepath) {\n      case 'stdout':\n        stream = process.stdout;\n        break;\n\n      case 'stderr':\n        stream = process.stderr;\n        break;\n\n      default:\n        stream = fs.createWriteStream(config.logging.filepath, {\n          flags: 'a+'\n        });\n        stream.on('error', function logStreamOnError(err) {\n          /* eslint-disable no-console */\n          // Since our normal logging didn't work, dump this to stderr.\n          console.error('New Relic failed to open log file ' + config.logging.filepath);\n          console.error(err);\n          /* eslint-enable no-console */\n        });\n    }\n\n    module.exports.pipe(stream);\n  } // now tell the config module to switch to the real logger\n\n\n  config.setLogger(module.exports);\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/logger.js"],"names":["Logger","require","fs","module","exports","name","stream","process","stdout","level","config","getOrCreateInstance","options","logging","enabled","filepath","stderr","createWriteStream","flags","on","logStreamOnError","err","console","error","pipe","setLogger"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCC,EAA1C,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,IAAIJ,MAAJ,CAAW;AAC1BK,EAAAA,IAAI,EAAE,oBADoB;AAE1BC,EAAAA,MAAM,EAAEC,OAAO,CAACC,MAFU;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAAX,CAAjB;AAMA;;;;;;AAKA,IAAIC,MAAM,GAAGT,OAAO,CAAC,UAAD,CAAP,CAAoBU,mBAApB,EAAb;;AACA,IAAID,MAAJ,EAAY;AACV,MAAIE,OAAO,GAAG;AACZP,IAAAA,IAAI,EAAE,UADM;AAEZI,IAAAA,KAAK,EAAEC,MAAM,CAACG,OAAP,CAAeJ,KAFV;AAGZK,IAAAA,OAAO,EAAEJ,MAAM,CAACG,OAAP,CAAeC;AAHZ,GAAd,CADU,CAOV;;AACAX,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIJ,MAAJ,CAAWY,OAAX,CAAjB;;AAEA,MAAIF,MAAM,CAACG,OAAP,CAAeC,OAAnB,EAA4B;AAC1B,QAAIR,MAAJ;;AACA,YAAQI,MAAM,CAACG,OAAP,CAAeE,QAAvB;AACE,WAAK,QAAL;AACET,QAAAA,MAAM,GAAGC,OAAO,CAACC,MAAjB;AACA;;AAEF,WAAK,QAAL;AACEF,QAAAA,MAAM,GAAGC,OAAO,CAACS,MAAjB;AACA;;AAEF;AACEV,QAAAA,MAAM,GAAGJ,EAAE,CAACe,iBAAH,CAAqBP,MAAM,CAACG,OAAP,CAAeE,QAApC,EAA8C;AAACG,UAAAA,KAAK,EAAE;AAAR,SAA9C,CAAT;AACAZ,QAAAA,MAAM,CAACa,EAAP,CAAU,OAAV,EAAmB,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAChD;AACA;AACAC,UAAAA,OAAO,CAACC,KAAR,CAAc,uCAAuCb,MAAM,CAACG,OAAP,CAAeE,QAApE;AACAO,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA;AACD,SAND;AAXJ;;AAmBAlB,IAAAA,MAAM,CAACC,OAAP,CAAeoB,IAAf,CAAoBlB,MAApB;AACD,GAhCS,CAkCV;;;AACAI,EAAAA,MAAM,CAACe,SAAP,CAAiBtB,MAAM,CAACC,OAAxB;AACD","sourcesContent":["'use strict'\n\nvar Logger = require('./util/logger')\nvar fs = require('./util/unwrapped-core').fs\n\n// create bootstrapping logger\nmodule.exports = new Logger({\n  name: 'newrelic_bootstrap',\n  stream: process.stdout,\n  level: 'info'\n})\n\n/**\n * Don't load config until this point, because it requires this\n * module, and if it gets loaded too early, module.exports will have no\n * value.\n */\nvar config = require('./config').getOrCreateInstance()\nif (config) {\n  var options = {\n    name: 'newrelic',\n    level: config.logging.level,\n    enabled: config.logging.enabled\n  }\n\n  // create the \"real\" logger\n  module.exports = new Logger(options)\n\n  if (config.logging.enabled) {\n    var stream\n    switch (config.logging.filepath) {\n      case 'stdout':\n        stream = process.stdout\n        break\n\n      case 'stderr':\n        stream = process.stderr\n        break\n\n      default:\n        stream = fs.createWriteStream(config.logging.filepath, {flags: 'a+'})\n        stream.on('error', function logStreamOnError(err) {\n          /* eslint-disable no-console */\n          // Since our normal logging didn't work, dump this to stderr.\n          console.error('New Relic failed to open log file ' + config.logging.filepath)\n          console.error(err)\n          /* eslint-enable no-console */\n        })\n    }\n    module.exports.pipe(stream)\n  }\n\n  // now tell the config module to switch to the real logger\n  config.setLogger(module.exports)\n}\n"]},"metadata":{},"sourceType":"script"}