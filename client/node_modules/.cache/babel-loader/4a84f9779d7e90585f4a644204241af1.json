{"ast":null,"code":"'use strict';\n\nvar logger = require('./lib/logger.js');\n\nvar RealAPI = require('./api.js');\n\nvar TransactionHandle = require('./lib/transaction/handle');\n/* eslint-disable no-eval */\n\n\nfunction stubFunction(name) {\n  return eval(\"(function () {return function \" + name + \"() {\" + \"logger.debug('Not calling \" + name + \" because New Relic is disabled.');\" + \"}}())\");\n}\n/* eslint-enable no-eval */\n\n\nfunction Stub() {}\n\nvar keys = Object.keys(RealAPI.prototype);\nvar length = keys.length;\n/* This way the stub API doesn't have to be updated in lockstep with the regular\n * API.\n */\n\nfor (var i = 0; i < length; i++) {\n  var functionName = keys[i];\n  Stub.prototype[functionName] = stubFunction(functionName);\n}\n\nStub.prototype.startSegment = startSegment;\nStub.prototype.startWebTransaction = startWebTransaction;\nStub.prototype.startBackgroundTransaction = startBackgroundTransaction;\nStub.prototype.getTransaction = getTransaction;\nStub.prototype.getBrowserTimingHeader = getBrowserTimingHeader;\nStub.prototype.shutdown = shutdown;\nStub.prototype.setLambdaHandler = setLambdaHandler;\nStub.prototype.getTraceMetadata = getTraceMetadata; // This code gets injected into HTML templates\n// and we don't want it to return undefined/null.\n\nfunction getBrowserTimingHeader() {\n  logger.debug('Not calling getBrowserTimingHeader because New Relic is disabled.');\n  return '';\n}\n\nfunction getTransaction() {\n  return new TransactionHandle.Stub();\n}\n\nfunction setLambdaHandler(callback) {\n  logger.debug('Not calling setLambdaHandler because New Relic is disabled.');\n  return callback;\n}\n\nfunction startSegment(name, record, handler, callback) {\n  logger.debug('Not calling `startSegment` becuase New Relic is disabled.');\n\n  if (typeof handler === 'function') {\n    return handler(callback);\n  }\n\n  return null;\n}\n\nfunction getTraceMetadata() {\n  return {\n    traceId: '',\n    spanId: ''\n  };\n}\n\nfunction startWebTransaction(url, callback) {\n  logger.debug('Not calling startWebTransaction because New Relic is disabled.');\n\n  if (typeof callback === 'function') {\n    return callback();\n  }\n\n  return null;\n}\n\nfunction startBackgroundTransaction(name, group, callback) {\n  logger.debug('Not calling startBackgroundTransaction because New Relic is disabled.');\n\n  if (typeof callback === 'function') {\n    return callback();\n  }\n\n  if (typeof group === 'function') {\n    return group();\n  }\n\n  return null;\n} // Normally the following call executes callback asynchronously\n\n\nfunction shutdown(options, cb) {\n  logger.debug('Not calling shutdown because New Relic is disabled.');\n  var callback = cb;\n\n  if (!callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    } else {\n      callback = function __NR_defaultCb() {};\n    }\n  }\n\n  setImmediate(callback);\n}\n\nmodule.exports = Stub;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/stub_api.js"],"names":["logger","require","RealAPI","TransactionHandle","stubFunction","name","eval","Stub","keys","Object","prototype","length","i","functionName","startSegment","startWebTransaction","startBackgroundTransaction","getTransaction","getBrowserTimingHeader","shutdown","setLambdaHandler","getTraceMetadata","debug","callback","record","handler","traceId","spanId","url","group","options","cb","__NR_defaultCb","setImmediate","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar logger = require('./lib/logger.js')\nvar RealAPI = require('./api.js')\nvar TransactionHandle = require('./lib/transaction/handle')\n\n\n/* eslint-disable no-eval */\nfunction stubFunction(name) {\n  return eval(\n    \"(function () {return function \" + name + \"() {\" +\n    \"logger.debug('Not calling \" + name + \" because New Relic is disabled.');\" +\n    \"}}())\"\n  )\n}\n/* eslint-enable no-eval */\n\nfunction Stub() {}\n\nvar keys = Object.keys(RealAPI.prototype)\nvar length = keys.length\n\n\n/* This way the stub API doesn't have to be updated in lockstep with the regular\n * API.\n */\nfor (var i = 0; i < length; i++) {\n  var functionName = keys[i]\n  Stub.prototype[functionName] = stubFunction(functionName)\n}\n\nStub.prototype.startSegment = startSegment\nStub.prototype.startWebTransaction = startWebTransaction\nStub.prototype.startBackgroundTransaction = startBackgroundTransaction\nStub.prototype.getTransaction = getTransaction\nStub.prototype.getBrowserTimingHeader = getBrowserTimingHeader\nStub.prototype.shutdown = shutdown\nStub.prototype.setLambdaHandler = setLambdaHandler\nStub.prototype.getTraceMetadata = getTraceMetadata\n\n// This code gets injected into HTML templates\n// and we don't want it to return undefined/null.\nfunction getBrowserTimingHeader() {\n  logger.debug('Not calling getBrowserTimingHeader because New Relic is disabled.')\n  return ''\n}\n\nfunction getTransaction() {\n  return new TransactionHandle.Stub()\n}\n\nfunction setLambdaHandler(callback) {\n  logger.debug('Not calling setLambdaHandler because New Relic is disabled.')\n  return callback\n}\n\nfunction startSegment(name, record, handler, callback) {\n  logger.debug('Not calling `startSegment` becuase New Relic is disabled.')\n  if (typeof handler === 'function') {\n    return handler(callback)\n  }\n  return null\n}\n\nfunction getTraceMetadata() {\n  return {\n    traceId: '',\n    spanId: ''\n  }\n}\n\nfunction startWebTransaction(url, callback) {\n  logger.debug('Not calling startWebTransaction because New Relic is disabled.')\n  if (typeof callback === 'function') {\n    return callback()\n  }\n\n  return null\n}\n\nfunction startBackgroundTransaction(name, group, callback) {\n  logger.debug('Not calling startBackgroundTransaction because New Relic is disabled.')\n  if (typeof callback === 'function') {\n    return callback()\n  }\n\n  if (typeof group === 'function') {\n    return group()\n  }\n\n  return null\n}\n\n// Normally the following call executes callback asynchronously\nfunction shutdown(options, cb) {\n  logger.debug('Not calling shutdown because New Relic is disabled.')\n\n  var callback = cb\n  if (!callback) {\n    if (typeof options === 'function') {\n      callback = options\n    } else {\n      callback = function __NR_defaultCb() {}\n    }\n  }\n\n  setImmediate(callback)\n}\n\nmodule.exports = Stub\n"]},"metadata":{},"sourceType":"script"}