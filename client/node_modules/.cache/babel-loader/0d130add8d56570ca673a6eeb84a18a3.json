{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger.js').child({\n  component: 'aws-info'\n});\n\nvar common = require('./common');\n\nvar NAMES = require('../metrics/names.js');\n\nmodule.exports = fetchAWSInfo;\n\nmodule.exports.clearCache = function clearAWSCache() {\n  results = null;\n};\n\nvar results = null;\n\nfunction fetchAWSInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_aws) {\n    return setImmediate(callback, null);\n  }\n\n  if (results) {\n    return setImmediate(callback, null, results);\n  }\n\n  var instanceHost = '169.254.169.254';\n  var apiVersion = '2016-09-02';\n  var endpoint = 'dynamic/instance-identity/document';\n  var url = 'http://' + instanceHost + '/' + apiVersion + '/' + endpoint;\n  common.request(url, agent, function getMetadata(err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    try {\n      data = JSON.parse(data);\n    } catch (e) {\n      logger.debug(e, 'Failed to parse AWS metadata.');\n      data = null;\n    }\n\n    results = common.getKeys(data, ['availabilityZone', 'instanceId', 'instanceType']);\n\n    if (results == null) {\n      logger.debug('AWS metadata was invalid.');\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.AWS_ERROR).incrementCallCount();\n    }\n\n    callback(null, results);\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/utilization/aws-info.js"],"names":["logger","require","child","component","common","NAMES","module","exports","fetchAWSInfo","clearCache","clearAWSCache","results","agent","callback","config","utilization","detect_aws","setImmediate","instanceHost","apiVersion","endpoint","url","request","getMetadata","err","data","JSON","parse","e","debug","getKeys","metrics","getOrCreateMetric","UTILIZATION","AWS_ERROR","incrementCallCount"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,KAAxB,CAA8B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA9B,CAAb;;AACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,qBAAD,CAAnB;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AACAF,MAAM,CAACC,OAAP,CAAeE,UAAf,GAA4B,SAASC,aAAT,GAAyB;AACnDC,EAAAA,OAAO,GAAG,IAAV;AACD,CAFD;;AAIA,IAAIA,OAAO,GAAG,IAAd;;AAEA,SAASH,YAAT,CAAsBI,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,MAAI,CAACD,KAAK,CAACE,MAAN,CAAaC,WAAd,IAA6B,CAACH,KAAK,CAACE,MAAN,CAAaC,WAAb,CAAyBC,UAA3D,EAAuE;AACrE,WAAOC,YAAY,CAACJ,QAAD,EAAW,IAAX,CAAnB;AACD;;AAED,MAAIF,OAAJ,EAAa;AACX,WAAOM,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiBF,OAAjB,CAAnB;AACD;;AAED,MAAIO,YAAY,GAAG,iBAAnB;AACA,MAAIC,UAAU,GAAG,YAAjB;AACA,MAAIC,QAAQ,GAAG,oCAAf;AACA,MAAIC,GAAG,GAAG,YAAYH,YAAZ,GAA2B,GAA3B,GAAiCC,UAAjC,GAA8C,GAA9C,GAAoDC,QAA9D;AACAhB,EAAAA,MAAM,CAACkB,OAAP,CAAeD,GAAf,EAAoBT,KAApB,EAA2B,SAASW,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACzD,QAAID,GAAJ,EAAS;AACP,aAAOX,QAAQ,CAACW,GAAD,CAAf;AACD;;AAED,QAAI;AACFC,MAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV5B,MAAAA,MAAM,CAAC6B,KAAP,CAAaD,CAAb,EAAgB,+BAAhB;AACAH,MAAAA,IAAI,GAAG,IAAP;AACD;;AAEDd,IAAAA,OAAO,GAAGP,MAAM,CAAC0B,OAAP,CAAeL,IAAf,EAAqB,CAAC,kBAAD,EAAqB,YAArB,EAAmC,cAAnC,CAArB,CAAV;;AACA,QAAId,OAAO,IAAI,IAAf,EAAqB;AACnBX,MAAAA,MAAM,CAAC6B,KAAP,CAAa,2BAAb;AACAjB,MAAAA,KAAK,CAACmB,OAAN,CAAcC,iBAAd,CAAgC3B,KAAK,CAAC4B,WAAN,CAAkBC,SAAlD,EAA6DC,kBAA7D;AACD;;AACDtB,IAAAA,QAAQ,CAAC,IAAD,EAAOF,OAAP,CAAR;AACD,GAlBD;AAmBD","sourcesContent":["'use strict'\n\nvar logger = require('../logger.js').child({component: 'aws-info'})\nvar common = require('./common')\nvar NAMES = require('../metrics/names.js')\n\nmodule.exports = fetchAWSInfo\nmodule.exports.clearCache = function clearAWSCache() {\n  results = null\n}\n\nvar results = null\n\nfunction fetchAWSInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_aws) {\n    return setImmediate(callback, null)\n  }\n\n  if (results) {\n    return setImmediate(callback, null, results)\n  }\n\n  var instanceHost = '169.254.169.254'\n  var apiVersion = '2016-09-02'\n  var endpoint = 'dynamic/instance-identity/document'\n  var url = 'http://' + instanceHost + '/' + apiVersion + '/' + endpoint\n  common.request(url, agent, function getMetadata(err, data) {\n    if (err) {\n      return callback(err)\n    }\n\n    try {\n      data = JSON.parse(data)\n    } catch (e) {\n      logger.debug(e, 'Failed to parse AWS metadata.')\n      data = null\n    }\n\n    results = common.getKeys(data, ['availabilityZone', 'instanceId', 'instanceType'])\n    if (results == null) {\n      logger.debug('AWS metadata was invalid.')\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.AWS_ERROR).incrementCallCount()\n    }\n    callback(null, results)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}