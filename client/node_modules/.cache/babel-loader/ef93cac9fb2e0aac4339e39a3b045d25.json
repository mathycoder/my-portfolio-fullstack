{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger.js').child({\n  component: 'pcf-info'\n});\n\nvar NAMES = require('../metrics/names.js');\n\nvar common = require('./common');\n\nmodule.exports = fetchPCFInfo;\n\nfunction fetchPCFInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_pcf) {\n    return setImmediate(callback, null, null);\n  }\n\n  var metadataMap = {\n    'CF_INSTANCE_GUID': 'cf_instance_guid',\n    'CF_INSTANCE_IP': 'cf_instance_ip',\n    'MEMORY_LIMIT': 'memory_limit'\n  };\n  var results = Object.create(null);\n  var keys = Object.keys(metadataMap);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = process.env[key];\n\n    if (value == null) {\n      logger.trace('Could not find environment value for %s', key);\n      return setImmediate(callback, null, null);\n    }\n\n    if (!common.checkValueString(value)) {\n      logger.trace('Invalid environment value for %s: %j', key, value);\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.PCF_ERROR).incrementCallCount();\n      return setImmediate(callback, null, null);\n    }\n\n    results[metadataMap[key]] = value;\n  }\n\n  setImmediate(callback, null, results);\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/utilization/pcf-info.js"],"names":["logger","require","child","component","NAMES","common","module","exports","fetchPCFInfo","agent","callback","config","utilization","detect_pcf","setImmediate","metadataMap","results","Object","create","keys","i","length","key","value","process","env","trace","checkValueString","metrics","getOrCreateMetric","UTILIZATION","PCF_ERROR","incrementCallCount"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,KAAxB,CAA8B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA9B,CAAb;;AACA,IAAIC,KAAK,GAAGH,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAApB;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,MAAI,CAACD,KAAK,CAACE,MAAN,CAAaC,WAAd,IAA6B,CAACH,KAAK,CAACE,MAAN,CAAaC,WAAb,CAAyBC,UAA3D,EAAuE;AACrE,WAAOC,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAnB;AACD;;AAED,MAAIK,WAAW,GAAG;AAChB,wBAAoB,kBADJ;AAEhB,sBAAkB,gBAFF;AAGhB,oBAAgB;AAHA,GAAlB;AAMA,MAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;AACA,MAAIC,IAAI,GAAGF,MAAM,CAACE,IAAP,CAAYJ,WAAZ,CAAX;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,GAAG,GAAGH,IAAI,CAACC,CAAD,CAAd;AACA,QAAIG,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAZ;;AACA,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBvB,MAAAA,MAAM,CAAC0B,KAAP,CAAa,yCAAb,EAAwDJ,GAAxD;AACA,aAAOR,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAnB;AACD;;AACD,QAAI,CAACL,MAAM,CAACsB,gBAAP,CAAwBJ,KAAxB,CAAL,EAAqC;AACnCvB,MAAAA,MAAM,CAAC0B,KAAP,CAAa,sCAAb,EAAqDJ,GAArD,EAA0DC,KAA1D;AACAd,MAAAA,KAAK,CAACmB,OAAN,CAAcC,iBAAd,CAAgCzB,KAAK,CAAC0B,WAAN,CAAkBC,SAAlD,EAA6DC,kBAA7D;AACA,aAAOlB,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAnB;AACD;;AACDM,IAAAA,OAAO,CAACD,WAAW,CAACO,GAAD,CAAZ,CAAP,GAA4BC,KAA5B;AACD;;AAEDT,EAAAA,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiBM,OAAjB,CAAZ;AACD","sourcesContent":["'use strict'\n\nvar logger = require('../logger.js').child({component: 'pcf-info'})\nvar NAMES = require('../metrics/names.js')\nvar common = require('./common')\n\nmodule.exports = fetchPCFInfo\n\nfunction fetchPCFInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_pcf) {\n    return setImmediate(callback, null, null)\n  }\n\n  var metadataMap = {\n    'CF_INSTANCE_GUID': 'cf_instance_guid',\n    'CF_INSTANCE_IP': 'cf_instance_ip',\n    'MEMORY_LIMIT': 'memory_limit'\n  }\n\n  var results = Object.create(null)\n  var keys = Object.keys(metadataMap)\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    var value = process.env[key]\n    if (value == null) {\n      logger.trace('Could not find environment value for %s', key)\n      return setImmediate(callback, null, null)\n    }\n    if (!common.checkValueString(value)) {\n      logger.trace('Invalid environment value for %s: %j', key, value)\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.PCF_ERROR).incrementCallCount()\n      return setImmediate(callback, null, null)\n    }\n    results[metadataMap[key]] = value\n  }\n\n  setImmediate(callback, null, results)\n}\n"]},"metadata":{},"sourceType":"script"}