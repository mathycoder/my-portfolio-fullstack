{"ast":null,"code":"'use strict';\n\nconst a = require('async');\n\nconst fetchSystemInfo = require('../system-info');\n\nconst logger = require('../logger').child({\n  component: 'facts'\n});\n\nconst os = require('os');\n\nconst parse_labels = require('../util/label-parser');\n\nconst Config = require('../config/');\n\nmodule.exports = facts;\n\nfunction facts(agent, callback) {\n  var startTime = Date.now();\n  a.parallel({\n    systemInfo: a.apply(fetchSystemInfo, agent),\n    environment: agent.environment.getJSON\n  }, function factMapCb(err, data) {\n    logger.trace('Facts gathering finished in %dms', Date.now() - startTime);\n\n    if (err) {\n      logger.debug(err, 'Failed to load system facts!');\n    }\n\n    data = data || Object.create(null);\n    const systemInfo = data.systemInfo || Object.create(null);\n    const environment = data.environment || [];\n    const hostname = agent.config.getHostnameSafe();\n    const results = {\n      utilization: {\n        metadata_version: 5,\n        logical_processors: systemInfo.logicalProcessors || null,\n        total_ram_mib: systemInfo.memory || null,\n        hostname: hostname\n      },\n      pid: process.pid,\n      host: hostname,\n      display_host: agent.config.getDisplayHost() || hostname,\n      language: 'nodejs',\n      app_name: agent.config.applications(),\n      agent_version: agent.version,\n      environment: environment,\n      settings: agent.config.publicSettings(),\n      high_security: agent.config.high_security,\n      labels: parse_labels(agent.config.labels),\n      metadata: Object.keys(process.env).reduce((obj, key) => {\n        if (key.startsWith('NEW_RELIC_METADATA_')) {\n          obj[key] = process.env[key];\n        }\n\n        return obj;\n      }, {})\n    };\n    results.event_harvest_config = {\n      harvest_limits: {\n        analytic_event_data: agent.config.transaction_events.max_samples_stored,\n        custom_event_data: agent.config.custom_insights_events.max_samples_stored,\n        error_event_data: agent.config.error_collector.max_event_samples_stored,\n        span_event_data: Config.SPAN_EVENT_LIMIT\n      }\n    }; // TODO:  After reconfiguring agent startup to wait for the server to start\n    //        or for the first transaction, add the `port` for the server too.\n    // NOTE: The concat is necessary to prevent sort from happening in-place.\n\n    results.identifier = ['nodejs', results.host, results.app_name.concat([]).sort().join(',')].join(':');\n    const ipAddresses = getAllIPAddresses();\n\n    if (ipAddresses.length) {\n      results.utilization.ip_address = ipAddresses;\n    }\n\n    if (systemInfo.bootId) {\n      results.utilization.boot_id = systemInfo.bootId;\n    }\n\n    if (systemInfo.vendors) {\n      results.utilization.vendors = systemInfo.vendors;\n    }\n\n    if (systemInfo.config) {\n      results.utilization.config = systemInfo.config;\n    }\n\n    return callback(results);\n  });\n}\n\nfunction getAllIPAddresses() {\n  const interfaces = os.networkInterfaces();\n  const localRegex = /^lo/;\n  return Object.keys(interfaces).reduce(function gatherAddresses(addresses, key) {\n    if (!localRegex.test(key)) {\n      const interfaceAddresses = interfaces[key].map(function getAddress(inter) {\n        return inter.address;\n      });\n\n      for (let index = 0; index < interfaceAddresses.length; index++) {\n        const address = interfaceAddresses[index];\n        addresses.push(address);\n      }\n    }\n\n    return addresses;\n  }, []);\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/collector/facts.js"],"names":["a","require","fetchSystemInfo","logger","child","component","os","parse_labels","Config","module","exports","facts","agent","callback","startTime","Date","now","parallel","systemInfo","apply","environment","getJSON","factMapCb","err","data","trace","debug","Object","create","hostname","config","getHostnameSafe","results","utilization","metadata_version","logical_processors","logicalProcessors","total_ram_mib","memory","pid","process","host","display_host","getDisplayHost","language","app_name","applications","agent_version","version","settings","publicSettings","high_security","labels","metadata","keys","env","reduce","obj","key","startsWith","event_harvest_config","harvest_limits","analytic_event_data","transaction_events","max_samples_stored","custom_event_data","custom_insights_events","error_event_data","error_collector","max_event_samples_stored","span_event_data","SPAN_EVENT_LIMIT","identifier","concat","sort","join","ipAddresses","getAllIPAddresses","length","ip_address","bootId","boot_id","vendors","interfaces","networkInterfaces","localRegex","gatherAddresses","addresses","test","interfaceAddresses","map","getAddress","inter","address","index","push"],"mappings":"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","sourcesContent":["'use strict'\n\nconst a = require('async')\nconst fetchSystemInfo = require('../system-info')\nconst logger = require('../logger').child({component: 'facts'})\nconst os = require('os')\nconst parse_labels = require('../util/label-parser')\nconst Config = require('../config/')\n\nmodule.exports = facts\n\nfunction facts(agent, callback) {\n  var startTime = Date.now()\n  a.parallel({\n    systemInfo: a.apply(fetchSystemInfo, agent),\n    environment: agent.environment.getJSON\n  }, function factMapCb(err, data) {\n    logger.trace('Facts gathering finished in %dms', Date.now() - startTime)\n\n    if (err) {\n      logger.debug(err, 'Failed to load system facts!')\n    }\n    data = data || Object.create(null)\n    const systemInfo = data.systemInfo || Object.create(null)\n    const environment = data.environment || []\n\n    const hostname = agent.config.getHostnameSafe()\n    const results = {\n      utilization: {\n        metadata_version: 5,\n        logical_processors: systemInfo.logicalProcessors || null,\n        total_ram_mib: systemInfo.memory || null,\n        hostname: hostname\n      },\n      pid: process.pid,\n      host: hostname,\n      display_host: agent.config.getDisplayHost() || hostname,\n      language: 'nodejs',\n      app_name: agent.config.applications(),\n      agent_version: agent.version,\n      environment: environment,\n      settings: agent.config.publicSettings(),\n      high_security: agent.config.high_security,\n      labels: parse_labels(agent.config.labels),\n      metadata: Object.keys(process.env).reduce((obj, key) => {\n        if (key.startsWith('NEW_RELIC_METADATA_')) {\n          obj[key] = process.env[key]\n        }\n        return obj\n      }, {})\n    }\n\n    results.event_harvest_config = {\n      harvest_limits: {\n        analytic_event_data: agent.config.transaction_events.max_samples_stored,\n        custom_event_data: agent.config.custom_insights_events.max_samples_stored,\n        error_event_data: agent.config.error_collector.max_event_samples_stored,\n        span_event_data: Config.SPAN_EVENT_LIMIT\n      }\n    }\n\n    // TODO:  After reconfiguring agent startup to wait for the server to start\n    //        or for the first transaction, add the `port` for the server too.\n    // NOTE: The concat is necessary to prevent sort from happening in-place.\n    results.identifier = [\n      'nodejs',\n      results.host,\n      results.app_name.concat([]).sort().join(',')\n    ].join(':')\n\n    const ipAddresses = getAllIPAddresses()\n    if (ipAddresses.length) {\n      results.utilization.ip_address = ipAddresses\n    }\n\n    if (systemInfo.bootId) {\n      results.utilization.boot_id = systemInfo.bootId\n    }\n\n    if (systemInfo.vendors) {\n      results.utilization.vendors = systemInfo.vendors\n    }\n\n    if (systemInfo.config) {\n      results.utilization.config = systemInfo.config\n    }\n\n    return callback(results)\n  })\n}\n\nfunction getAllIPAddresses() {\n  const interfaces = os.networkInterfaces()\n  const localRegex = /^lo/\n  return Object.keys(interfaces).reduce(function gatherAddresses(addresses, key) {\n    if (!localRegex.test(key)) {\n      const interfaceAddresses = interfaces[key].map(function getAddress(inter) {\n        return inter.address\n      })\n\n      for (let index = 0; index < interfaceAddresses.length; index++) {\n        const address = interfaceAddresses[index]\n        addresses.push(address)\n      }\n    }\n\n    return addresses\n  }, [])\n}\n"]},"metadata":{},"sourceType":"script"}