{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger').child({\n  component: 'transactionHandle'\n});\n\nvar DistributedTracePayloadStub = require('./dt-payload').Stub;\n\nmodule.exports = class TransactionHandle {\n  /**\n  * A light representation of a transaction instance, returned by calling\n  * {@link API#getTransaction}.\n  *\n  * @constructor\n  */\n  constructor(transaction) {\n    this._transaction = transaction;\n  }\n  /**\n  * End the transaction.\n  *\n  * @param  {Function} callback\n  */\n\n\n  end(callback) {\n    const tx = this._transaction.end();\n\n    if (typeof callback === 'function') {\n      // XXX: Since Transaction#end is now synchronous, this needs to\n      // asynchronously call the callback like Transaction#end used to.\n      // Change this to be synchronous in the next major version.\n      setImmediate(callback, tx);\n    }\n  }\n  /**\n  * Mark the transaction to be ignored.\n  */\n\n\n  ignore() {\n    this._transaction.setForceIgnore(true);\n  }\n  /**\n  * Return whether this Transaction is being sampled\n  */\n\n\n  isSampled() {\n    return this._transaction.isSampled();\n  }\n  /**\n  *\n  * Proxy method for Transaction#createDistrubtedTracePayload.\n  *\n  * @returns {DistributedTracePayload} The created payload object.\n  *\n  */\n\n\n  createDistributedTracePayload() {\n    return this._transaction.createDistributedTracePayload();\n  }\n  /**\n  *\n  * Proxy method for Transaction#acceptDistributedTracePayload\n  *\n  * @param {String} The payload to accept as the parent to the current trace\n  *\n  */\n\n\n  acceptDistributedTracePayload(payload) {\n    return this._transaction.acceptDistributedTracePayload(payload);\n  }\n\n};\nmodule.exports.Stub = class TransactionHandleStub {\n  end(callback) {\n    if (callback instanceof Function) {\n      setImmediate(callback);\n    }\n\n    logger.debug(\"No transaction found when calling Transaction.end\");\n  }\n\n  ignore() {\n    logger.debug(\"No transaction found when calling Transaction.ignore\");\n  }\n\n  isSampled() {\n    logger.debug(\"No transaction found when calling Transaction.isSampled\");\n  }\n\n  createDistributedTracePayload() {\n    logger.debug(\"No transaction found when calling Transaction.createDistributedTracePayload\");\n    return new DistributedTracePayloadStub();\n  }\n\n  acceptDistributedTracePayload() {\n    logger.debug(\"No transaction found when calling Transaction.acceptDistributedTracePayload\");\n  }\n\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/transaction/handle.js"],"names":["logger","require","child","component","DistributedTracePayloadStub","Stub","module","exports","TransactionHandle","constructor","transaction","_transaction","end","callback","tx","setImmediate","ignore","setForceIgnore","isSampled","createDistributedTracePayload","acceptDistributedTracePayload","payload","TransactionHandleStub","Function","debug"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,KAArB,CAA2B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA3B,CAAb;;AACA,IAAIC,2BAA2B,GAAGH,OAAO,CAAC,cAAD,CAAP,CAAwBI,IAA1D;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,iBAAN,CAAwB;AACvC;;;;;;AAMAC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,SAAKC,YAAL,GAAoBD,WAApB;AACD;AAED;;;;;;;AAKAE,EAAAA,GAAG,CAACC,QAAD,EAAW;AACZ,UAAMC,EAAE,GAAG,KAAKH,YAAL,CAAkBC,GAAlB,EAAX;;AACA,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA;AACA;AACAE,MAAAA,YAAY,CAACF,QAAD,EAAWC,EAAX,CAAZ;AACD;AACF;AAED;;;;;AAGAE,EAAAA,MAAM,GAAG;AACP,SAAKL,YAAL,CAAkBM,cAAlB,CAAiC,IAAjC;AACD;AAED;;;;;AAGAC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKP,YAAL,CAAkBO,SAAlB,EAAP;AACD;AAED;;;;;;;;;AAOAC,EAAAA,6BAA6B,GAAG;AAC9B,WAAO,KAAKR,YAAL,CAAkBQ,6BAAlB,EAAP;AACD;AAED;;;;;;;;;AAOAC,EAAAA,6BAA6B,CAACC,OAAD,EAAU;AACrC,WAAO,KAAKV,YAAL,CAAkBS,6BAAlB,CAAgDC,OAAhD,CAAP;AACD;;AA5DsC,CAAzC;AA+DAf,MAAM,CAACC,OAAP,CAAeF,IAAf,GAAsB,MAAMiB,qBAAN,CAA4B;AAChDV,EAAAA,GAAG,CAACC,QAAD,EAAW;AACZ,QAAIA,QAAQ,YAAYU,QAAxB,EAAkC;AAChCR,MAAAA,YAAY,CAACF,QAAD,CAAZ;AACD;;AACDb,IAAAA,MAAM,CAACwB,KAAP,CAAa,mDAAb;AACD;;AAEDR,EAAAA,MAAM,GAAG;AACPhB,IAAAA,MAAM,CAACwB,KAAP,CAAa,sDAAb;AACD;;AAEDN,EAAAA,SAAS,GAAG;AACVlB,IAAAA,MAAM,CAACwB,KAAP,CAAa,yDAAb;AACD;;AAEDL,EAAAA,6BAA6B,GAAG;AAC9BnB,IAAAA,MAAM,CAACwB,KAAP,CACE,6EADF;AAGA,WAAO,IAAIpB,2BAAJ,EAAP;AACD;;AAEDgB,EAAAA,6BAA6B,GAAG;AAC9BpB,IAAAA,MAAM,CAACwB,KAAP,CACE,6EADF;AAGD;;AA3B+C,CAAlD","sourcesContent":["'use strict'\nvar logger = require('../logger').child({component: 'transactionHandle'})\nvar DistributedTracePayloadStub = require('./dt-payload').Stub\n\nmodule.exports = class TransactionHandle {\n  /**\n  * A light representation of a transaction instance, returned by calling\n  * {@link API#getTransaction}.\n  *\n  * @constructor\n  */\n  constructor(transaction) {\n    this._transaction = transaction\n  }\n\n  /**\n  * End the transaction.\n  *\n  * @param  {Function} callback\n  */\n  end(callback) {\n    const tx = this._transaction.end()\n    if (typeof callback === 'function') {\n      // XXX: Since Transaction#end is now synchronous, this needs to\n      // asynchronously call the callback like Transaction#end used to.\n      // Change this to be synchronous in the next major version.\n      setImmediate(callback, tx)\n    }\n  }\n\n  /**\n  * Mark the transaction to be ignored.\n  */\n  ignore() {\n    this._transaction.setForceIgnore(true)\n  }\n\n  /**\n  * Return whether this Transaction is being sampled\n  */\n  isSampled() {\n    return this._transaction.isSampled()\n  }\n\n  /**\n  *\n  * Proxy method for Transaction#createDistrubtedTracePayload.\n  *\n  * @returns {DistributedTracePayload} The created payload object.\n  *\n  */\n  createDistributedTracePayload() {\n    return this._transaction.createDistributedTracePayload()\n  }\n\n  /**\n  *\n  * Proxy method for Transaction#acceptDistributedTracePayload\n  *\n  * @param {String} The payload to accept as the parent to the current trace\n  *\n  */\n  acceptDistributedTracePayload(payload) {\n    return this._transaction.acceptDistributedTracePayload(payload)\n  }\n}\n\nmodule.exports.Stub = class TransactionHandleStub {\n  end(callback) {\n    if (callback instanceof Function) {\n      setImmediate(callback)\n    }\n    logger.debug(\"No transaction found when calling Transaction.end\")\n  }\n\n  ignore() {\n    logger.debug(\"No transaction found when calling Transaction.ignore\")\n  }\n\n  isSampled() {\n    logger.debug(\"No transaction found when calling Transaction.isSampled\")\n  }\n\n  createDistributedTracePayload() {\n    logger.debug(\n      \"No transaction found when calling Transaction.createDistributedTracePayload\"\n    )\n    return new DistributedTracePayloadStub()\n  }\n\n  acceptDistributedTracePayload() {\n    logger.debug(\n      \"No transaction found when calling Transaction.acceptDistributedTracePayload\"\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}