{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar preBuild = require('./lib/pre-build');\n\nvar natives = preBuild.load('native_metrics');\nvar DEFAULT_TIMEOUT = 15 * 1000; // 15 seconds\n\nvar GC_TYPE_NAMES = {\n  '1': 'Scavenge',\n  '2': 'MarkSweepCompact',\n  '4': 'IncrementalMarking',\n  '8': 'ProcessWeakCallbacks',\n  '3': 'All',\n  // Node v4 and earlier only have Scavenge and MarkSweepCompact.\n  '15': 'All'\n};\n/**\n * Constructs a metric emitter. This constructor is for internal use only.\n *\n * {@link NativeMetricEmitter#bind} is called as part of construction.\n *\n * @constructor\n * @classdesc\n *  Emits events for various native events or periodic sampling.\n *\n * @param {number} [opts.timeout]\n *  The number of milliseconds between samplings. Defaults to 15 seconds.\n */\n\nfunction NativeMetricEmitter(opts) {\n  opts = opts || {\n    timeout: DEFAULT_TIMEOUT\n  };\n  EventEmitter.call(this);\n  this.bound = false;\n  this._timeout = null;\n  this._rusageMeter = new natives.RUsageMeter();\n  this.usageEnabled = true;\n  this._gcBinder = new natives.GCBinder();\n  this.gcEnabled = true;\n  this._loopChecker = new natives.LoopChecker();\n  this.loopEnabled = true;\n  this.bind(opts.timeout);\n}\n\nutil.inherits(NativeMetricEmitter, EventEmitter);\n/**\n * @interface RUsageStats\n *\n * @description\n *  Resource usage statistics.\n *\n *  Properties marked (X) are unmaintained by the operating system and are\n *  likely to be just `0`.\n *\n * @property {number} ru_utime    - user CPU time used in milliseconds\n * @property {number} ru_stime    - system CPU time used in milliseconds\n * @property {number} ru_maxrss   - maximum resident set size in bytes\n * @property {number} ru_ixrss    - integral shared memory size (X)\n * @property {number} ru_idrss    - integral unshared data size (X)\n * @property {number} ru_isrss    - integral unshared stack size (X)\n * @property {number} ru_minflt   - page reclaims (soft page faults) (X)\n * @property {number} ru_majflt   - page faults (hard page faults)\n * @property {number} ru_nswap    - swaps (X)\n * @property {number} ru_inblock  - block input operations\n * @property {number} ru_oublock  - block output operations\n * @property {number} ru_msgsnd   - IPC messages sent (X)\n * @property {number} ru_msgrcv   - IPC messages received (X)\n * @property {number} ru_nsignals - signals received (X)\n * @property {number} ru_nvcsw    - voluntary context switches (X)\n * @property {number} ru_nivcsw   - involuntary context switches (X)\n *\n * @see http://docs.libuv.org/en/v1.x/misc.html#c.uv_getrusage\n * @see http://docs.libuv.org/en/v1.x/misc.html#c.uv_rusage_t\n */\n\n/**\n * @interface LoopMetrics\n *\n * @description\n *  A mapping of loop concepts to metrics about them. All values are in\n *  microseconds.\n *\n * @property {Metric} usage - CPU usage per tick metrics.\n */\n\n/**\n * @interface GCMetrics\n *\n * @description\n *  Garbage collection results.\n *\n * @property {number} typeId  - The numeric ID of the gc type.\n * @property {string} type    - The nice name version of the gc type.\n * @property {Metric} metrics - Accumulated metric data in milliseconds.\n */\n\n/**\n * @interface Metric\n *\n * @description\n *  A bundle of values taken from some measurement.\n *\n * @property {number} total         - The sum of all values measured.\n * @property {number} min           - The smallest value measured.\n * @property {number} max           - The largest value measured.\n * @property {number} sumOfSquares  - The sum of the square of each value.\n * @property {number} count         - The number of values measured.\n */\n\n/**\n * Binds the emitter to the internal, V8 hooks to start populating data.\n *\n * @fires NativeMetricEmitter#gc\n * @fires NativeMetricEmitter#usage\n *\n * @param {number} [timeout]\n *  The number of milliseconds between samplings. Defaults to 15 seconds.\n */\n\nNativeMetricEmitter.prototype.bind = function bind(timeout) {\n  if (this.bound) {\n    return;\n  }\n\n  timeout = timeout || DEFAULT_TIMEOUT;\n\n  this._gcBinder.bind();\n\n  this._loopChecker.bind();\n\n  this._timeout = setTimeout(nativeMetricTimeout.bind(this), timeout).unref();\n\n  function nativeMetricTimeout() {\n    if (this._rusageMeter) {\n      /**\n       * Resource usage sampling event.\n       *\n       * @event NativeMetricEmitter#usage\n       * @type {object}\n       *\n       * @property {RUsageStats} diff     - The change in stats since last sampling.\n       * @property {RUsageStats} current  - The current usage statistics.\n       */\n      this.emit('usage', this._rusageMeter.read());\n    }\n\n    if (this.bound) {\n      this._timeout = setTimeout(nativeMetricTimeout.bind(this), timeout).unref();\n    }\n  }\n\n  this.bound = true;\n};\n/**\n * Removes internal hooks and stops any open sampling timers.\n */\n\n\nNativeMetricEmitter.prototype.unbind = function unbind() {\n  if (!this.bound) {\n    return;\n  }\n\n  this._gcBinder.unbind();\n\n  this._loopChecker.unbind();\n\n  clearTimeout(this._timeout);\n  this.bound = false;\n};\n/**\n * Retrieves the current loop metrics and resets the counters.\n *\n * @return {LoopMetrics} The current loop metrics.\n */\n\n\nNativeMetricEmitter.prototype.getLoopMetrics = function getLoopMetrics() {\n  return this._loopChecker.read();\n};\n/**\n * Retrieves the accumulated garbage collection metrics.\n *\n * After retrieval, the metrics are reset internally. Only GC types that have\n * happened at least once since the last retrieval are returned.\n *\n * @return {object.<string,GCMetrics>} An object mapping GC type names to\n *  information on the GC events that happened.\n */\n\n\nNativeMetricEmitter.prototype.getGCMetrics = function getGCMetrics() {\n  var gcMetrics = this._gcBinder.read();\n\n  var results = Object.create(null);\n\n  for (var typeId in gcMetrics) {\n    if (gcMetrics.hasOwnProperty(typeId) && gcMetrics[typeId].count > 0) {\n      var typeName = GC_TYPE_NAMES[String(typeId)];\n      results[typeName] = {\n        typeId: parseInt(typeId, 10),\n        type: typeName,\n        metrics: gcMetrics[typeId]\n      };\n    }\n  }\n\n  return results;\n};\n\nvar emitter = null;\n/**\n * Retrieves the {@link NativeMetricEmitter} singleton instance.\n *\n * @param {object} [opts]\n *  Options for constructing the emitter. See {@link NativeMetricEmitter} for\n *  default values. Only used on the first call to construct the instance.\n */\n\nmodule.exports = function getMetricEmitter(opts) {\n  if (!emitter) {\n    emitter = new NativeMetricEmitter(opts);\n  }\n\n  return emitter;\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/@newrelic/native-metrics/index.js"],"names":["EventEmitter","require","util","preBuild","natives","load","DEFAULT_TIMEOUT","GC_TYPE_NAMES","NativeMetricEmitter","opts","timeout","call","bound","_timeout","_rusageMeter","RUsageMeter","usageEnabled","_gcBinder","GCBinder","gcEnabled","_loopChecker","LoopChecker","loopEnabled","bind","inherits","prototype","setTimeout","nativeMetricTimeout","unref","emit","read","unbind","clearTimeout","getLoopMetrics","getGCMetrics","gcMetrics","results","Object","create","typeId","hasOwnProperty","count","typeName","String","parseInt","type","metrics","emitter","module","exports","getMetricEmitter"],"mappings":"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","sourcesContent":["'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar preBuild = require('./lib/pre-build')\nvar natives = preBuild.load('native_metrics')\n\n\nvar DEFAULT_TIMEOUT = 15 * 1000 // 15 seconds\nvar GC_TYPE_NAMES = {\n  '1': 'Scavenge',\n  '2': 'MarkSweepCompact',\n  '4': 'IncrementalMarking',\n  '8': 'ProcessWeakCallbacks',\n\n  '3': 'All', // Node v4 and earlier only have Scavenge and MarkSweepCompact.\n  '15': 'All'\n}\n\n\n/**\n * Constructs a metric emitter. This constructor is for internal use only.\n *\n * {@link NativeMetricEmitter#bind} is called as part of construction.\n *\n * @constructor\n * @classdesc\n *  Emits events for various native events or periodic sampling.\n *\n * @param {number} [opts.timeout]\n *  The number of milliseconds between samplings. Defaults to 15 seconds.\n */\nfunction NativeMetricEmitter(opts) {\n  opts = opts || {timeout: DEFAULT_TIMEOUT}\n  EventEmitter.call(this)\n  this.bound = false\n  this._timeout = null\n\n  this._rusageMeter = new natives.RUsageMeter()\n  this.usageEnabled = true\n\n  this._gcBinder = new natives.GCBinder()\n  this.gcEnabled = true\n\n  this._loopChecker = new natives.LoopChecker()\n  this.loopEnabled = true\n\n  this.bind(opts.timeout)\n}\nutil.inherits(NativeMetricEmitter, EventEmitter)\n\n/**\n * @interface RUsageStats\n *\n * @description\n *  Resource usage statistics.\n *\n *  Properties marked (X) are unmaintained by the operating system and are\n *  likely to be just `0`.\n *\n * @property {number} ru_utime    - user CPU time used in milliseconds\n * @property {number} ru_stime    - system CPU time used in milliseconds\n * @property {number} ru_maxrss   - maximum resident set size in bytes\n * @property {number} ru_ixrss    - integral shared memory size (X)\n * @property {number} ru_idrss    - integral unshared data size (X)\n * @property {number} ru_isrss    - integral unshared stack size (X)\n * @property {number} ru_minflt   - page reclaims (soft page faults) (X)\n * @property {number} ru_majflt   - page faults (hard page faults)\n * @property {number} ru_nswap    - swaps (X)\n * @property {number} ru_inblock  - block input operations\n * @property {number} ru_oublock  - block output operations\n * @property {number} ru_msgsnd   - IPC messages sent (X)\n * @property {number} ru_msgrcv   - IPC messages received (X)\n * @property {number} ru_nsignals - signals received (X)\n * @property {number} ru_nvcsw    - voluntary context switches (X)\n * @property {number} ru_nivcsw   - involuntary context switches (X)\n *\n * @see http://docs.libuv.org/en/v1.x/misc.html#c.uv_getrusage\n * @see http://docs.libuv.org/en/v1.x/misc.html#c.uv_rusage_t\n */\n\n/**\n * @interface LoopMetrics\n *\n * @description\n *  A mapping of loop concepts to metrics about them. All values are in\n *  microseconds.\n *\n * @property {Metric} usage - CPU usage per tick metrics.\n */\n\n/**\n * @interface GCMetrics\n *\n * @description\n *  Garbage collection results.\n *\n * @property {number} typeId  - The numeric ID of the gc type.\n * @property {string} type    - The nice name version of the gc type.\n * @property {Metric} metrics - Accumulated metric data in milliseconds.\n */\n\n/**\n * @interface Metric\n *\n * @description\n *  A bundle of values taken from some measurement.\n *\n * @property {number} total         - The sum of all values measured.\n * @property {number} min           - The smallest value measured.\n * @property {number} max           - The largest value measured.\n * @property {number} sumOfSquares  - The sum of the square of each value.\n * @property {number} count         - The number of values measured.\n */\n\n/**\n * Binds the emitter to the internal, V8 hooks to start populating data.\n *\n * @fires NativeMetricEmitter#gc\n * @fires NativeMetricEmitter#usage\n *\n * @param {number} [timeout]\n *  The number of milliseconds between samplings. Defaults to 15 seconds.\n */\nNativeMetricEmitter.prototype.bind = function bind(timeout) {\n  if (this.bound) {\n    return\n  }\n\n  timeout = timeout || DEFAULT_TIMEOUT\n  this._gcBinder.bind()\n  this._loopChecker.bind()\n\n  this._timeout = setTimeout(nativeMetricTimeout.bind(this), timeout).unref()\n  function nativeMetricTimeout() {\n    if (this._rusageMeter) {\n      /**\n       * Resource usage sampling event.\n       *\n       * @event NativeMetricEmitter#usage\n       * @type {object}\n       *\n       * @property {RUsageStats} diff     - The change in stats since last sampling.\n       * @property {RUsageStats} current  - The current usage statistics.\n       */\n      this.emit('usage', this._rusageMeter.read())\n    }\n    if (this.bound) {\n      this._timeout = setTimeout(nativeMetricTimeout.bind(this), timeout).unref()\n    }\n  }\n\n  this.bound = true\n}\n\n/**\n * Removes internal hooks and stops any open sampling timers.\n */\nNativeMetricEmitter.prototype.unbind = function unbind() {\n  if (!this.bound) {\n    return\n  }\n\n  this._gcBinder.unbind()\n  this._loopChecker.unbind()\n  clearTimeout(this._timeout)\n  this.bound = false\n}\n\n/**\n * Retrieves the current loop metrics and resets the counters.\n *\n * @return {LoopMetrics} The current loop metrics.\n */\nNativeMetricEmitter.prototype.getLoopMetrics = function getLoopMetrics() {\n  return this._loopChecker.read()\n}\n\n/**\n * Retrieves the accumulated garbage collection metrics.\n *\n * After retrieval, the metrics are reset internally. Only GC types that have\n * happened at least once since the last retrieval are returned.\n *\n * @return {object.<string,GCMetrics>} An object mapping GC type names to\n *  information on the GC events that happened.\n */\nNativeMetricEmitter.prototype.getGCMetrics = function getGCMetrics() {\n  var gcMetrics = this._gcBinder.read()\n  var results = Object.create(null)\n  for (var typeId in gcMetrics) {\n    if (gcMetrics.hasOwnProperty(typeId) && gcMetrics[typeId].count > 0) {\n      var typeName = GC_TYPE_NAMES[String(typeId)]\n      results[typeName] = {\n        typeId: parseInt(typeId, 10),\n        type: typeName,\n        metrics: gcMetrics[typeId]\n      }\n    }\n  }\n\n  return results\n}\n\nvar emitter = null\n\n/**\n * Retrieves the {@link NativeMetricEmitter} singleton instance.\n *\n * @param {object} [opts]\n *  Options for constructing the emitter. See {@link NativeMetricEmitter} for\n *  default values. Only used on the first call to construct the instance.\n */\nmodule.exports = function getMetricEmitter(opts) {\n  if (!emitter) {\n    emitter = new NativeMetricEmitter(opts)\n  }\n  return emitter\n}\n"]},"metadata":{},"sourceType":"script"}