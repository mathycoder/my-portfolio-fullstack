{"ast":null,"code":"'use strict';\n\nconst DESTS = require('./config/attribute-filter').DESTINATIONS;\n\nconst COLLECTED_REQUEST_HEADERS = ['accept', 'content-length', 'content-type', 'referer', 'user-agent', 'host'];\nconst HEADER_ATTR_NAMES = {\n  'accept': 'accept',\n  'accept-charset': 'acceptCharset',\n  'accept-encoding': 'acceptEncoding',\n  'access-control-allow-headers': 'accessControlAllowHeaders',\n  'access-control-allow-methods': 'accessControlAllowMethods',\n  'access-control-allow-origin': 'accessControlAllowOrigin',\n  'age': 'age',\n  'allow': 'allow',\n  'authorization': 'authorization',\n  'cache-control': 'cacheControl',\n  'connection': 'connection',\n  'cookie': 'cookie',\n  'content-encoding': 'contentEncoding',\n  'content-length': 'contentLength',\n  'content-type': 'contentType',\n  'date': 'date',\n  'etag': 'eTag',\n  'expect': 'expect',\n  'expires': 'expires',\n  'forwarded': 'forwarded',\n  'host': 'host',\n  'if-match': 'ifMatch',\n  'if-modified-since': 'ifModifiedSince',\n  'last-modified': 'lastModified',\n  'location': 'location',\n  'newrelic': 'newrelic',\n  'origin': 'origin',\n  'proxy-authorization': 'proxyAuthorization',\n  'referer': 'referer',\n  'refresh': 'refresh',\n  'server': 'server',\n  'set-cookie': 'setCookie',\n  'transfer-encoding': 'transferEncoding',\n  'user-agent': 'userAgent',\n  'upgrade': 'upgrade',\n  'vary': 'vary',\n  'x-correlation-id': 'xCorrelationId',\n  'x-csrf-token': 'xCsrfToken',\n  'x-forwarded-for': 'xForwardedFor',\n  'x-http-method-override': 'xHttpMethodOverride',\n  'x-newrelic-app-data': 'xNewrelicAppData',\n  'x-newrelic-id': 'xNewrelicId',\n  'x-newrelic-synthetics': 'xNewrelicSynthetics',\n  'x-newrelic-transaction': 'xNewrelicTransaction',\n  'x-powered-by': 'xPoweredBy',\n  'x-queue-start': 'xQueueStart',\n  'x-request-id': 'xRequestId',\n  'x-request-start': 'xRequestStart',\n  'x-requested-with': 'xRequestedWith'\n};\nconst REQUEST_HEADER_PREFIX = 'request.headers.';\nconst RESPONSE_HEADER_PREFIX = 'response.headers.';\nconst REQUEST_HEADER_NAMES = Object.create(null);\nconst RESPONSE_HEADER_NAMES = Object.create(null);\n\n_setHeaderAttrNames(REQUEST_HEADER_NAMES, REQUEST_HEADER_PREFIX);\n\n_setHeaderAttrNames(RESPONSE_HEADER_NAMES, RESPONSE_HEADER_PREFIX);\n\nfunction _setHeaderAttrNames(dest, prefix) {\n  Object.keys(HEADER_ATTR_NAMES).forEach(function forEachHeader(h) {\n    dest[h] = prefix + HEADER_ATTR_NAMES[h];\n  });\n}\n\nfunction _headerToCamelCase(header) {\n  if (header.length === 0) {\n    return '';\n  }\n\n  if (header.length === 1) {\n    return header.toLowerCase();\n  }\n\n  const newHeader = header.charAt(0).toLowerCase() + header.slice(1); // Converts headers in the form 'header-name' to be in the form 'headerName'\n\n  return newHeader.replace(/[\\W_]+(\\w)/g, function capitalize(m, $1) {\n    return $1.toUpperCase();\n  });\n}\n\nfunction _collectHeaders(headers, nameMap, prefix, transaction) {\n  if (!headers) {\n    return;\n  }\n\n  if (!transaction.agent.config.allow_all_headers) {\n    headers = Object.keys(headers).reduce((collection, key) => {\n      collection[key.toLowerCase()] = headers[key];\n      return collection;\n    }, {});\n  }\n\n  var headerKeys = !transaction.agent.config.allow_all_headers ? COLLECTED_REQUEST_HEADERS : Object.keys(headers);\n\n  for (var i = 0; i < headerKeys.length; i++) {\n    var headerKey = headerKeys[i];\n    var header = headers[headerKey];\n\n    if (header !== undefined) {\n      // If any more processing of the headers is required consider refactoring this.\n      if (headerKey === 'referer' && typeof header === 'string') {\n        var queryParamIndex = header.indexOf('?');\n\n        if (queryParamIndex !== -1) {\n          header = header.substring(0, queryParamIndex);\n        }\n      }\n\n      var attributeName = nameMap[headerKey] || prefix + _headerToCamelCase(headerKey);\n\n      transaction.trace.attributes.addAttribute(DESTS.TRANS_COMMON, attributeName, header);\n    }\n  }\n}\n/**\n * Adds request headers as request.headers.* attributes to the given transaction.\n * @param {Object.<string, string>} headers - Request headers to add attributes for.\n * @param {Transaction} transaction - Transaction to add header attributes to.\n */\n\n\nfunction collectRequestHeaders(headers, transaction) {\n  _collectHeaders(headers, REQUEST_HEADER_NAMES, REQUEST_HEADER_PREFIX, transaction);\n}\n/**\n * Adds response headers as response.headers.* attributes to the given transaction.\n * @param {Object.<string, string>} headers - Response headers to add attributes for.\n * @param {Transaction} transaction - Transaction to add header attributes to.\n */\n\n\nfunction collectResponseHeaders(headers, transaction) {\n  _collectHeaders(headers, RESPONSE_HEADER_NAMES, RESPONSE_HEADER_PREFIX, transaction);\n}\n\nmodule.exports = {\n  collectRequestHeaders,\n  collectResponseHeaders\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/header-attributes.js"],"names":["DESTS","require","DESTINATIONS","COLLECTED_REQUEST_HEADERS","HEADER_ATTR_NAMES","REQUEST_HEADER_PREFIX","RESPONSE_HEADER_PREFIX","REQUEST_HEADER_NAMES","Object","create","RESPONSE_HEADER_NAMES","_setHeaderAttrNames","dest","prefix","keys","forEach","forEachHeader","h","_headerToCamelCase","header","length","toLowerCase","newHeader","charAt","slice","replace","capitalize","m","$1","toUpperCase","_collectHeaders","headers","nameMap","transaction","agent","config","allow_all_headers","reduce","collection","key","headerKeys","i","headerKey","undefined","queryParamIndex","indexOf","substring","attributeName","trace","attributes","addAttribute","TRANS_COMMON","collectRequestHeaders","collectResponseHeaders","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst DESTS = require('./config/attribute-filter').DESTINATIONS\n\nconst COLLECTED_REQUEST_HEADERS = [\n  'accept',\n  'content-length',\n  'content-type',\n  'referer',\n  'user-agent',\n  'host'\n]\n\nconst HEADER_ATTR_NAMES = {\n  'accept':                       'accept',\n  'accept-charset':               'acceptCharset',\n  'accept-encoding':              'acceptEncoding',\n  'access-control-allow-headers': 'accessControlAllowHeaders',\n  'access-control-allow-methods': 'accessControlAllowMethods',\n  'access-control-allow-origin':  'accessControlAllowOrigin',\n  'age':                          'age',\n  'allow':                        'allow',\n  'authorization':                'authorization',\n  'cache-control':                'cacheControl',\n  'connection':                   'connection',\n  'cookie':                       'cookie',\n  'content-encoding':             'contentEncoding',\n  'content-length':               'contentLength',\n  'content-type':                 'contentType',\n  'date':                         'date',\n  'etag':                         'eTag',\n  'expect':                       'expect',\n  'expires':                      'expires',\n  'forwarded':                    'forwarded',\n  'host':                         'host',\n  'if-match':                     'ifMatch',\n  'if-modified-since':            'ifModifiedSince',\n  'last-modified':                'lastModified',\n  'location':                     'location',\n  'newrelic':                     'newrelic',\n  'origin':                       'origin',\n  'proxy-authorization':          'proxyAuthorization',\n  'referer':                      'referer',\n  'refresh':                      'refresh',\n  'server':                       'server',\n  'set-cookie':                   'setCookie',\n  'transfer-encoding':            'transferEncoding',\n  'user-agent':                   'userAgent',\n  'upgrade':                      'upgrade',\n  'vary':                         'vary',\n  'x-correlation-id':             'xCorrelationId',\n  'x-csrf-token':                 'xCsrfToken',\n  'x-forwarded-for':              'xForwardedFor',\n  'x-http-method-override':       'xHttpMethodOverride',\n  'x-newrelic-app-data':          'xNewrelicAppData',\n  'x-newrelic-id':                'xNewrelicId',\n  'x-newrelic-synthetics':        'xNewrelicSynthetics',\n  'x-newrelic-transaction':       'xNewrelicTransaction',\n  'x-powered-by':                 'xPoweredBy',\n  'x-queue-start':                'xQueueStart',\n  'x-request-id':                 'xRequestId',\n  'x-request-start':              'xRequestStart',\n  'x-requested-with':             'xRequestedWith'\n}\n\nconst REQUEST_HEADER_PREFIX = 'request.headers.'\nconst RESPONSE_HEADER_PREFIX = 'response.headers.'\nconst REQUEST_HEADER_NAMES = Object.create(null)\nconst RESPONSE_HEADER_NAMES = Object.create(null)\n\n_setHeaderAttrNames(REQUEST_HEADER_NAMES, REQUEST_HEADER_PREFIX)\n_setHeaderAttrNames(RESPONSE_HEADER_NAMES, RESPONSE_HEADER_PREFIX)\n\nfunction _setHeaderAttrNames(dest, prefix) {\n  Object.keys(HEADER_ATTR_NAMES).forEach(function forEachHeader(h) {\n    dest[h] = prefix + HEADER_ATTR_NAMES[h]\n  })\n}\n\nfunction _headerToCamelCase(header) {\n  if (header.length === 0) {\n    return ''\n  }\n\n  if (header.length === 1) {\n    return header.toLowerCase()\n  }\n\n  const newHeader = header.charAt(0).toLowerCase() + header.slice(1)\n\n  // Converts headers in the form 'header-name' to be in the form 'headerName'\n  return newHeader.replace(/[\\W_]+(\\w)/g, function capitalize(m, $1) {\n    return $1.toUpperCase()\n  })\n}\n\nfunction _collectHeaders(headers, nameMap, prefix, transaction) {\n  if (!headers) {\n    return\n  }\n\n  if (!transaction.agent.config.allow_all_headers) {\n    headers = Object.keys(headers).reduce((collection, key) => {\n      collection[key.toLowerCase()] = headers[key]\n      return collection\n    }, {})\n  }\n\n  var headerKeys = !transaction.agent.config.allow_all_headers\n    ? COLLECTED_REQUEST_HEADERS\n    : Object.keys(headers)\n\n  for (var i = 0; i < headerKeys.length; i++) {\n    var headerKey = headerKeys[i]\n    var header = headers[headerKey]\n    if (header !== undefined) {\n      // If any more processing of the headers is required consider refactoring this.\n      if (headerKey === 'referer' && typeof header === 'string') {\n        var queryParamIndex = header.indexOf('?')\n        if (queryParamIndex !== -1) {\n          header = header.substring(0, queryParamIndex)\n        }\n      }\n\n      var attributeName = nameMap[headerKey] || prefix + _headerToCamelCase(headerKey)\n      transaction.trace.attributes.addAttribute(\n        DESTS.TRANS_COMMON,\n        attributeName,\n        header\n      )\n    }\n  }\n}\n\n/**\n * Adds request headers as request.headers.* attributes to the given transaction.\n * @param {Object.<string, string>} headers - Request headers to add attributes for.\n * @param {Transaction} transaction - Transaction to add header attributes to.\n */\nfunction collectRequestHeaders(headers, transaction) {\n  _collectHeaders(headers, REQUEST_HEADER_NAMES, REQUEST_HEADER_PREFIX, transaction)\n}\n\n/**\n * Adds response headers as response.headers.* attributes to the given transaction.\n * @param {Object.<string, string>} headers - Response headers to add attributes for.\n * @param {Transaction} transaction - Transaction to add header attributes to.\n */\nfunction collectResponseHeaders(headers, transaction) {\n  _collectHeaders(headers, RESPONSE_HEADER_NAMES, RESPONSE_HEADER_PREFIX, transaction)\n}\n\nmodule.exports = {\n  collectRequestHeaders,\n  collectResponseHeaders\n}\n"]},"metadata":{},"sourceType":"script"}