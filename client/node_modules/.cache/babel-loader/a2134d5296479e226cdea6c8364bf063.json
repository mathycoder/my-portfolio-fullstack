{"ast":null,"code":"'use strict';\n\nvar stringify = require('json-stringify-safe');\n\nvar zlib = require('zlib');\n\nmodule.exports = {\n  /**\n   * Take in an object literal, and deflate and then Base64 encode it.\n   *\n   * zlib works with streams, so this must be used asynchronously.\n   *\n   * @param {object} data\n   *  The data to encode.\n   *\n   * @param {Function} callback\n   *  The callback to take the results. The first parameter is any errors from\n   *  encoding, and the second parameter is the encoded data object.\n   */\n  encode: function encode(data, callback) {\n    try {\n      zlib.deflate(stringify(data), function cb_deflate(err, raw) {\n        if (err) return callback(err);\n        return callback(null, raw.toString('base64'));\n      });\n    } catch (err) {\n      return callback(err);\n    }\n  },\n\n  /**\n   * Base64 decode a string, decompress it, and then turn the results back into\n   * a JavaScript object.\n   *\n   * zlib works with streams, so this must be used asynchronously.\n   *\n   * @param {object} encoded\n   *  The data to decode.\n   *\n   * @param {Function} callback\n   *  The callback to take the results. The first parameter is any errors from\n   *  decoding, and the second parameter is the decoded data object.\n   */\n  decode: function decode(encoded, callback) {\n    zlib.inflate(Buffer.from(encoded, 'base64'), function cb_inflate(err, raw) {\n      if (err) return callback(err);\n      let json;\n\n      try {\n        json = JSON.parse(raw);\n      } catch (error) {\n        return callback(error);\n      }\n\n      return callback(null, json);\n    });\n  },\n\n  /**\n   * Take in an object literal, and deflate and then Base64 encode it.\n   *\n   * This is the synchronous version.\n   *\n   * @param {object} data\n   *  The data to encode.\n   */\n  encodeSync: function encodeSync(data) {\n    return zlib.deflateSync(stringify(data)).toString('base64');\n  },\n\n  /**\n   * Base64 decode a string, decompress it, and then turn the results back into\n   * a JavaScript object.\n   *\n   * This is the synchronous version.\n   *\n   * @param {object} encoded\n   *  The data to decode.\n   */\n  decodeSync: function decodeSync(encoded) {\n    return JSON.parse(zlib.inflateSync(Buffer.from(encoded, 'base64')));\n  }\n};","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/util/codec.js"],"names":["stringify","require","zlib","module","exports","encode","data","callback","deflate","cb_deflate","err","raw","toString","decode","encoded","inflate","Buffer","from","cb_inflate","json","JSON","parse","error","encodeSync","deflateSync","decodeSync","inflateSync"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;;;;;;AAYAC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;AACtC,QAAI;AACFL,MAAAA,IAAI,CAACM,OAAL,CAAaR,SAAS,CAACM,IAAD,CAAtB,EAA8B,SAASG,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC1D,YAAID,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AAET,eAAOH,QAAQ,CAAC,IAAD,EAAOI,GAAG,CAACC,QAAJ,CAAa,QAAb,CAAP,CAAf;AACD,OAJD;AAKD,KAND,CAME,OAAOF,GAAP,EAAY;AACZ,aAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;AACF,GAvBc;;AAyBf;;;;;;;;;;;;;AAaAG,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,OAAhB,EAAyBP,QAAzB,EAAmC;AACzCL,IAAAA,IAAI,CAACa,OAAL,CAAaC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqB,QAArB,CAAb,EAA6C,SAASI,UAAT,CAAoBR,GAApB,EAAyBC,GAAzB,EAA8B;AACzE,UAAID,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AAET,UAAIS,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWV,GAAX,CAAP;AACD,OAFD,CAEE,OAAOW,KAAP,EAAc;AACd,eAAOf,QAAQ,CAACe,KAAD,CAAf;AACD;;AAED,aAAOf,QAAQ,CAAC,IAAD,EAAOY,IAAP,CAAf;AACD,KAXD;AAYD,GAnDc;;AAqDf;;;;;;;;AAQAI,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBjB,IAApB,EAA0B;AACpC,WAAOJ,IAAI,CAACsB,WAAL,CAAiBxB,SAAS,CAACM,IAAD,CAA1B,EAAkCM,QAAlC,CAA2C,QAA3C,CAAP;AACD,GA/Dc;;AAiEf;;;;;;;;;AASAa,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBX,OAApB,EAA6B;AACvC,WAAOM,IAAI,CAACC,KAAL,CAAWnB,IAAI,CAACwB,WAAL,CAAiBV,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqB,QAArB,CAAjB,CAAX,CAAP;AACD;AA5Ec,CAAjB","sourcesContent":["'use strict'\n\nvar stringify = require('json-stringify-safe')\nvar zlib = require('zlib')\n\nmodule.exports = {\n  /**\n   * Take in an object literal, and deflate and then Base64 encode it.\n   *\n   * zlib works with streams, so this must be used asynchronously.\n   *\n   * @param {object} data\n   *  The data to encode.\n   *\n   * @param {Function} callback\n   *  The callback to take the results. The first parameter is any errors from\n   *  encoding, and the second parameter is the encoded data object.\n   */\n  encode: function encode(data, callback) {\n    try {\n      zlib.deflate(stringify(data), function cb_deflate(err, raw) {\n        if (err) return callback(err)\n\n        return callback(null, raw.toString('base64'))\n      })\n    } catch (err) {\n      return callback(err)\n    }\n  },\n\n  /**\n   * Base64 decode a string, decompress it, and then turn the results back into\n   * a JavaScript object.\n   *\n   * zlib works with streams, so this must be used asynchronously.\n   *\n   * @param {object} encoded\n   *  The data to decode.\n   *\n   * @param {Function} callback\n   *  The callback to take the results. The first parameter is any errors from\n   *  decoding, and the second parameter is the decoded data object.\n   */\n  decode: function decode(encoded, callback) {\n    zlib.inflate(Buffer.from(encoded, 'base64'), function cb_inflate(err, raw) {\n      if (err) return callback(err)\n\n      let json\n      try {\n        json = JSON.parse(raw)\n      } catch (error) {\n        return callback(error)\n      }\n\n      return callback(null, json)\n    })\n  },\n\n  /**\n   * Take in an object literal, and deflate and then Base64 encode it.\n   *\n   * This is the synchronous version.\n   *\n   * @param {object} data\n   *  The data to encode.\n   */\n  encodeSync: function encodeSync(data) {\n    return zlib.deflateSync(stringify(data)).toString('base64')\n  },\n\n  /**\n   * Base64 decode a string, decompress it, and then turn the results back into\n   * a JavaScript object.\n   *\n   * This is the synchronous version.\n   *\n   * @param {object} encoded\n   *  The data to decode.\n   */\n  decodeSync: function decodeSync(encoded) {\n    return JSON.parse(zlib.inflateSync(Buffer.from(encoded, 'base64')))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}