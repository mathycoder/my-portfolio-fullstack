{"ast":null,"code":"'use strict';\n\nconst LASP_MAP = {\n  // LASP key\n  record_sql: {\n    // full path to corresponding config key\n    path: 'transaction_tracer.record_sql',\n    // Mapping from policy enabled status to usable config value\n    // first element is policy is off, second is policy is on\n    allowedValues: ['off', 'obfuscated'],\n    // Tracks the precedent of settings controlled by LASP.\n    filter: function mostSecureRecordSQL(first, second) {\n      // Ordered from least to most secure\n      var recordSQLSettings = ['obfuscated', 'off'];\n      var firstIdx = recordSQLSettings.indexOf(first);\n      var secondIdx = recordSQLSettings.indexOf(second);\n\n      if (firstIdx < 0 && secondIdx < 0) {\n        // Return the most secure possible\n        return recordSQLSettings[recordSQLSettings.length - 1];\n      }\n\n      return firstIdx < secondIdx ? second : first;\n    },\n    // Invokes agent method to drop any corresponding data\n    clearData: function resetCollectedData(agent) {\n      agent._resetQueries();\n    }\n  },\n  attributes_include: {\n    path: 'attributes.include_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureAttributesInclude(first, second) {\n      return first && second;\n    },\n    applyAdditionalSettings: function applyAdditionalSettings(config) {\n      config.attributes.exclude.push('request.parameters.*');\n    },\n    clearData: function clearCollectedData(agent) {\n      if (agent.config.attributes.enabled && agent.config.attributes.include.length) {\n        agent.traces.clear();\n      }\n    }\n  },\n  // TODO: rename config key, because the names contradict each other's behavior\n  allow_raw_exception_messages: {\n    path: 'strip_exception_messages.enabled',\n    allowedValues: [true, false],\n    filter: function mostSecureStripException(first, second) {\n      return first || second;\n    },\n    clearData: function resetErrors(agent) {\n      agent._resetErrors();\n    }\n  },\n  custom_events: {\n    path: 'api.custom_events_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureCustomEvents(first, second) {\n      return first && second;\n    },\n    clearData: function resetCustomEvents(agent) {\n      agent._resetCustomEvents();\n    }\n  },\n  custom_parameters: {\n    path: 'api.custom_attributes_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureCustomAttributes(first, second) {\n      return first && second;\n    },\n    clearData: function resetCustomAttributes(agent) {\n      if (agent.config.attributes.enabled) {\n        agent.traces.clear();\n      }\n    }\n  },\n  // Unimplemented\n  custom_instrumentation_editor: null,\n  message_parameters: null,\n  job_arguments: null\n};\nexports.LASP_MAP = LASP_MAP;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/config/lasp.js"],"names":["LASP_MAP","record_sql","path","allowedValues","filter","mostSecureRecordSQL","first","second","recordSQLSettings","firstIdx","indexOf","secondIdx","length","clearData","resetCollectedData","agent","_resetQueries","attributes_include","mostSecureAttributesInclude","applyAdditionalSettings","config","attributes","exclude","push","clearCollectedData","enabled","include","traces","clear","allow_raw_exception_messages","mostSecureStripException","resetErrors","_resetErrors","custom_events","mostSecureCustomEvents","resetCustomEvents","_resetCustomEvents","custom_parameters","mostSecureCustomAttributes","resetCustomAttributes","custom_instrumentation_editor","message_parameters","job_arguments","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst LASP_MAP = {\n  // LASP key\n  record_sql: {\n    // full path to corresponding config key\n    path: 'transaction_tracer.record_sql',\n    // Mapping from policy enabled status to usable config value\n    // first element is policy is off, second is policy is on\n    allowedValues: ['off', 'obfuscated'],\n    // Tracks the precedent of settings controlled by LASP.\n    filter: function mostSecureRecordSQL(first, second) {\n      // Ordered from least to most secure\n      var recordSQLSettings = ['obfuscated', 'off']\n      var firstIdx = recordSQLSettings.indexOf(first)\n      var secondIdx = recordSQLSettings.indexOf(second)\n      if (firstIdx < 0 && secondIdx < 0) {\n        // Return the most secure possible\n        return recordSQLSettings[recordSQLSettings.length - 1]\n      }\n      return firstIdx < secondIdx ? second : first\n    },\n    // Invokes agent method to drop any corresponding data\n    clearData: function resetCollectedData(agent) {\n      agent._resetQueries()\n    }\n  },\n\n  attributes_include: {\n    path: 'attributes.include_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureAttributesInclude(first, second) {\n      return first && second\n    },\n    applyAdditionalSettings: function applyAdditionalSettings(config) {\n      config.attributes.exclude.push('request.parameters.*')\n    },\n    clearData: function clearCollectedData(agent) {\n      if (agent.config.attributes.enabled && agent.config.attributes.include.length) {\n        agent.traces.clear()\n      }\n    }\n  },\n\n  // TODO: rename config key, because the names contradict each other's behavior\n  allow_raw_exception_messages: {\n    path: 'strip_exception_messages.enabled',\n    allowedValues: [true, false],\n    filter: function mostSecureStripException(first, second) {\n      return first || second\n    },\n    clearData: function resetErrors(agent) {\n      agent._resetErrors()\n    }\n  },\n\n  custom_events: {\n    path: 'api.custom_events_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureCustomEvents(first, second) {\n      return first && second\n    },\n    clearData: function resetCustomEvents(agent) {\n      agent._resetCustomEvents()\n    }\n  },\n\n  custom_parameters: {\n    path: 'api.custom_attributes_enabled',\n    allowedValues: [false, true],\n    filter: function mostSecureCustomAttributes(first, second) {\n      return first && second\n    },\n    clearData: function resetCustomAttributes(agent) {\n      if (agent.config.attributes.enabled) {\n        agent.traces.clear()\n      }\n    }\n  },\n  // Unimplemented\n  custom_instrumentation_editor: null,\n  message_parameters: null,\n  job_arguments: null\n}\n\nexports.LASP_MAP = LASP_MAP\n"]},"metadata":{},"sourceType":"script"}