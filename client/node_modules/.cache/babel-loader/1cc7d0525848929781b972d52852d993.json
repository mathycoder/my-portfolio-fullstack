{"ast":null,"code":"'use strict';\n\nvar parse = require('url').parse;\n\nvar ProxyAgent = require('https-proxy-agent');\n\nvar logger = require('../logger').child({\n  component: 'http-agent'\n});\n\nvar certificates = require('./ssl/certificates.js');\n\nconst https = require('https'); // poor person's single-instance-objects.  We\n// only ever instantiate one of each HTTP-agent\n// and just reuse the same object in all the\n// requests. This is how node does keep-alive.\n\n\nlet agentKeepAlive = null;\nlet agentProxyWithKeepAlive = null;\n/**\n * Returns an HTTP agent with keep-alive enabled\n */\n\nexports.keepAliveAgent = function keepAliveAgent(config) {\n  config = config ? config : {}; // always return the same agent instance, which\n  // ensures all requests share the same http\n  // connection\n\n  if (null !== agentKeepAlive) {\n    return agentKeepAlive;\n  }\n\n  config.keepAlive = true;\n  agentKeepAlive = new https.Agent(config);\n  return agentKeepAlive;\n};\n/**\n * Returns an HTTP-agent provided by the https-proxy-agent\n * NPM package with configuration suitable for working via\n * the configured newrelic-agent's proxy configuration.\n *\n * Include keep-alive configuration, but ultimatly its up\n * to the proxy server as to how its connection is made\n * with New Relic's servers.\n */\n\n\nexports.proxyAgent = function proxyAgent(config) {\n  if (null !== agentProxyWithKeepAlive) {\n    return agentProxyWithKeepAlive;\n  }\n\n  var opts = proxyOptions(config);\n  var proxy_url = opts.proxy_url;\n  var proxy_opts = {\n    host: proxy_url.host,\n    port: proxy_url.port,\n    protocol: proxy_url.protocol,\n    secureEndpoint: config.ssl,\n    auth: proxy_url.auth,\n    ca: opts.certificates,\n    keepAlive: true\n  };\n  logger.info({\n    host: proxy_opts.host,\n    port: proxy_opts.port,\n    auth: !!proxy_opts.auth,\n    protocol: proxy_url.protocol\n  }, 'using proxy');\n  agentProxyWithKeepAlive = new ProxyAgent(proxy_opts);\n  return agentProxyWithKeepAlive;\n};\n\nfunction proxyOptions(config) {\n  if (config.proxy) {\n    var parsed_url = parse(config.proxy);\n    var proxy_url = {\n      protocol: parsed_url.protocol || 'https:',\n      host: parsed_url.hostname,\n      port: parsed_url.port || 80,\n      auth: parsed_url.auth\n    };\n  } else {\n    var proxy_auth = config.proxy_user;\n\n    if (config.proxy_pass !== '') {\n      proxy_auth += ':' + config.proxy_pass;\n    } // Unless a proxy config is provided, default to HTTP.\n\n\n    proxy_url = {\n      protocol: 'https:',\n      host: config.proxy_host || 'localhost',\n      port: config.proxy_port || 80,\n      auth: proxy_auth\n    };\n  }\n\n  var opts = {\n    proxy_url: proxy_url\n  }; // merge user certificates with built-in certs\n\n  if (config.certificates && config.certificates.length > 0) {\n    logger.info('Using a proxy with a special cert. This enables our cert bundle which, combined ' + 'with some versions of node, exacerbates a leak in node core TLS.');\n    opts.certificates = config.certificates.concat(certificates);\n  }\n\n  return opts;\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/collector/http-agents.js"],"names":["parse","require","ProxyAgent","logger","child","component","certificates","https","agentKeepAlive","agentProxyWithKeepAlive","exports","keepAliveAgent","config","keepAlive","Agent","proxyAgent","opts","proxyOptions","proxy_url","proxy_opts","host","port","protocol","secureEndpoint","ssl","auth","ca","info","proxy","parsed_url","hostname","proxy_auth","proxy_user","proxy_pass","proxy_host","proxy_port","length","concat"],"mappings":"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","sourcesContent":["'use strict'\n\nvar parse = require('url').parse\nvar ProxyAgent = require('https-proxy-agent')\nvar logger = require('../logger').child({component: 'http-agent'})\nvar certificates = require('./ssl/certificates.js')\n\nconst https = require('https')\n\n// poor person's single-instance-objects.  We\n// only ever instantiate one of each HTTP-agent\n// and just reuse the same object in all the\n// requests. This is how node does keep-alive.\nlet agentKeepAlive = null\nlet agentProxyWithKeepAlive = null\n\n/**\n * Returns an HTTP agent with keep-alive enabled\n */\nexports.keepAliveAgent = function keepAliveAgent(config) {\n  config = config ? config : {}\n\n  // always return the same agent instance, which\n  // ensures all requests share the same http\n  // connection\n  if (null !== agentKeepAlive) {\n    return agentKeepAlive\n  }\n\n  config.keepAlive = true\n  agentKeepAlive = new https.Agent(config)\n  return agentKeepAlive\n}\n\n/**\n * Returns an HTTP-agent provided by the https-proxy-agent\n * NPM package with configuration suitable for working via\n * the configured newrelic-agent's proxy configuration.\n *\n * Include keep-alive configuration, but ultimatly its up\n * to the proxy server as to how its connection is made\n * with New Relic's servers.\n */\nexports.proxyAgent = function proxyAgent(config) {\n  if (null !== agentProxyWithKeepAlive) {\n    return agentProxyWithKeepAlive\n  }\n  var opts = proxyOptions(config)\n  var proxy_url = opts.proxy_url\n\n  var proxy_opts = {\n    host: proxy_url.host,\n    port: proxy_url.port,\n    protocol: proxy_url.protocol,\n    secureEndpoint: config.ssl,\n    auth: proxy_url.auth,\n    ca: opts.certificates,\n    keepAlive: true\n  }\n\n  logger.info({\n    host: proxy_opts.host,\n    port: proxy_opts.port,\n    auth: !!proxy_opts.auth,\n    protocol: proxy_url.protocol\n  }, 'using proxy')\n\n  agentProxyWithKeepAlive = new ProxyAgent(proxy_opts)\n  return agentProxyWithKeepAlive\n}\n\nfunction proxyOptions(config) {\n  if (config.proxy) {\n    var parsed_url = parse(config.proxy)\n\n    var proxy_url = {\n      protocol: parsed_url.protocol || 'https:',\n      host: parsed_url.hostname,\n      port: parsed_url.port || 80,\n      auth: parsed_url.auth\n    }\n  } else {\n    var proxy_auth = config.proxy_user\n    if (config.proxy_pass !== '') {\n      proxy_auth += ':' + config.proxy_pass\n    }\n\n    // Unless a proxy config is provided, default to HTTP.\n    proxy_url = {\n      protocol: 'https:',\n      host: config.proxy_host || 'localhost',\n      port: config.proxy_port || 80,\n      auth: proxy_auth\n    }\n  }\n\n  var opts = {\n    proxy_url: proxy_url\n  }\n\n  // merge user certificates with built-in certs\n\n  if (config.certificates && config.certificates.length > 0) {\n    logger.info(\n      'Using a proxy with a special cert. This enables our cert bundle which, combined ' +\n      'with some versions of node, exacerbates a leak in node core TLS.'\n    )\n    opts.certificates = config.certificates.concat(certificates)\n  }\n\n  return opts\n}\n"]},"metadata":{},"sourceType":"script"}