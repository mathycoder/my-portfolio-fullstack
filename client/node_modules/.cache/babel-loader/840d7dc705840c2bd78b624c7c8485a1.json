{"ast":null,"code":"'use strict';\n\nconst AttributeFilter = require('./attribute-filter');\n\nconst CollectorResponse = require('../collector/response');\n\nconst copy = require('../util/copy');\n\nconst defaultConfig = require('./default').config;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst feature_flag = require('../feature_flags');\n\nconst flatten = require('../util/flatten');\n\nconst fs = require('../util/unwrapped-core').fs;\n\nconst hashes = require('../util/hashes');\n\nconst os = require('os');\n\nconst parseKey = require('../collector/key-parser').parseKey;\n\nconst path = require('path');\n\nconst psemver = require('../util/process-version');\n\nconst stringify = require('json-stringify-safe');\n\nconst util = require('util');\n\nconst MergeServerConfig = require('./merge-server-config');\n\nconst harvestConfigValidator = require('./harvest-config-validator');\n\nconst mergeServerConfig = new MergeServerConfig();\n/**\n * CONSTANTS -- we gotta lotta 'em\n */\n\nconst AZURE_APP_NAME = 'APP_POOL_ID';\nconst DEFAULT_MAX_PAYLOAD_SIZE_IN_BYTES = 1000000;\n\nconst DEFAULT_CONFIG_PATH = require.resolve('./default');\n\nconst SPAN_EVENT_LIMIT = 1000;\n\nconst BASE_CONFIG_PATH = require.resolve('../../newrelic');\n\nconst DEFAULT_FILENAME = 'newrelic.js';\nconst CONFIG_FILE_LOCATIONS = [process.env.NEW_RELIC_HOME, process.cwd(), process.env.HOME, path.join(__dirname, '../../../..') // above node_modules\n];\nconst HAS_ARBITRARY_KEYS = new Set(['ignore_messages', 'expected_messages', 'labels']);\n\nconst LASP_MAP = require('./lasp').LASP_MAP;\n\nconst ENV = require('./env');\n\nconst HSM = require('./hsm');\n\nconst exists = fs.existsSync || path.existsSync;\nlet logger = null; // Lazy-loaded in `initialize`.\n\nlet _configInstance = null; // the REPL has no main module\n\nif (process.mainModule && process.mainModule.filename) {\n  CONFIG_FILE_LOCATIONS.splice(2, 0, path.dirname(process.mainModule.filename));\n}\n\nfunction isTruthular(setting) {\n  if (setting == null) {\n    return false;\n  }\n\n  var normalized = setting.toString().toLowerCase();\n\n  switch (normalized) {\n    case 'false':\n    case 'f':\n    case 'no':\n    case 'n':\n    case 'disabled':\n    case '0':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\nfunction fromObjectList(setting) {\n  try {\n    return JSON.parse('[' + setting + ']');\n  } catch (error) {\n    logger.error('New Relic configurator could not deserialize object list:');\n    logger.error(error.stack);\n  }\n}\n\nfunction _findConfigFile() {\n  var candidate;\n  var filepath;\n\n  for (var i = 0; i < CONFIG_FILE_LOCATIONS.length; i++) {\n    candidate = CONFIG_FILE_LOCATIONS[i];\n    if (!candidate) continue;\n    filepath = path.join(path.resolve(candidate), DEFAULT_FILENAME);\n    if (!exists(filepath)) continue;\n    return fs.realpathSync(filepath);\n  }\n}\n\nfunction Config(config) {\n  EventEmitter.call(this); // 1. start by cloning the defaults\n\n  try {\n    Object.assign(this, defaultConfig());\n  } catch (err) {\n    logger.warn('Unable to clone the default config, %s: %s', DEFAULT_CONFIG_PATH, err);\n  } // 2. initialize undocumented, internal-only default values\n  // feature flags are mostly private settings for gating unreleased features\n  // flags are set in the feature_flags.js file\n\n\n  this.feature_flag = copy.shallow(feature_flag.prerelease); // set by environment\n\n  this.newrelic_home = null; // set by configuration file loader\n\n  this.config_file_path = null; // set by collector on handshake\n\n  this.run_id = null;\n  this.account_id = null;\n  this.application_id = null;\n  this.web_transactions_apdex = Object.create(null);\n  this.cross_process_id = null;\n  this.encoding_key = null;\n  this.obfuscatedId = null;\n  this.primary_application_id = null;\n  this.trusted_account_ids = null;\n  this.trusted_account_key = null;\n  this.sampling_target = 10;\n  this.sampling_target_period_in_seconds = 60;\n  this.max_payload_size_in_bytes = DEFAULT_MAX_PAYLOAD_SIZE_IN_BYTES; // this value is arbitrary\n\n  this.max_trace_segments = 900;\n  this.entity_guid = null; // feature level of this account\n\n  this.product_level = 0; // product-level related\n\n  this.collect_traces = true;\n  this.collect_errors = true;\n  this.collect_span_events = true; // override options for utilization stats\n\n  this.utilization.logical_processors = null;\n  this.utilization.total_ram_mib = null;\n  this.utilization.billing_hostname = null;\n  this.browser_monitoring.loader = 'rum';\n  this.browser_monitoring.loader_version = ''; // Settings to play nice with DLPs (see NODE-1044).\n\n  this.compressed_content_encoding = 'deflate'; // Deflate or gzip\n\n  this.simple_compression = false; // Disables subcomponent compression\n\n  this.put_for_data_send = false; // Changes http verb for harvest\n  // 3. override defaults with values from the loaded / passed configuration\n\n  this._fromPassed(config); // 3.5. special values (only Azure environment APP_POOL_ID for now)\n\n\n  this._fromSpecial(); // 4. override config with environment variables\n\n\n  this._featureFlagsFromEnv();\n\n  this._fromEnvironment(); // 5. clean up anything that requires postprocessing\n\n\n  this._canonicalize(); // 6. put the version in the config\n\n\n  this.version = require('../../package.json').version; // TODO: this may belong in canonicalize.\n\n  if (!this.event_harvest_config) {\n    this.event_harvest_config = {\n      report_period_ms: 60000,\n      harvest_limits: {\n        analytic_event_data: this.transaction_events.max_samples_stored,\n        custom_event_data: this.custom_insights_events.max_samples_stored,\n        error_event_data: this.error_collector.max_event_samples_stored,\n        span_event_data: SPAN_EVENT_LIMIT\n      }\n    };\n  } // 7. serverless_mode specific settings\n\n\n  this._enforceServerless(config); // 8. apply high security overrides\n\n\n  if (this.high_security) {\n    if (this.security_policies_token) {\n      throw new Error('Security Policies and High Security Mode cannot both be present ' + 'in the agent configuration. If Security Policies have been set ' + 'for your account, please ensure the security_policies_token is ' + 'set but high_security is disabled (default).');\n    }\n\n    this._applyHighSecurity();\n  } // 9. Set instance attribute filter using updated context\n\n\n  this.attributeFilter = new AttributeFilter(this);\n}\n\nutil.inherits(Config, EventEmitter);\n/**\n * Because this module and logger depend on each other, the logger needs\n * a way to inject the actual logger instance once it's constructed.\n * It's kind of a Rube Goldberg device, but it works.\n *\n * @param {Logger} bootstrapped The actual, configured logger.\n */\n\nConfig.prototype.setLogger = function setLogger(bootstrapped) {\n  logger = bootstrapped;\n};\n/**\n * helper object for merging server side values\n */\n\n\nConfig.prototype.mergeServerConfig = mergeServerConfig;\n/**\n * Accept any configuration passed back from the server. Will log all\n * recognized, unsupported, and unknown parameters.\n *\n * @param {object} json The config blob sent by New Relic.\n */\n\nConfig.prototype.onConnect = function onConnect(json, recursion) {\n  json = json || Object.create(null);\n\n  if (this.high_security && recursion !== true && !json.high_security) {\n    this.agent_enabled = false;\n    this.emit('agent_enabled', false);\n    return;\n  }\n\n  if (Object.keys(json).length === 0) return;\n  Object.keys(json).forEach(function updateProp(key) {\n    this._fromServer(json, key);\n  }, this);\n  this.emit('change', this);\n};\n\nConfig.prototype._getMostSecure = function getMostSecure(key, currentVal, newVal) {\n  var filter = LASP_MAP[key] && LASP_MAP[key].filter;\n\n  if (!this.security_policies_token || !filter) {\n    // If we aren't applying something vetted by security policies we\n    // just return the new value.\n    return newVal;\n  } // Return the most secure if we have a filter to apply\n\n\n  return filter(currentVal, newVal);\n};\n/**\n * The guts of the logic about how to deal with server-side configuration.\n *\n * @param {object} params A configuration dictionary.\n * @param {string} key    The particular configuration parameter to set.\n */\n\n\nConfig.prototype._fromServer = function _fromServer(params, key) {\n  switch (key) {\n    // handled by the connection\n    case 'messages':\n      break;\n    // *sigh* Xzibit, etc.\n\n    case 'agent_config':\n      this.onConnect(params[key], true);\n      break;\n    // if it's undefined or null, so be it\n\n    case 'agent_run_id':\n      this.run_id = params.agent_run_id;\n      break;\n    // handled by config.onConnect\n\n    case 'high_security':\n      break;\n    // always accept these settings\n\n    case 'cross_process_id':\n    case 'encoding_key':\n      this._alwaysUpdateIfChanged(params, key);\n\n      if (this.cross_process_id && this.encoding_key) {\n        this.obfuscatedId = hashes.obfuscateNameUsingKey(this.cross_process_id, this.encoding_key);\n      }\n\n      break;\n    // always accept these settings\n\n    case 'account_id':\n    case 'application_id':\n    case 'collect_errors':\n    case 'collect_traces':\n    case 'primary_application_id':\n    case 'product_level':\n    case 'max_payload_size_in_bytes':\n    case 'sampling_target':\n    case 'sampling_target_period_in_seconds':\n    case 'trusted_account_ids':\n    case 'trusted_account_key':\n      this._alwaysUpdateIfChanged(params, key);\n\n      break;\n\n    case 'collect_error_events':\n      if (params.collect_error_events === false) {\n        this._updateNestedIfChanged(params, this.error_collector, key, 'capture_events');\n      }\n\n      break;\n    // also accept these settings\n\n    case 'url_rules':\n    case 'metric_name_rules':\n    case 'transaction_name_rules':\n    case 'transaction_segment_terms':\n      this._emitIfSet(params, key);\n\n      break;\n\n    case 'ssl':\n      if (!isTruthular(params.ssl)) {\n        logger.warn('SSL config key can no longer be disabled, not updating.');\n      }\n\n      break;\n\n    case 'apdex_t':\n    case 'web_transactions_apdex':\n      this._updateIfChanged(params, key);\n\n      break;\n\n    case 'event_harvest_config':\n      const val = params[key];\n      const isValidConfig = harvestConfigValidator.isValidHarvestConfig(val);\n\n      if (!isValidConfig) {\n        this.emit(key, null);\n        break;\n      }\n\n      logger.info('Valid event_harvest_config received. Updating harvest cycles.', val);\n      const limits = Object.keys(val.harvest_limits).reduce((acc, k) => {\n        const v = val.harvest_limits[k];\n\n        if (harvestConfigValidator.isValidHarvestValue(v)) {\n          acc[k] = v;\n        } else {\n          logger.info(`Omitting limit for ${k} due to invalid value ${v}`);\n        }\n\n        return acc;\n      }, {});\n      val.harvest_limits = limits;\n      this[key] = val;\n      this.emit(key, val);\n      break;\n\n    case 'collect_analytics_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_analytics_events === false) {\n        this.transaction_events.enabled = false;\n      }\n\n      break;\n\n    case 'collect_custom_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_custom_events === false) {\n        this.custom_insights_events.enabled = false;\n      }\n\n      break;\n\n    case 'collect_span_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_span_events === false) {\n        this.span_events.enabled = false;\n      }\n\n      break;\n\n    case 'allow_all_headers':\n      this._updateIfChanged(params, key);\n\n      this._canonicalize();\n\n      break;\n    //\n    // Browser Monitoring\n    //\n\n    case 'browser_monitoring.loader':\n      this._updateNestedIfChangedRaw(params, this.browser_monitoring, key, 'loader');\n\n      break;\n    // these are used by browser_monitoring\n    // and the api.getRUMHeader() method\n\n    case 'js_agent_file':\n    case 'js_agent_loader_file':\n    case 'beacon':\n    case 'error_beacon':\n    case 'browser_key':\n    case 'js_agent_loader':\n      this._updateNestedIfChangedRaw(params, this.browser_monitoring, key, key);\n\n      break;\n    //\n    // Cross Application Tracer\n    //\n\n    case 'cross_application_tracer.enabled':\n      this._updateNestedIfChanged(params, this.cross_application_tracer, key, 'enabled');\n\n      break;\n    //\n    // Error Collector\n    //\n\n    case 'error_collector.enabled':\n      this._updateNestedIfChanged(params, this.error_collector, 'error_collector.enabled', 'enabled');\n\n      break;\n\n    case 'error_collector.ignore_status_codes':\n      this._validateThenUpdateStatusCodes(params, this.error_collector, 'error_collector.ignore_status_codes', 'ignore_status_codes');\n\n      this._canonicalize();\n\n      break;\n\n    case 'error_collector.expected_status_codes':\n      this._validateThenUpdateStatusCodes(params, this.error_collector, 'error_collector.expected_status_codes', 'expected_status_codes');\n\n      this._canonicalize();\n\n      break;\n\n    case 'error_collector.ignore_classes':\n      this._validateThenUpdateErrorClasses(params, this.error_collector, 'error_collector.ignore_classes', 'ignore_classes');\n\n      break;\n\n    case 'error_collector.expected_classes':\n      this._validateThenUpdateErrorClasses(params, this.error_collector, 'error_collector.expected_classes', 'expected_classes');\n\n      break;\n\n    case 'error_collector.ignore_messages':\n      this._validateThenUpdateErrorMessages(params, this.error_collector, 'error_collector.ignore_messages', 'ignore_messages');\n\n      break;\n\n    case 'error_collector.expected_messages':\n      this._validateThenUpdateErrorMessages(params, this.error_collector, 'error_collector.expected_messages', 'expected_messages');\n\n      break;\n\n    case 'error_collector.capture_events':\n      this._updateNestedIfChanged(params, this.error_collector, 'error_collector.capture_events', 'capture_events');\n\n      break;\n\n    case 'error_collector.max_event_samples_stored':\n      this._updateNestedIfChanged(params, this.error_collector, 'error_collector.max_event_samples_stored', 'max_event_samples_stored');\n\n      break;\n    //\n    // Slow SQL\n    //\n\n    case 'slow_sql.enabled':\n      this._updateNestedIfChanged(params, this.slow_sql, key, 'enabled');\n\n      break;\n    //\n    // Transaction Events\n    //\n\n    case 'transaction_events.enabled':\n      this._updateNestedIfChanged(params, this.transaction_events, key, 'enabled');\n\n      break;\n    //\n    // Transaction Tracer\n    //\n\n    case 'transaction_tracer.enabled':\n      this._updateNestedIfChanged(params, this.transaction_tracer, 'transaction_tracer.enabled', 'enabled');\n\n      break;\n\n    case 'transaction_tracer.transaction_threshold':\n      this._updateNestedIfChanged(params, this.transaction_tracer, 'transaction_tracer.transaction_threshold', 'transaction_threshold');\n\n      break;\n    // Entity GUID\n\n    case 'entity_guid':\n      this.entity_guid = params[key];\n      break;\n    // These settings aren't supported by the agent (yet).\n\n    case 'sampling_rate':\n    case 'episodes_file':\n    case 'episodes_url':\n    case 'rum.load_episodes_file': // Ensure the most secure setting is applied to the settings below\n    // when enabling them.\n\n    case 'attributes.include_enabled':\n    case 'strip_exception_messages.enabled':\n    case 'transaction_tracer.record_sql':\n      this.logUnsupported(params, key);\n      break;\n    // These settings are not allowed from the server.\n\n    case 'attributes.enabled':\n    case 'attributes.exclude':\n    case 'attributes.include':\n    case 'browser_monitoring.attributes.enabled':\n    case 'browser_monitoring.attributes.exclude':\n    case 'browser_monitoring.attributes.include':\n    case 'error_collector.attributes.enabled':\n    case 'error_collector.attributes.exclude':\n    case 'error_collector.attributes.include':\n    case 'transaction_events.attributes.enabled':\n    case 'transaction_events.attributes.exclude':\n    case 'transaction_events.attributes.include':\n    case 'transaction_events.max_samples_stored':\n    case 'transaction_tracer.attributes.enabled':\n    case 'transaction_tracer.attributes.exclude':\n    case 'transaction_tracer.attributes.include':\n    case 'serverless_mode.enabled':\n      break;\n\n    default:\n      this.logUnknown(params, key);\n  }\n};\n/**\n * Change a value sent by the collector if and only if it's different from the\n * value we already have. Emit an event with the key name and the new value,\n * and log that the value has changed.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\n\n\nConfig.prototype._alwaysUpdateIfChanged = function _alwaysUpdateIfChanged(json, key) {\n  var value = json[key];\n\n  if (value != null && this[key] !== value) {\n    if (Array.isArray(value) && Array.isArray(this[key])) {\n      value.forEach(function pushIfNew(element) {\n        if (this[key].indexOf(element) === -1) this[key].push(element);\n      }, this);\n    } else {\n      this[key] = value;\n    }\n\n    this.emit(key, value);\n    logger.debug('Configuration of %s was changed to %s by New Relic.', key, value);\n  }\n};\n/**\n * Change a value sent by the collector if and only if it's different from the\n * value we already have. Emit an event with the key name and the new value,\n * and log that the value has changed.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\n\n\nConfig.prototype._updateIfChanged = function _updateIfChanged(json, key) {\n  this._updateNestedIfChanged(json, this, key, key);\n};\n/**\n * Expected and Ignored status code configuration values should look like this\n *\n *     [500,'501','503-507']\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\n\n\nConfig.prototype._validateThenUpdateStatusCodes = _validateThenUpdateStatusCodes;\n\nfunction _validateThenUpdateStatusCodes(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey];\n\n  if (!Array.isArray(valueToTest)) {\n    logger.warn('Saw SSC (ignore|expect)_status_codes that is not an array, will not merge: %s', valueToTest);\n    return;\n  }\n\n  let valid = true;\n  valueToTest.forEach(function validateArray(thingToTest) {\n    if (!('string' === typeof thingToTest || 'number' === typeof thingToTest)) {\n      logger.warn('Saw SSC (ignore|expect)_status_code that is not a number or string,' + 'will not merge: %s', thingToTest);\n      valid = false;\n    }\n  });\n\n  if (!valid) {\n    return;\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey);\n}\n/**\n * Expected and Ignored classes configuration values should look like this\n *\n *     ['Error','Again']\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\n\n\nConfig.prototype._validateThenUpdateErrorClasses = _validateThenUpdateErrorClasses;\n\nfunction _validateThenUpdateErrorClasses(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey];\n\n  if (!Array.isArray(valueToTest)) {\n    logger.warn('Saw SSC (ignore|expect)_classes that is not an array, will not merge: %s', valueToTest);\n    return;\n  }\n\n  let valid = true;\n  Object.keys(valueToTest).forEach(function validateArray(key) {\n    let thingToTest = valueToTest[key];\n\n    if ('string' !== typeof thingToTest) {\n      logger.warn('Saw SSC (ignore|expect)_class that is not a string, will not merge: %s', thingToTest);\n      valid = false;\n    }\n  });\n\n  if (!valid) {\n    return;\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey);\n}\n/**\n * Expected and Ignore messages configuration values should look like this\n *\n *     {'ErrorType':['Error Message']}\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\n\n\nConfig.prototype._validateThenUpdateErrorMessages = _validateThenUpdateErrorMessages;\n\nfunction _validateThenUpdateErrorMessages(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey];\n\n  if (Array.isArray(valueToTest)) {\n    logger.warn('Saw SSC (ignore|expect)_message that is an Array, will not merge: %s', valueToTest);\n    return;\n  }\n\n  if (!valueToTest) {\n    logger.warn('SSC ignore|expect_message is null or undefined, will not merge');\n    return;\n  }\n\n  if ('object' !== typeof valueToTest) {\n    logger.warn('Saw SSC (ignore|expect)_message that is primitive/scaler, will not merge: %s', valueToTest);\n    return;\n  }\n\n  if (!valueToTest) {\n    logger.warn('SSC ignore|expect_message is null or undefined, will not merge');\n    return;\n  }\n\n  let valid = true;\n  Object.keys(valueToTest).forEach(function validateArray(key) {\n    let arrayToTest = valueToTest[key];\n\n    if (!Array.isArray(arrayToTest)) {\n      logger.warn('Saw SSC message array that is not an array, will not merge: %s', arrayToTest);\n      valid = false;\n    }\n  });\n\n  if (!valid) {\n    return;\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey);\n}\n/**\n * Some parameter values are nested, need a simple way to change them as well.\n * Will merge local and remote if and only if both are arrays.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\n\n\nConfig.prototype._updateNestedIfChanged = _updateNestedIfChanged;\n\nfunction _updateNestedIfChanged(remote, local, remoteKey, localKey) {\n  // if high-sec mode is enabled, we do not accept server changes to high-sec\n  if (this.high_security && HSM.HIGH_SECURITY_KEYS.indexOf(remoteKey) !== -1) {\n    return this.logDisabled(remote, remoteKey);\n  }\n\n  return this._updateNestedIfChangedRaw(remote, local, remoteKey, localKey);\n}\n\nConfig.prototype._updateNestedIfChangedRaw = _updateNestedIfChangedRaw;\n\nfunction _updateNestedIfChangedRaw(remote, local, remoteKey, localKey) {\n  return this.mergeServerConfig.updateNestedIfChanged(this, remote, local, remoteKey, localKey, logger);\n}\n/**\n * Some parameter values are just to be passed on.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\n\n\nConfig.prototype._emitIfSet = function _emitIfSet(json, key) {\n  var value = json[key];\n  if (value != null) this.emit(key, value);\n};\n/**\n * The agent would normally do something with this parameter, but server-side\n * configuration is disabled via local settings or HSM.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent won't set.\n */\n\n\nConfig.prototype.logDisabled = function logDisabled(json, key) {\n  var value = json[key];\n\n  if (value != null) {\n    logger.debug('Server-side configuration of %s is currently disabled by local configuration. ' + '(Server sent value of %s.)', key, value);\n  }\n};\n/**\n * Help support out by putting in the logs the fact that we don't currently\n * support the provided configuration key, and including the sent value.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent doesn't set.\n */\n\n\nConfig.prototype.logUnsupported = function logUnsupported(json, key) {\n  var value = json[key];\n\n  if (value !== null && value !== undefined) {\n    logger.debug('Server-side configuration of %s is currently not supported by the ' + 'Node.js agent. (Server sent value of %s.)', key, value);\n    this.emit(key, value);\n  }\n};\n/**\n * The agent knows nothing about this parameter.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent knows nothing about.\n */\n\n\nConfig.prototype.logUnknown = function logUnknown(json, key) {\n  var value = json[key];\n  logger.debug('New Relic sent unknown configuration parameter %s with value %s.', key, value);\n};\n/**\n * Return the availability of async_hook for use by the agent.\n */\n\n\nConfig.prototype.checkAsyncHookStatus = function checkAsyncHookStatus() {\n  return this.feature_flag.await_support && (psemver.satisfies('>=8') || psemver.prerelease());\n};\n/**\n * Gets the user set host display name. If not provided, it returns the default value.\n *\n * This function is written is this strange way becauase of the use of caching variables.\n * I wanted to cache the DisplayHost, but if I attached the variable to the config object,\n * it sends the extra variable to New Relic, which is not desired.\n *\n * @return {string} display host name\n */\n\n\nConfig.prototype.getDisplayHost = getDisplayHost;\n\nConfig.prototype.clearDisplayHostCache = function clearDisplayHostCache() {\n  this.getDisplayHost = getDisplayHost;\n};\n\nfunction getDisplayHost() {\n  var _displayHost;\n\n  this.getDisplayHost = function getCachedDisplayHost() {\n    return _displayHost;\n  };\n\n  if (this.process_host.display_name === '') {\n    _displayHost = this.getHostnameSafe();\n    return _displayHost;\n  }\n\n  var stringBuffer = Buffer.from(this.process_host.display_name, 'utf8');\n  var numBytes = stringBuffer.length;\n\n  if (numBytes > 255) {\n    logger.warn('Custom host display name must be less than 255 bytes');\n    _displayHost = this.getHostnameSafe();\n    return _displayHost;\n  }\n\n  _displayHost = this.process_host.display_name;\n  return _displayHost;\n}\n/**\n * Gets the system's host name. If that fails, it just returns ipv4/6 based on the user's\n * process_host.ipv_preferenece setting.\n *\n * This function is written is this strange way becauase of the use of caching variables.\n * I wanted to cache the Hostname, but if I attached the variable to the config object,\n * it sends the extra variable to New Relic, which is not desired.\n *\n * @return {string} host name\n */\n\n\nConfig.prototype.getHostnameSafe = getHostnameSafe;\n\nConfig.prototype.clearHostnameCache = function clearHostnameCache() {\n  this.getHostnameSafe = getHostnameSafe;\n};\n\nConfig.prototype.getIPAddresses = function getIPAddresses() {\n  var addresses = Object.create(null);\n  var interfaces = os.networkInterfaces();\n\n  for (var interfaceKey in interfaces) {\n    if (interfaceKey.match(/^lo/)) continue;\n    var interfaceDescriptions = interfaces[interfaceKey];\n\n    for (var i = 0; i < interfaceDescriptions.length; i++) {\n      var description = interfaceDescriptions[i];\n      var family = description.family.toLowerCase();\n      addresses[family] = description.address;\n    }\n  }\n\n  return addresses;\n};\n\nfunction getHostnameSafe() {\n  var _hostname;\n\n  this.getHostnameSafe = function getCachedHostname() {\n    return _hostname;\n  };\n\n  try {\n    _hostname = os.hostname();\n    return _hostname;\n  } catch (e) {\n    var addresses = this.getIPAddresses();\n\n    if (this.process_host.ipv_preference === '6' && addresses.ipv6) {\n      _hostname = addresses.ipv6;\n    } else if (addresses.ipv4) {\n      logger.info('Defaulting to ipv4 address for host name');\n      _hostname = addresses.ipv4;\n    } else if (addresses.ipv6) {\n      logger.info('Defaulting to ipv6 address for host name');\n      _hostname = addresses.ipv6;\n    } else {\n      logger.info('No hostname, ipv4, or ipv6 address found for machine');\n      _hostname = 'UNKNOWN_BOX';\n    }\n\n    return _hostname;\n  }\n}\n/**\n * Ensure that the apps names are always returned as a list.\n */\n\n\nConfig.prototype.applications = function applications() {\n  var apps = this.app_name;\n\n  if (Array.isArray(apps) && apps.length > 0) {\n    return apps;\n  }\n\n  if (apps && typeof apps === 'string') {\n    return [apps];\n  }\n\n  return [];\n};\n/**\n * Safely overwrite defaults with values passed to constructor.\n *\n * @param {object} external The configuration being loaded.\n * @param {object} internal Whichever chunk of the config being overridden.\n */\n\n\nConfig.prototype._fromPassed = function _fromPassed(external, internal, arbitrary) {\n  if (!external) return;\n  if (!internal) internal = this;\n  Object.keys(external).forEach(function overwrite(key) {\n    // if it's not in the defaults, it doesn't exist\n    if (!arbitrary && internal[key] === undefined) return;\n\n    if (key === 'ssl' && !isTruthular(external.ssl)) {\n      logger.warn('SSL config key can no longer be disabled, not updating.');\n      return;\n    } // TODO: remove in v6\n\n\n    if (key === 'ignored_params') {\n      warnDeprecated(key, 'attributes.exclude');\n    }\n\n    if (key === 'capture_params') {\n      warnDeprecated(key, 'attributes.enabled');\n    }\n\n    try {\n      var node = external[key];\n    } catch (err) {\n      logger.warn('Error thrown on access of user config for key: %s', key);\n      return;\n    }\n\n    if (typeof node === 'object' && !(node instanceof RegExp) && !Array.isArray(node)) {\n      // is top level and can have arbitrary keys\n      var allowArbitrary = internal === this || HAS_ARBITRARY_KEYS.has(key);\n\n      this._fromPassed(node, internal[key], allowArbitrary);\n    } else {\n      internal[key] = node;\n    }\n  }, this);\n\n  function warnDeprecated(key, replacement) {\n    logger.warn('Config key %s is deprecated, please use %s instead', key, replacement);\n  }\n};\n/**\n * Some values should be picked up only if they're not otherwise set, like\n * the Windows / Azure application name. Don't set it if there's already\n * a non-empty value set via the configuration file, and allow these\n * values to be overwritten by environment variables. Just saves a step for\n * PaaS users who don't want to have multiple settings for a single piece\n * of configuration.\n */\n\n\nConfig.prototype._fromSpecial = function _fromSpecial() {\n  var name = this.app_name;\n\n  if (name === null || name === undefined || name === '' || Array.isArray(name) && name.length === 0) {\n    var azureName = process.env[AZURE_APP_NAME];\n    if (azureName) this.app_name = azureName.split(',');\n  }\n};\n/**\n * Iterate over all feature flags and check for the corresponding environment variable\n * (of the form NEW_RELIC_FEATURE_FLAG_<feature flag name in upper case>).\n */\n\n\nConfig.prototype._featureFlagsFromEnv = function _featureFlagsFromEnv() {\n  const flags = Object.keys(feature_flag.prerelease).concat(feature_flag.released);\n  const config = this;\n  flags.forEach(function checkFlag(flag) {\n    const envVal = process.env['NEW_RELIC_FEATURE_FLAG_' + flag.toUpperCase()];\n\n    if (envVal) {\n      config.feature_flag[flag] = isTruthular(envVal);\n    }\n  });\n};\n/**\n * Recursively visit the nodes of the constant containing the mapping between\n * environment variable names, overriding any configuration values that are\n * found in the environment. Operates purely via side effects.\n *\n * @param object metadata The current level of the mapping object. Should never\n *                        need to set this yourself.\n * @param object data     The current level of the configuration object. Should\n *                        never need to set this yourself.\n */\n\n\nConfig.prototype._fromEnvironment = function _fromEnvironment(metadata, data) {\n  if (!metadata) metadata = ENV.ENV_MAPPING;\n  if (!data) data = this;\n  Object.keys(metadata).forEach(function applyEnvDefault(value) {\n    // if it's not in the config, it doesn't exist\n    if (data[value] === undefined) {\n      return;\n    }\n\n    var node = metadata[value];\n\n    if (typeof node === 'string') {\n      var setting = process.env[node];\n\n      if (setting) {\n        if (ENV.LIST_VARS.has(node)) {\n          let split = ENV.LIST_VARS_CUSTOM_DELIMITERS[node] || /,/;\n          data[value] = setting.split(split).map(function trimVal(k) {\n            return k.trim();\n          });\n        } else if (ENV.OBJECT_LIST_VARS.has(node)) {\n          data[value] = fromObjectList(setting);\n        } else if (ENV.BOOLEAN_VARS.has(node)) {\n          if (value === 'ssl' && !isTruthular(setting)) {\n            logger.warn('SSL config key can no longer be disabled, not updating.');\n            return;\n          }\n\n          data[value] = isTruthular(setting);\n        } else if (ENV.FLOAT_VARS.has(node)) {\n          data[value] = parseFloat(setting, 10);\n        } else if (ENV.INT_VARS.has(node)) {\n          data[value] = parseInt(setting, 10);\n        } else {\n          data[value] = setting;\n        }\n      }\n    } else {\n      // don't crash if the mapping has config keys the current config doesn't.\n      if (!data[value]) data[value] = Object.create(null);\n\n      this._fromEnvironment(node, data[value]);\n    }\n  }, this);\n};\n/**\n * Returns true if logging has been manually enabled via configuration file or\n * environment variable.\n *\n * @param {*} inputConfig configuration passed to the Config constructor\n *\n * @returns {boolean}\n */\n\n\nConfig.prototype._loggingManuallySet = function _loggingManuallySet(inputConfig) {\n  const inputEnabled = inputConfig && inputConfig.logging && inputConfig.logging.enabled;\n  const envEnabled = process.env.NEW_RELIC_LOG_ENABLED;\n  return inputEnabled !== undefined || envEnabled !== undefined;\n};\n/**\n * Returns true if native-metrics has been manually enabled via configuration\n * file or enveironment variable\n * \n * @param {*} inputConfig configuration pass to the Config constructor\n * \n * @returns {boolean}\n */\n\n\nConfig.prototype._nativeMetricsManuallySet = function _nativeMetricsManuallySet(inputConfig) {\n  const inputEnabled = inputConfig && inputConfig.plugins && inputConfig.plugins.native_metrics && inputConfig.plugins.native_metrics.enabled;\n  const envEnabled = process.env.NEW_RELIC_NATIVE_METRICS_ENABLED;\n  return inputEnabled !== undefined || envEnabled !== undefined;\n};\n/**\n * Returns true if distributed tracing has been manually enabled via configuration file or\n * environment variable.\n *\n * @param {*} inputConfig configuration passed to the Config constructor\n *\n * @returns {boolean}\n */\n\n\nConfig.prototype._DTManuallySet = function _DTManuallySet(inputConfig) {\n  const inputEnabled = inputConfig && inputConfig.distributed_tracing && inputConfig.distributed_tracing.enabled;\n  const envEnabled = process.env.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED;\n  return inputEnabled !== undefined || envEnabled !== undefined;\n};\n/**\n * Enforces config rules specific to running in serverless_mode:\n *   - disables cross_application_tracer.enabled if set\n *   - defaults logging to disabled\n *   - verifies data specific to running DT is defined either in config file of env vars\n * @param {*} inputConfig configuration passed to the Config constructor\n */\n\n\nConfig.prototype._enforceServerless = function _enforceServerless(inputConfig) {\n  if (this.serverless_mode.enabled) {\n    // Explicitly disable old CAT in serverless_mode\n    if (this.cross_application_tracer.enabled) {\n      this.cross_application_tracer.enabled = false;\n      logger.info('Cross application tracing is explicitly disabled in serverless_mode.');\n    }\n\n    if (!this._loggingManuallySet(inputConfig)) {\n      this.logging.enabled = false;\n      logger.info('Logging is disabled by default when serverless_mode is enabled. ' + 'If desired, enable logging via config file or environment variable and ' + 'set filepath to a valid path for current environment, stdout or stderr.');\n    }\n\n    if (this._nativeMetricsManuallySet(inputConfig) && this.plugins.native_metrics.enabled) {\n      logger.info('Enabling the native-metrics module when in serverless mode may greatly ' + 'increase cold-start times. Given the limited benefit of the VM metrics' + 'and general lack of control in a serverless environment, we do not ' + 'recommend this trade-off.');\n    } else {\n      this.plugins.native_metrics.enabled = false;\n      logger.info('The native-metrics module is disabled by default when serverless_mode ' + 'is enabled.  If desired, enable the native-metrics module via config file ' + 'or environment variable.');\n    }\n\n    if (!this._DTManuallySet(inputConfig)) {\n      this.distributed_tracing.enabled = true;\n    }\n\n    if (!this.account_id) {\n      if (this.distributed_tracing.enabled) {\n        logger.warn('Using distributed tracing in serverless mode requires account_id be ' + 'defined, either in your newrelic.js file or via environment variables. ' + 'Disabling distributed tracing.');\n        this.distributed_tracing.enabled = false;\n      }\n\n      return;\n    } // default trusted_account_key to account_id\n\n\n    this.trusted_account_key = this.trusted_account_key || this.account_id; // Not required in serverless mode but must default to Unknown to function.\n\n    this.primary_application_id = this.primary_application_id || 'Unknown';\n    return;\n  }\n\n  const DT_KEYS = ['account_id', 'primary_application_id', 'trusted_account_key']; // Don't allow DT config settings to be set if serverless_mode is disabled\n\n  DT_KEYS.forEach(key => {\n    if (this[key]) {\n      logger.warn(key + ' was configured locally without enabling serverless_mode. ' + 'This local value will be ignored and set by the New Relic servers.');\n      this[key] = null;\n    }\n  });\n};\n/**\n * Depending on how the status codes are set, they could be strings, which\n * makes strict equality testing / indexOf fail. To keep things cheap, parse\n * them once, after configuration has finished loading. Other one-off shims\n * based on special properties of configuration values should go here as well.\n */\n\n\nConfig.prototype._canonicalize = function _canonicalize() {\n  var statusCodes = this.error_collector && this.error_collector.ignore_status_codes;\n\n  if (statusCodes) {\n    this.error_collector.ignore_status_codes = _parseCodes(statusCodes);\n  }\n\n  const expectedCodes = this.error_collector && this.error_collector.expected_status_codes;\n\n  if (statusCodes) {\n    this.error_collector.expected_status_codes = _parseCodes(expectedCodes);\n  }\n\n  var logAliases = {\n    verbose: 'trace',\n    debugging: 'debug',\n    warning: 'warn',\n    err: 'error'\n  };\n  var level = this.logging.level;\n  this.logging.level = logAliases[level] || level;\n\n  if (this.host === '') {\n    var region = parseKey(this.license_key);\n\n    if (region) {\n      this.host = 'collector.' + region + '.nr-data.net';\n    } else {\n      this.host = 'collector.newrelic.com';\n    }\n  }\n\n  if (isTruthular(this.ignore_server_configuration)) {\n    logger.warnOnce('IgnoreServerConfigurationWarning', 'The local config setting `ignore_server_configuration` has been deprecated ' + 'and removed as of Agent v5. Please review agent documentation or contact ' + 'New Relic support.');\n  }\n\n  this.api.custom_attributes_enabled = !this.api.custom_attributes_enabled ? this.api.custom_attributes_enabled : this.api.custom_parameters_enabled;\n  this.serverless_mode.enabled = this.serverless_mode.enabled && this.feature_flag.serverless_mode;\n};\n\nfunction _parseCodes(codes) {\n  // range does not support negative values\n  function parseRange(range, parsed) {\n    var split = range.split('-');\n\n    if (split.length !== 2) {\n      logger.warn('Failed to parse range %s', range);\n      return parsed;\n    }\n\n    if (split[0] === '') {\n      // catch negative code. ex. -7\n      return parsed.push(parseInt(range, 10));\n    }\n\n    var lower = parseInt(split[0], 10);\n    var upper = parseInt(split[1], 10);\n\n    if (Number.isNaN(lower) || Number.isNaN(upper)) {\n      logger.warn('Range must contain two numbers %s', range);\n      return parsed;\n    }\n\n    if (lower > upper) {\n      logger.warn('Range must start with lower bound %s', range);\n    } else if (lower < 0 || upper > 1000) {\n      logger.warn('Range must be between 0 and 1000 %s', range);\n    } else {\n      // success\n      for (var i = lower; i <= upper; i++) {\n        parsed.push(i);\n      }\n    }\n\n    return parsed;\n  }\n\n  var parsedCodes = [];\n\n  for (var i = 0; i < codes.length; i++) {\n    var code = codes[i];\n    var parsedCode;\n\n    if (typeof code === 'string' && code.indexOf('-') !== -1) {\n      parseRange(code, parsedCodes);\n    } else {\n      parsedCode = parseInt(code, 10);\n\n      if (!Number.isNaN(parsedCode)) {\n        parsedCodes.push(parsedCode);\n      } else {\n        logger.warn('Failed to parse status code %s', code);\n      }\n    }\n  }\n\n  return parsedCodes;\n}\n/**\n * This goes through the settings that high security mode needs and coerces\n * them to be correct.\n */\n\n\nConfig.prototype._applyHighSecurity = function _applyHighSecurity() {\n  var config = this;\n  checkNode('', this, HSM.HIGH_SECURITY_SETTINGS); // as a one off, we add a global exclude rule to the list to keep from\n  // clobbering user defined rules\n\n  this.attributes.exclude.push('request.parameters.*');\n\n  function checkNode(base, target, settings) {\n    Object.keys(settings).forEach(checkKey.bind(null, base, target, settings));\n  }\n\n  function checkKey(base, target, settings, key) {\n    var hsValue = settings[key];\n\n    if (hsValue && typeof hsValue === 'object' && !(hsValue instanceof Array)) {\n      if (typeof target[key] !== 'object') {\n        logger.warn('High Security Mode: %s should be an object, found %s', key, target[key]);\n        target[key] = Object.create(null);\n      }\n\n      return checkNode(base + key + '.', target[key], hsValue);\n    }\n\n    if (target[key] !== hsValue) {\n      logger.warn('High Security Mode: %s was set to %s, coercing to %s', key, target[key], hsValue);\n      target[key] = hsValue;\n      config.emit(base + key, hsValue);\n    }\n  }\n};\n/**\n * Checks policies received from preconnect against those expected\n * by the agent, if LASP-enabled. Responds with an error to shut down\n * the agent if necessary.\n *\n * @param {Agent} agent\n * @param {object} policies\n *\n * @returns {CollectorResponse} The result of the processing, with the known\n *  policies as the response payload.\n */\n\n\nConfig.prototype.applyLasp = function applyLasp(agent, policies) {\n  var config = this;\n  var keys = Object.keys(policies);\n\n  if (!config.security_policies_token) {\n    if (keys.length) {\n      logger.error('The agent received one or more unexpected security policies and will shut down.');\n      return CollectorResponse.fatal(null);\n    }\n\n    return CollectorResponse.success(null);\n  }\n\n  var missingLASP = [];\n  var missingRequired = [];\n  var finalPolicies = keys.reduce(function applyPolicy(obj, name) {\n    var policy = policies[name];\n    var localMapping = LASP_MAP[name];\n\n    if (!localMapping) {\n      if (!policy.required) {\n        // policy is not implemented in agent -- don't send to connect\n        return obj;\n      } // policy is required but does not exist in agent -- fail\n\n\n      missingRequired.push(name);\n    } else {\n      var splitConfigName = localMapping.path.split('.');\n      var settingBlock = config[splitConfigName[0]]; // pull out the configuration subsection that the option lives in\n\n      for (var i = 1; i < splitConfigName.length - 1; ++i) {\n        settingBlock = settingBlock[splitConfigName[i]];\n      }\n\n      var valueName = splitConfigName[splitConfigName.length - 1];\n      var localVal = settingBlock[valueName];\n      var policyValues = localMapping.allowedValues;\n      var policyValue = policyValues[policy.enabled ? 1 : 0]; // get the most secure setting between local config and the policy\n\n      var finalValue = settingBlock[valueName] = config._getMostSecure(name, localVal, policyValue);\n\n      policy.enabled = policyValues.indexOf(finalValue) === 1;\n      obj[name] = policy;\n\n      if (!policy.enabled && localMapping.applyAdditionalSettings) {\n        localMapping.applyAdditionalSettings(config);\n      }\n\n      if (finalValue !== localVal) {\n        // finalValue is more secure than original local val,\n        // so drop corresponding data\n        localMapping.clearData(agent);\n      }\n    }\n\n    return obj;\n  }, Object.create(null));\n  Object.keys(LASP_MAP).forEach(function checkPolicy(name) {\n    if (!policies[name]) {\n      // agent is expecting a policy that was not sent from server -- fail\n      missingLASP.push(name);\n    }\n  });\n  let fatalMessage = null;\n\n  if (missingLASP.length) {\n    fatalMessage = 'The agent did not receive one or more security policies that it ' + 'expected and will shut down: ' + missingLASP.join(', ') + '.';\n  } else if (missingRequired.length) {\n    fatalMessage = 'The agent received one or more required security policies that it ' + 'does not recognize and will shut down: ' + missingRequired.join(', ') + '. Please check if a newer agent version supports these policies ' + 'or contact support.';\n  }\n\n  if (fatalMessage) {\n    logger.error(fatalMessage);\n    return CollectorResponse.fatal(null);\n  }\n\n  return CollectorResponse.success(finalPolicies);\n};\n\nConfig.prototype.validateFlags = function validateFlags() {\n  Object.keys(this.feature_flag).forEach(function forEachFlag(key) {\n    if (feature_flag.released.indexOf(key) > -1) {\n      logger.warn('Feature flag %s has been released', key);\n    }\n\n    if (feature_flag.unreleased.indexOf(key) > -1) {\n      logger.warn('Feature flag %s has been deprecated', key);\n    }\n  });\n};\n/**\n * Get a JSONifiable object containing all settings we want to report to the\n * collector and store in the environment_values table.\n *\n * @return Object containing simple key-value pairs of settings\n */\n\n\nConfig.prototype.publicSettings = function publicSettings() {\n  var settings = Object.create(null);\n\n  for (var key in this) {\n    if (this.hasOwnProperty(key)) {\n      if (HSM.REDACT_BEFORE_SEND.has(key)) {\n        settings[key] = '****';\n      } else if (!HSM.REMOVE_BEFORE_SEND.has(key)) {\n        settings[key] = this[key];\n      }\n    }\n  } // Agent-side setting is 'enable', but collector-side setting is\n  // 'auto_instrument'. Send both values up.\n\n\n  settings.browser_monitoring.auto_instrument = settings.browser_monitoring.enable;\n\n  try {\n    settings = stringify(settings); // Remove simple circular references\n\n    return flatten(Object.create(null), '', JSON.parse(settings));\n  } catch (err) {\n    logger.error(err, 'Unable to stringify settings object');\n  }\n};\n\nConfig.prototype.getAggregatorConfig = function getAggregatorConfig(method) {\n  const harvestConfig = this.event_harvest_config;\n  const isValidConfig = harvestConfigValidator.isValidHarvestConfig(harvestConfig);\n  const limit = harvestConfig.harvest_limits[method];\n\n  if (!isValidConfig || !harvestConfigValidator.isValidHarvestValue(limit)) {\n    return null;\n  }\n\n  return {\n    limit,\n    periodMs: harvestConfig.report_period_ms\n  };\n};\n/**\n * Create a configuration, either from a configuration file or the node\n * process's environment.\n *\n * For configuration via file, check these directories, in order, for a\n * file named 'newrelic.js':\n *\n *   1. The process's current working directory at startup.\n *   2. The same directory as the process's main module (i.e. the filename\n *      passed to node on the command line).\n *   3. The directory pointed to by the environment variable NEW_RELIC_HOME.\n *   4. The current process's HOME directory.\n *   5. If this module is installed as a dependency, the directory above the\n *      node_modules folder in which newrelic is installed.\n *\n * For configration via environment (useful on Joyent, Azure, Heroku, or\n * other PaaS offerings), set NEW_RELIC_NO_CONFIG_FILE to something truthy\n * and read README.md for details on what configuration variables are\n * necessary, as well as a complete enumeration of the other available\n * variables.\n *\n * @param {object} config Optional configuration to be used in place of a\n *                        config file.\n */\n\n\nfunction initialize(config) {\n  /**\n   * When the logger is required here, it bootstraps itself and then\n   * injects itself into this module's closure via setLogger on the\n   * instance of the logger it creates.\n   */\n  logger = require('../logger');\n  if (config) return new Config(config);\n\n  if (isTruthular(process.env.NEW_RELIC_NO_CONFIG_FILE)) {\n    config = new Config(Object.create(null));\n    if (config.newrelic_home) delete config.newrelic_home;\n    return config;\n  }\n\n  var filepath = _findConfigFile();\n\n  if (!filepath) {\n    _noConfigFile();\n\n    return null;\n  }\n\n  var userConf;\n\n  try {\n    userConf = require(filepath).config;\n  } catch (error) {\n    logger.error(error);\n    throw new Error([`Unable to read confguration file \"${filepath}\".`, `A base configuration file can be copied from ${BASE_CONFIG_PATH}`, 'and renamed to \"newrelic.js\" in the directory from which you will start', 'your application.'].join('\\n'));\n  }\n\n  config = new Config(userConf);\n  config.config_file_path = filepath;\n  logger.debug('Using configuration file %s.', filepath);\n  config.validateFlags();\n  return config;\n}\n\nfunction _noConfigFile() {\n  const mainpath = path.resolve(path.join(process.cwd(), DEFAULT_FILENAME)); // If agent was loaded with -r flag, default to the path of the file being executed\n\n  const mainModule = process.mainModule && process.mainModule.filename || process.argv[1];\n  const altpath = path.resolve(path.dirname(mainModule), DEFAULT_FILENAME);\n  let locations = mainpath;\n\n  if (mainpath !== altpath) {\n    locations += ' or\\n' + altpath;\n  }\n  /* eslint-disable no-console */\n\n\n  console.error(['Unable to find New Relic module configuration. A base configuration file', `can be copied from ${BASE_CONFIG_PATH}`, `and put at ${locations}.`, 'If you are not using file-based configuration, please set the environment', 'variable `NEW_RELIC_NO_CONFIG_FILE=true`.'].join('\\n'));\n  /* eslint-enable no-console */\n}\n/**\n * This function honors the singleton nature of this module while allowing\n * consumers to just request an instance without having to worry if one was\n * already created.\n */\n\n\nfunction getOrCreateInstance() {\n  if (_configInstance === null) {\n    try {\n      _configInstance = initialize();\n    } catch (err) {\n      /* eslint-disable no-console */\n      console.error('New Relic for Node.js is disabled due to an error:');\n      console.error(err.stack);\n      /* eslint-enable no-console */\n      // Config construction has potential to throw due to invalid settings.\n      // This allows the agent to return a stub api without crashing the process.\n\n      _configInstance = Object.assign(defaultConfig(), {\n        agent_enabled: false\n      });\n      _configInstance.setLogger = Config.prototype.setLogger;\n    }\n  }\n\n  return _configInstance;\n}\n\nfunction getInstance() {\n  return _configInstance;\n}\n\nfunction createInstance(config) {\n  _configInstance = initialize(config);\n  return _configInstance;\n}\n/**\n * Preserve the legacy initializer, but also allow consumers to manage their\n * own configuration if they choose.\n */\n\n\nConfig.initialize = initialize;\nConfig.getOrCreateInstance = getOrCreateInstance;\nConfig.getInstance = getInstance;\nConfig.createInstance = createInstance;\nConfig.SPAN_EVENT_LIMIT = SPAN_EVENT_LIMIT;\nmodule.exports = Config;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/config/index.js"],"names":["AttributeFilter","require","CollectorResponse","copy","defaultConfig","config","EventEmitter","feature_flag","flatten","fs","hashes","os","parseKey","path","psemver","stringify","util","MergeServerConfig","harvestConfigValidator","mergeServerConfig","AZURE_APP_NAME","DEFAULT_MAX_PAYLOAD_SIZE_IN_BYTES","DEFAULT_CONFIG_PATH","resolve","SPAN_EVENT_LIMIT","BASE_CONFIG_PATH","DEFAULT_FILENAME","CONFIG_FILE_LOCATIONS","process","env","NEW_RELIC_HOME","cwd","HOME","join","__dirname","HAS_ARBITRARY_KEYS","Set","LASP_MAP","ENV","HSM","exists","existsSync","logger","_configInstance","mainModule","filename","splice","dirname","isTruthular","setting","normalized","toString","toLowerCase","fromObjectList","JSON","parse","error","stack","_findConfigFile","candidate","filepath","i","length","realpathSync","Config","call","Object","assign","err","warn","shallow","prerelease","newrelic_home","config_file_path","run_id","account_id","application_id","web_transactions_apdex","create","cross_process_id","encoding_key","obfuscatedId","primary_application_id","trusted_account_ids","trusted_account_key","sampling_target","sampling_target_period_in_seconds","max_payload_size_in_bytes","max_trace_segments","entity_guid","product_level","collect_traces","collect_errors","collect_span_events","utilization","logical_processors","total_ram_mib","billing_hostname","browser_monitoring","loader","loader_version","compressed_content_encoding","simple_compression","put_for_data_send","_fromPassed","_fromSpecial","_featureFlagsFromEnv","_fromEnvironment","_canonicalize","version","event_harvest_config","report_period_ms","harvest_limits","analytic_event_data","transaction_events","max_samples_stored","custom_event_data","custom_insights_events","error_event_data","error_collector","max_event_samples_stored","span_event_data","_enforceServerless","high_security","security_policies_token","Error","_applyHighSecurity","attributeFilter","inherits","prototype","setLogger","bootstrapped","onConnect","json","recursion","agent_enabled","emit","keys","forEach","updateProp","key","_fromServer","_getMostSecure","getMostSecure","currentVal","newVal","filter","params","agent_run_id","_alwaysUpdateIfChanged","obfuscateNameUsingKey","collect_error_events","_updateNestedIfChanged","_emitIfSet","ssl","_updateIfChanged","val","isValidConfig","isValidHarvestConfig","info","limits","reduce","acc","k","v","isValidHarvestValue","collect_analytics_events","enabled","collect_custom_events","span_events","_updateNestedIfChangedRaw","cross_application_tracer","_validateThenUpdateStatusCodes","_validateThenUpdateErrorClasses","_validateThenUpdateErrorMessages","slow_sql","transaction_tracer","logUnsupported","logUnknown","value","Array","isArray","pushIfNew","element","indexOf","push","debug","remote","local","remoteKey","localKey","valueToTest","valid","validateArray","thingToTest","arrayToTest","HIGH_SECURITY_KEYS","logDisabled","updateNestedIfChanged","undefined","checkAsyncHookStatus","await_support","satisfies","getDisplayHost","clearDisplayHostCache","_displayHost","getCachedDisplayHost","process_host","display_name","getHostnameSafe","stringBuffer","Buffer","from","numBytes","clearHostnameCache","getIPAddresses","addresses","interfaces","networkInterfaces","interfaceKey","match","interfaceDescriptions","description","family","address","_hostname","getCachedHostname","hostname","e","ipv_preference","ipv6","ipv4","applications","apps","app_name","external","internal","arbitrary","overwrite","warnDeprecated","node","RegExp","allowArbitrary","has","replacement","name","azureName","split","flags","concat","released","checkFlag","flag","envVal","toUpperCase","metadata","data","ENV_MAPPING","applyEnvDefault","LIST_VARS","LIST_VARS_CUSTOM_DELIMITERS","map","trimVal","trim","OBJECT_LIST_VARS","BOOLEAN_VARS","FLOAT_VARS","parseFloat","INT_VARS","parseInt","_loggingManuallySet","inputConfig","inputEnabled","logging","envEnabled","NEW_RELIC_LOG_ENABLED","_nativeMetricsManuallySet","plugins","native_metrics","NEW_RELIC_NATIVE_METRICS_ENABLED","_DTManuallySet","distributed_tracing","NEW_RELIC_DISTRIBUTED_TRACING_ENABLED","serverless_mode","DT_KEYS","statusCodes","ignore_status_codes","_parseCodes","expectedCodes","expected_status_codes","logAliases","verbose","debugging","warning","level","host","region","license_key","ignore_server_configuration","warnOnce","api","custom_attributes_enabled","custom_parameters_enabled","codes","parseRange","range","parsed","lower","upper","Number","isNaN","parsedCodes","code","parsedCode","checkNode","HIGH_SECURITY_SETTINGS","attributes","exclude","base","target","settings","checkKey","bind","hsValue","applyLasp","agent","policies","fatal","success","missingLASP","missingRequired","finalPolicies","applyPolicy","obj","policy","localMapping","required","splitConfigName","settingBlock","valueName","localVal","policyValues","allowedValues","policyValue","finalValue","applyAdditionalSettings","clearData","checkPolicy","fatalMessage","validateFlags","forEachFlag","unreleased","publicSettings","hasOwnProperty","REDACT_BEFORE_SEND","REMOVE_BEFORE_SEND","auto_instrument","enable","getAggregatorConfig","method","harvestConfig","limit","periodMs","initialize","NEW_RELIC_NO_CONFIG_FILE","_noConfigFile","userConf","mainpath","argv","altpath","locations","console","getOrCreateInstance","getInstance","createInstance","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst AttributeFilter = require('./attribute-filter')\nconst CollectorResponse = require('../collector/response')\nconst copy = require('../util/copy')\nconst defaultConfig = require('./default').config\nconst EventEmitter = require('events').EventEmitter\nconst feature_flag = require('../feature_flags')\nconst flatten = require('../util/flatten')\nconst fs = require('../util/unwrapped-core').fs\nconst hashes = require('../util/hashes')\nconst os = require('os')\nconst parseKey = require('../collector/key-parser').parseKey\nconst path = require('path')\nconst psemver = require('../util/process-version')\nconst stringify = require('json-stringify-safe')\nconst util = require('util')\nconst MergeServerConfig = require('./merge-server-config')\nconst harvestConfigValidator = require('./harvest-config-validator')\nconst mergeServerConfig = new MergeServerConfig()\n\n/**\n * CONSTANTS -- we gotta lotta 'em\n */\nconst AZURE_APP_NAME = 'APP_POOL_ID'\nconst DEFAULT_MAX_PAYLOAD_SIZE_IN_BYTES = 1000000\nconst DEFAULT_CONFIG_PATH = require.resolve('./default')\nconst SPAN_EVENT_LIMIT = 1000\nconst BASE_CONFIG_PATH = require.resolve('../../newrelic')\nconst DEFAULT_FILENAME = 'newrelic.js'\nconst CONFIG_FILE_LOCATIONS = [\n  process.env.NEW_RELIC_HOME,\n  process.cwd(),\n  process.env.HOME,\n  path.join(__dirname, '../../../..') // above node_modules\n]\n\nconst HAS_ARBITRARY_KEYS = new Set([\n  'ignore_messages',\n  'expected_messages',\n  'labels'\n])\n\nconst LASP_MAP = require('./lasp').LASP_MAP\nconst ENV = require('./env')\nconst HSM = require('./hsm')\n\nconst exists = fs.existsSync || path.existsSync\nlet logger = null // Lazy-loaded in `initialize`.\nlet _configInstance = null\n\n// the REPL has no main module\nif (process.mainModule && process.mainModule.filename) {\n  CONFIG_FILE_LOCATIONS.splice(2, 0, path.dirname(process.mainModule.filename))\n}\n\nfunction isTruthular(setting) {\n  if (setting == null) {\n    return false\n  }\n\n  var normalized = setting.toString().toLowerCase()\n  switch (normalized) {\n    case 'false':\n    case 'f':\n    case 'no':\n    case 'n':\n    case 'disabled':\n    case '0':\n      return false\n\n    default:\n      return true\n  }\n}\n\nfunction fromObjectList(setting) {\n  try {\n    return JSON.parse('[' + setting + ']')\n  } catch (error) {\n    logger.error('New Relic configurator could not deserialize object list:')\n    logger.error(error.stack)\n  }\n}\n\nfunction _findConfigFile() {\n  var candidate\n  var filepath\n\n\n  for (var i = 0; i < CONFIG_FILE_LOCATIONS.length; i++) {\n    candidate = CONFIG_FILE_LOCATIONS[i]\n    if (!candidate) continue\n\n    filepath = path.join(path.resolve(candidate), DEFAULT_FILENAME)\n    if (!exists(filepath)) continue\n\n    return fs.realpathSync(filepath)\n  }\n}\n\nfunction Config(config) {\n  EventEmitter.call(this)\n\n  // 1. start by cloning the defaults\n  try {\n    Object.assign(this, defaultConfig())\n  } catch (err) {\n    logger.warn('Unable to clone the default config, %s: %s', DEFAULT_CONFIG_PATH, err)\n  }\n\n  // 2. initialize undocumented, internal-only default values\n\n  // feature flags are mostly private settings for gating unreleased features\n  // flags are set in the feature_flags.js file\n  this.feature_flag = copy.shallow(feature_flag.prerelease)\n\n  // set by environment\n  this.newrelic_home = null\n  // set by configuration file loader\n  this.config_file_path = null\n\n  // set by collector on handshake\n  this.run_id = null\n  this.account_id = null\n  this.application_id = null\n  this.web_transactions_apdex = Object.create(null)\n  this.cross_process_id = null\n  this.encoding_key = null\n  this.obfuscatedId = null\n  this.primary_application_id = null\n  this.trusted_account_ids = null\n  this.trusted_account_key = null\n  this.sampling_target = 10\n  this.sampling_target_period_in_seconds = 60\n  this.max_payload_size_in_bytes = DEFAULT_MAX_PAYLOAD_SIZE_IN_BYTES\n\n  // this value is arbitrary\n  this.max_trace_segments = 900\n\n  this.entity_guid = null\n\n  // feature level of this account\n  this.product_level = 0\n  // product-level related\n  this.collect_traces = true\n  this.collect_errors = true\n  this.collect_span_events = true\n\n  // override options for utilization stats\n  this.utilization.logical_processors = null\n  this.utilization.total_ram_mib = null\n  this.utilization.billing_hostname = null\n\n  this.browser_monitoring.loader = 'rum'\n  this.browser_monitoring.loader_version = ''\n\n  // Settings to play nice with DLPs (see NODE-1044).\n  this.compressed_content_encoding = 'deflate'  // Deflate or gzip\n  this.simple_compression = false               // Disables subcomponent compression\n  this.put_for_data_send = false                // Changes http verb for harvest\n\n  // 3. override defaults with values from the loaded / passed configuration\n  this._fromPassed(config)\n\n  // 3.5. special values (only Azure environment APP_POOL_ID for now)\n  this._fromSpecial()\n\n  // 4. override config with environment variables\n  this._featureFlagsFromEnv()\n  this._fromEnvironment()\n\n  // 5. clean up anything that requires postprocessing\n  this._canonicalize()\n\n  // 6. put the version in the config\n  this.version = require('../../package.json').version\n\n  // TODO: this may belong in canonicalize.\n  if (!this.event_harvest_config) {\n    this.event_harvest_config = {\n      report_period_ms: 60000,\n      harvest_limits: {\n        analytic_event_data: this.transaction_events.max_samples_stored,\n        custom_event_data: this.custom_insights_events.max_samples_stored,\n        error_event_data: this.error_collector.max_event_samples_stored,\n        span_event_data: SPAN_EVENT_LIMIT\n      }\n    }\n  }\n\n  // 7. serverless_mode specific settings\n  this._enforceServerless(config)\n\n  // 8. apply high security overrides\n  if (this.high_security) {\n    if (this.security_policies_token) {\n      throw new Error(\n        'Security Policies and High Security Mode cannot both be present ' +\n        'in the agent configuration. If Security Policies have been set ' +\n        'for your account, please ensure the security_policies_token is ' +\n        'set but high_security is disabled (default).'\n      )\n    }\n    this._applyHighSecurity()\n  }\n\n  // 9. Set instance attribute filter using updated context\n  this.attributeFilter = new AttributeFilter(this)\n}\nutil.inherits(Config, EventEmitter)\n\n/**\n * Because this module and logger depend on each other, the logger needs\n * a way to inject the actual logger instance once it's constructed.\n * It's kind of a Rube Goldberg device, but it works.\n *\n * @param {Logger} bootstrapped The actual, configured logger.\n */\nConfig.prototype.setLogger = function setLogger(bootstrapped) {\n  logger = bootstrapped\n}\n\n/**\n * helper object for merging server side values\n */\nConfig.prototype.mergeServerConfig = mergeServerConfig\n\n/**\n * Accept any configuration passed back from the server. Will log all\n * recognized, unsupported, and unknown parameters.\n *\n * @param {object} json The config blob sent by New Relic.\n */\nConfig.prototype.onConnect = function onConnect(json, recursion) {\n  json = json || Object.create(null)\n  if (this.high_security && recursion !== true && !json.high_security) {\n    this.agent_enabled = false\n    this.emit('agent_enabled', false)\n    return\n  }\n  if (Object.keys(json).length === 0) return\n\n  Object.keys(json).forEach(function updateProp(key) {\n    this._fromServer(json, key)\n  }, this)\n\n  this.emit('change', this)\n}\n\nConfig.prototype._getMostSecure = function getMostSecure(key, currentVal, newVal) {\n  var filter = LASP_MAP[key] && LASP_MAP[key].filter\n  if (!this.security_policies_token || !filter) {\n    // If we aren't applying something vetted by security policies we\n    // just return the new value.\n    return newVal\n  }\n  // Return the most secure if we have a filter to apply\n  return filter(currentVal, newVal)\n}\n\n/**\n * The guts of the logic about how to deal with server-side configuration.\n *\n * @param {object} params A configuration dictionary.\n * @param {string} key    The particular configuration parameter to set.\n */\nConfig.prototype._fromServer = function _fromServer(params, key) {\n  switch (key) {\n    // handled by the connection\n    case 'messages':\n      break\n\n    // *sigh* Xzibit, etc.\n    case 'agent_config':\n      this.onConnect(params[key], true)\n      break\n\n    // if it's undefined or null, so be it\n    case 'agent_run_id':\n      this.run_id = params.agent_run_id\n      break\n\n    // handled by config.onConnect\n    case 'high_security':\n      break\n\n    // always accept these settings\n    case 'cross_process_id':\n    case 'encoding_key':\n      this._alwaysUpdateIfChanged(params, key)\n      if (this.cross_process_id && this.encoding_key) {\n        this.obfuscatedId =\n          hashes.obfuscateNameUsingKey(this.cross_process_id, this.encoding_key)\n      }\n      break\n\n    // always accept these settings\n    case 'account_id':\n    case 'application_id':\n    case 'collect_errors':\n    case 'collect_traces':\n    case 'primary_application_id':\n    case 'product_level':\n    case 'max_payload_size_in_bytes':\n    case 'sampling_target':\n    case 'sampling_target_period_in_seconds':\n    case 'trusted_account_ids':\n    case 'trusted_account_key':\n      this._alwaysUpdateIfChanged(params, key)\n      break\n\n    case 'collect_error_events':\n      if (params.collect_error_events === false) {\n        this._updateNestedIfChanged(\n          params,\n          this.error_collector,\n          key,\n          'capture_events'\n        )\n      }\n      break\n\n    // also accept these settings\n    case 'url_rules':\n    case 'metric_name_rules':\n    case 'transaction_name_rules':\n    case 'transaction_segment_terms':\n      this._emitIfSet(params, key)\n      break\n\n    case 'ssl':\n      if (!isTruthular(params.ssl)) {\n        logger.warn('SSL config key can no longer be disabled, not updating.')\n      }\n      break\n\n    case 'apdex_t':\n    case 'web_transactions_apdex':\n      this._updateIfChanged(params, key)\n      break\n    case 'event_harvest_config':\n      const val = params[key]\n      const isValidConfig = harvestConfigValidator.isValidHarvestConfig(val)\n      if (!isValidConfig) {\n        this.emit(key, null)\n        break\n      }\n      logger.info(\n        'Valid event_harvest_config received. Updating harvest cycles.',\n        val\n      )\n      const limits = Object.keys(val.harvest_limits).reduce((acc, k) => {\n        const v = val.harvest_limits[k]\n        if (harvestConfigValidator.isValidHarvestValue(v)) {\n          acc[k] = v\n        } else {\n          logger.info(`Omitting limit for ${k} due to invalid value ${v}`)\n        }\n        return acc\n      }, {})\n      val.harvest_limits = limits\n      this[key] = val\n      this.emit(key, val)\n      break\n\n    case 'collect_analytics_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_analytics_events === false) {\n        this.transaction_events.enabled = false\n      }\n      break\n\n    case 'collect_custom_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_custom_events === false) {\n        this.custom_insights_events.enabled = false\n      }\n      break\n\n    case 'collect_span_events':\n      // never enable from server-side\n      // but we allow the server to disable\n      if (params.collect_span_events === false) {\n        this.span_events.enabled = false\n      }\n      break\n\n    case 'allow_all_headers':\n      this._updateIfChanged(params, key)\n      this._canonicalize()\n      break\n\n    //\n    // Browser Monitoring\n    //\n    case 'browser_monitoring.loader':\n      this._updateNestedIfChangedRaw(\n        params,\n        this.browser_monitoring,\n        key,\n        'loader'\n      )\n      break\n\n    // these are used by browser_monitoring\n    // and the api.getRUMHeader() method\n    case 'js_agent_file':\n    case 'js_agent_loader_file':\n    case 'beacon':\n    case 'error_beacon':\n    case 'browser_key':\n    case 'js_agent_loader':\n      this._updateNestedIfChangedRaw(\n        params,\n        this.browser_monitoring,\n        key,\n        key\n      )\n      break\n\n    //\n    // Cross Application Tracer\n    //\n    case 'cross_application_tracer.enabled':\n      this._updateNestedIfChanged(\n        params,\n        this.cross_application_tracer,\n        key,\n        'enabled'\n      )\n      break\n    //\n    // Error Collector\n    //\n    case 'error_collector.enabled':\n      this._updateNestedIfChanged(\n        params,\n        this.error_collector,\n        'error_collector.enabled',\n        'enabled'\n      )\n      break\n    case 'error_collector.ignore_status_codes':\n      this._validateThenUpdateStatusCodes(\n        params,\n        this.error_collector,\n        'error_collector.ignore_status_codes',\n        'ignore_status_codes'\n      )\n      this._canonicalize()\n      break\n    case 'error_collector.expected_status_codes':\n      this._validateThenUpdateStatusCodes(\n        params,\n        this.error_collector,\n        'error_collector.expected_status_codes',\n        'expected_status_codes'\n      )\n      this._canonicalize()\n      break\n    case 'error_collector.ignore_classes':\n      this._validateThenUpdateErrorClasses(\n        params,\n        this.error_collector,\n        'error_collector.ignore_classes',\n        'ignore_classes'\n      )\n      break\n    case 'error_collector.expected_classes':\n      this._validateThenUpdateErrorClasses(\n        params,\n        this.error_collector,\n        'error_collector.expected_classes',\n        'expected_classes'\n      )\n      break\n    case 'error_collector.ignore_messages':\n      this._validateThenUpdateErrorMessages(\n        params,\n        this.error_collector,\n        'error_collector.ignore_messages',\n        'ignore_messages'\n      )\n      break\n    case 'error_collector.expected_messages':\n      this._validateThenUpdateErrorMessages(\n        params,\n        this.error_collector,\n        'error_collector.expected_messages',\n        'expected_messages'\n      )\n      break\n    case 'error_collector.capture_events':\n      this._updateNestedIfChanged(\n        params,\n        this.error_collector,\n        'error_collector.capture_events',\n        'capture_events'\n      )\n      break\n    case 'error_collector.max_event_samples_stored':\n      this._updateNestedIfChanged(\n        params,\n        this.error_collector,\n        'error_collector.max_event_samples_stored',\n        'max_event_samples_stored'\n      )\n      break\n\n    //\n    // Slow SQL\n    //\n    case 'slow_sql.enabled':\n      this._updateNestedIfChanged(params, this.slow_sql, key, 'enabled')\n      break\n\n    //\n    // Transaction Events\n    //\n    case 'transaction_events.enabled':\n      this._updateNestedIfChanged(\n        params,\n        this.transaction_events,\n        key,\n        'enabled'\n      )\n      break\n\n    //\n    // Transaction Tracer\n    //\n    case 'transaction_tracer.enabled':\n      this._updateNestedIfChanged(\n        params,\n        this.transaction_tracer,\n        'transaction_tracer.enabled',\n        'enabled'\n      )\n      break\n    case 'transaction_tracer.transaction_threshold':\n      this._updateNestedIfChanged(\n        params,\n        this.transaction_tracer,\n        'transaction_tracer.transaction_threshold',\n        'transaction_threshold'\n      )\n      break\n\n    // Entity GUID\n    case 'entity_guid':\n      this.entity_guid = params[key]\n      break\n\n    // These settings aren't supported by the agent (yet).\n    case 'sampling_rate':\n    case 'episodes_file':\n    case 'episodes_url':\n    case 'rum.load_episodes_file':\n    // Ensure the most secure setting is applied to the settings below\n    // when enabling them.\n    case 'attributes.include_enabled':\n    case 'strip_exception_messages.enabled':\n    case 'transaction_tracer.record_sql':\n      this.logUnsupported(params, key)\n      break\n\n    // These settings are not allowed from the server.\n    case 'attributes.enabled':\n    case 'attributes.exclude':\n    case 'attributes.include':\n    case 'browser_monitoring.attributes.enabled':\n    case 'browser_monitoring.attributes.exclude':\n    case 'browser_monitoring.attributes.include':\n    case 'error_collector.attributes.enabled':\n    case 'error_collector.attributes.exclude':\n    case 'error_collector.attributes.include':\n    case 'transaction_events.attributes.enabled':\n    case 'transaction_events.attributes.exclude':\n    case 'transaction_events.attributes.include':\n    case 'transaction_events.max_samples_stored':\n    case 'transaction_tracer.attributes.enabled':\n    case 'transaction_tracer.attributes.exclude':\n    case 'transaction_tracer.attributes.include':\n    case 'serverless_mode.enabled':\n      break\n\n    default:\n      this.logUnknown(params, key)\n  }\n}\n\n/**\n * Change a value sent by the collector if and only if it's different from the\n * value we already have. Emit an event with the key name and the new value,\n * and log that the value has changed.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\nConfig.prototype._alwaysUpdateIfChanged = function _alwaysUpdateIfChanged(json, key) {\n  var value = json[key]\n  if (value != null && this[key] !== value) {\n    if (Array.isArray(value) && Array.isArray(this[key])) {\n      value.forEach(function pushIfNew(element) {\n        if (this[key].indexOf(element) === -1) this[key].push(element)\n      }, this)\n    } else {\n      this[key] = value\n    }\n    this.emit(key, value)\n    logger.debug('Configuration of %s was changed to %s by New Relic.', key, value)\n  }\n}\n\n/**\n * Change a value sent by the collector if and only if it's different from the\n * value we already have. Emit an event with the key name and the new value,\n * and log that the value has changed.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\nConfig.prototype._updateIfChanged = function _updateIfChanged(json, key) {\n  this._updateNestedIfChanged(json, this, key, key)\n}\n\n/**\n * Expected and Ignored status code configuration values should look like this\n *\n *     [500,'501','503-507']\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\nConfig.prototype._validateThenUpdateStatusCodes = _validateThenUpdateStatusCodes\nfunction _validateThenUpdateStatusCodes(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey]\n  if (!Array.isArray(valueToTest)) {\n    logger.warn(\n      'Saw SSC (ignore|expect)_status_codes that is not an array, will not merge: %s',\n      valueToTest\n    )\n    return\n  }\n\n  let valid = true\n  valueToTest.forEach(function validateArray(thingToTest) {\n    if (!('string' === (typeof thingToTest) || 'number' === (typeof thingToTest))) {\n      logger.warn(\n        'Saw SSC (ignore|expect)_status_code that is not a number or string,' +\n        'will not merge: %s', thingToTest\n      )\n      valid = false\n    }\n  })\n  if (!valid) {\n    return\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey)\n}\n\n/**\n * Expected and Ignored classes configuration values should look like this\n *\n *     ['Error','Again']\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\nConfig.prototype._validateThenUpdateErrorClasses = _validateThenUpdateErrorClasses\n\nfunction _validateThenUpdateErrorClasses(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey]\n  if (!Array.isArray(valueToTest)) {\n    logger.warn(\n      'Saw SSC (ignore|expect)_classes that is not an array, will not merge: %s',\n      valueToTest\n    )\n    return\n  }\n\n  let valid = true\n  Object.keys(valueToTest).forEach(function validateArray(key) {\n    let thingToTest = valueToTest[key]\n    if ('string' !== (typeof thingToTest)) {\n      logger.warn(\n        'Saw SSC (ignore|expect)_class that is not a string, will not merge: %s',\n        thingToTest\n      )\n      valid = false\n    }\n  })\n  if (!valid) {\n    return\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey)\n}\n\n/**\n * Expected and Ignore messages configuration values should look like this\n *\n *     {'ErrorType':['Error Message']}\n *\n * If the server side config is not in this format, it might put the agent\n * in a world of hurt.  So, before we pass everything on to\n * _updateNestedIfChanged, we'll do some validation.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\nConfig.prototype._validateThenUpdateErrorMessages = _validateThenUpdateErrorMessages\n\nfunction _validateThenUpdateErrorMessages(remote, local, remoteKey, localKey) {\n  let valueToTest = remote[remoteKey]\n  if (Array.isArray(valueToTest)) {\n    logger.warn(\n      'Saw SSC (ignore|expect)_message that is an Array, will not merge: %s',\n      valueToTest\n    )\n    return\n  }\n\n  if (!valueToTest) {\n    logger.warn('SSC ignore|expect_message is null or undefined, will not merge')\n    return\n  }\n\n  if ('object' !== typeof valueToTest) {\n    logger.warn(\n      'Saw SSC (ignore|expect)_message that is primitive/scaler, will not merge: %s',\n      valueToTest\n    )\n    return\n  }\n\n  if (!valueToTest) {\n    logger.warn('SSC ignore|expect_message is null or undefined, will not merge')\n    return\n  }\n\n  let valid = true\n  Object.keys(valueToTest).forEach(function validateArray(key) {\n    let arrayToTest = valueToTest[key]\n    if (!Array.isArray(arrayToTest)) {\n      logger.warn(\n        'Saw SSC message array that is not an array, will not merge: %s',\n        arrayToTest\n      )\n      valid = false\n    }\n  })\n  if (!valid) {\n    return\n  }\n\n  return this._updateNestedIfChanged(remote, local, remoteKey, localKey)\n}\n/**\n * Some parameter values are nested, need a simple way to change them as well.\n * Will merge local and remote if and only if both are arrays.\n *\n * @param {object} remote    JSON sent from New Relic.\n * @param {object} local     A portion of this configuration object.\n * @param {string} remoteKey The name sent by New Relic.\n * @param {string} localKey  The local name.\n */\nConfig.prototype._updateNestedIfChanged = _updateNestedIfChanged\n\nfunction _updateNestedIfChanged(remote, local, remoteKey, localKey) {\n  // if high-sec mode is enabled, we do not accept server changes to high-sec\n  if (this.high_security && HSM.HIGH_SECURITY_KEYS.indexOf(remoteKey) !== -1) {\n    return this.logDisabled(remote, remoteKey)\n  }\n  return this._updateNestedIfChangedRaw(remote, local, remoteKey, localKey)\n}\n\nConfig.prototype._updateNestedIfChangedRaw = _updateNestedIfChangedRaw\n\nfunction _updateNestedIfChangedRaw(remote, local, remoteKey, localKey) {\n  return this.mergeServerConfig.updateNestedIfChanged(\n    this,\n    remote,\n    local,\n    remoteKey,\n    localKey,\n    logger\n  )\n}\n\n/**\n * Some parameter values are just to be passed on.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value we're looking to set.\n */\nConfig.prototype._emitIfSet = function _emitIfSet(json, key) {\n  var value = json[key]\n  if (value != null) this.emit(key, value)\n}\n\n/**\n * The agent would normally do something with this parameter, but server-side\n * configuration is disabled via local settings or HSM.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent won't set.\n */\nConfig.prototype.logDisabled = function logDisabled(json, key) {\n  var value = json[key]\n  if (value != null) {\n    logger.debug(\n      'Server-side configuration of %s is currently disabled by local configuration. ' +\n      '(Server sent value of %s.)',\n      key,\n      value\n    )\n  }\n}\n\n/**\n * Help support out by putting in the logs the fact that we don't currently\n * support the provided configuration key, and including the sent value.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent doesn't set.\n */\nConfig.prototype.logUnsupported = function logUnsupported(json, key) {\n  var value = json[key]\n  if (value !== null && value !== undefined) {\n    logger.debug(\n      'Server-side configuration of %s is currently not supported by the ' +\n      'Node.js agent. (Server sent value of %s.)',\n      key,\n      value\n    )\n    this.emit(key, value)\n  }\n}\n\n/**\n * The agent knows nothing about this parameter.\n *\n * @param {object} json Config blob sent by collector.\n * @param {string} key  Value the agent knows nothing about.\n */\nConfig.prototype.logUnknown = function logUnknown(json, key) {\n  var value = json[key]\n  logger.debug(\n    'New Relic sent unknown configuration parameter %s with value %s.',\n    key,\n    value\n  )\n}\n\n/**\n * Return the availability of async_hook for use by the agent.\n */\nConfig.prototype.checkAsyncHookStatus = function checkAsyncHookStatus() {\n  return (\n    this.feature_flag.await_support &&\n    (psemver.satisfies('>=8') || psemver.prerelease())\n  )\n}\n\n/**\n * Gets the user set host display name. If not provided, it returns the default value.\n *\n * This function is written is this strange way becauase of the use of caching variables.\n * I wanted to cache the DisplayHost, but if I attached the variable to the config object,\n * it sends the extra variable to New Relic, which is not desired.\n *\n * @return {string} display host name\n */\nConfig.prototype.getDisplayHost = getDisplayHost\n\nConfig.prototype.clearDisplayHostCache = function clearDisplayHostCache() {\n  this.getDisplayHost = getDisplayHost\n}\n\nfunction getDisplayHost() {\n  var _displayHost\n  this.getDisplayHost = function getCachedDisplayHost() {\n    return _displayHost\n  }\n  if (this.process_host.display_name === '') {\n    _displayHost = this.getHostnameSafe()\n    return _displayHost\n  }\n  var stringBuffer = Buffer.from(this.process_host.display_name, 'utf8')\n  var numBytes = stringBuffer.length\n\n  if (numBytes > 255) {\n    logger.warn('Custom host display name must be less than 255 bytes')\n    _displayHost = this.getHostnameSafe()\n    return _displayHost\n  }\n\n  _displayHost = this.process_host.display_name\n  return _displayHost\n}\n\n/**\n * Gets the system's host name. If that fails, it just returns ipv4/6 based on the user's\n * process_host.ipv_preferenece setting.\n *\n * This function is written is this strange way becauase of the use of caching variables.\n * I wanted to cache the Hostname, but if I attached the variable to the config object,\n * it sends the extra variable to New Relic, which is not desired.\n *\n * @return {string} host name\n */\nConfig.prototype.getHostnameSafe = getHostnameSafe\n\nConfig.prototype.clearHostnameCache = function clearHostnameCache() {\n  this.getHostnameSafe = getHostnameSafe\n}\n\nConfig.prototype.getIPAddresses = function getIPAddresses() {\n  var addresses = Object.create(null)\n  var interfaces = os.networkInterfaces()\n\n  for (var interfaceKey in interfaces) {\n    if (interfaceKey.match(/^lo/)) continue\n\n    var interfaceDescriptions = interfaces[interfaceKey]\n    for (var i = 0; i < interfaceDescriptions.length; i++) {\n      var description = interfaceDescriptions[i]\n      var family = description.family.toLowerCase()\n      addresses[family] = description.address\n    }\n  }\n  return addresses\n}\n\nfunction getHostnameSafe() {\n  var _hostname\n  this.getHostnameSafe = function getCachedHostname() {\n    return _hostname\n  }\n  try {\n    _hostname = os.hostname()\n    return _hostname\n  } catch (e) {\n    var addresses = this.getIPAddresses()\n\n    if (this.process_host.ipv_preference === '6' && addresses.ipv6) {\n      _hostname = addresses.ipv6\n    } else if (addresses.ipv4) {\n      logger.info('Defaulting to ipv4 address for host name')\n      _hostname = addresses.ipv4\n    } else if (addresses.ipv6) {\n      logger.info('Defaulting to ipv6 address for host name')\n      _hostname = addresses.ipv6\n    } else {\n      logger.info('No hostname, ipv4, or ipv6 address found for machine')\n      _hostname = 'UNKNOWN_BOX'\n    }\n\n    return _hostname\n  }\n}\n\n/**\n * Ensure that the apps names are always returned as a list.\n */\nConfig.prototype.applications = function applications() {\n  var apps = this.app_name\n\n  if (Array.isArray(apps) && apps.length > 0) {\n    return apps\n  }\n\n  if (apps && typeof apps === 'string') {\n    return [apps]\n  }\n\n  return []\n}\n\n/**\n * Safely overwrite defaults with values passed to constructor.\n *\n * @param {object} external The configuration being loaded.\n * @param {object} internal Whichever chunk of the config being overridden.\n */\nConfig.prototype._fromPassed = function _fromPassed(external, internal, arbitrary) {\n  if (!external) return\n  if (!internal) internal = this\n\n  Object.keys(external).forEach(function overwrite(key) {\n    // if it's not in the defaults, it doesn't exist\n    if (!arbitrary && internal[key] === undefined) return\n\n    if (key === 'ssl' && !isTruthular(external.ssl)) {\n      logger.warn('SSL config key can no longer be disabled, not updating.')\n      return\n    }\n\n    // TODO: remove in v6\n    if (key === 'ignored_params') {\n      warnDeprecated(key, 'attributes.exclude')\n    }\n\n    if (key === 'capture_params') {\n      warnDeprecated(key, 'attributes.enabled')\n    }\n\n    try {\n      var node = external[key]\n    } catch (err) {\n      logger.warn('Error thrown on access of user config for key: %s', key)\n      return\n    }\n\n    if (typeof node === 'object' && !(node instanceof RegExp) && !Array.isArray(node)) {\n      // is top level and can have arbitrary keys\n      var allowArbitrary = internal === this || HAS_ARBITRARY_KEYS.has(key)\n      this._fromPassed(node, internal[key], allowArbitrary)\n    } else {\n      internal[key] = node\n    }\n  }, this)\n\n  function warnDeprecated(key, replacement) {\n    logger.warn(\n      'Config key %s is deprecated, please use %s instead',\n      key,\n      replacement\n    )\n  }\n}\n\n/**\n * Some values should be picked up only if they're not otherwise set, like\n * the Windows / Azure application name. Don't set it if there's already\n * a non-empty value set via the configuration file, and allow these\n * values to be overwritten by environment variables. Just saves a step for\n * PaaS users who don't want to have multiple settings for a single piece\n * of configuration.\n */\nConfig.prototype._fromSpecial = function _fromSpecial() {\n  var name = this.app_name\n  if (name === null || name === undefined || name === '' ||\n      (Array.isArray(name) && name.length === 0)) {\n    var azureName = process.env[AZURE_APP_NAME]\n    if (azureName) this.app_name = azureName.split(',')\n  }\n}\n\n/**\n * Iterate over all feature flags and check for the corresponding environment variable\n * (of the form NEW_RELIC_FEATURE_FLAG_<feature flag name in upper case>).\n */\nConfig.prototype._featureFlagsFromEnv = function _featureFlagsFromEnv() {\n  const flags = Object.keys(feature_flag.prerelease).concat(feature_flag.released)\n  const config = this\n  flags.forEach(function checkFlag(flag) {\n    const envVal = process.env['NEW_RELIC_FEATURE_FLAG_' + flag.toUpperCase()]\n    if (envVal) {\n      config.feature_flag[flag] = isTruthular(envVal)\n    }\n  })\n}\n\n/**\n * Recursively visit the nodes of the constant containing the mapping between\n * environment variable names, overriding any configuration values that are\n * found in the environment. Operates purely via side effects.\n *\n * @param object metadata The current level of the mapping object. Should never\n *                        need to set this yourself.\n * @param object data     The current level of the configuration object. Should\n *                        never need to set this yourself.\n */\nConfig.prototype._fromEnvironment = function _fromEnvironment(metadata, data) {\n  if (!metadata) metadata = ENV.ENV_MAPPING\n  if (!data) data = this\n\n  Object.keys(metadata).forEach(function applyEnvDefault(value) {\n    // if it's not in the config, it doesn't exist\n    if (data[value] === undefined) {\n      return\n    }\n\n    var node = metadata[value]\n    if (typeof node === 'string') {\n      var setting = process.env[node]\n      if (setting) {\n        if (ENV.LIST_VARS.has(node)) {\n          let split = ENV.LIST_VARS_CUSTOM_DELIMITERS[node] || /,/\n          data[value] = setting.split(split).map(function trimVal(k) {\n            return k.trim()\n          })\n        } else if (ENV.OBJECT_LIST_VARS.has(node)) {\n          data[value] = fromObjectList(setting)\n        } else if (ENV.BOOLEAN_VARS.has(node)) {\n          if (value === 'ssl' && !isTruthular(setting)) {\n            logger.warn('SSL config key can no longer be disabled, not updating.')\n            return\n          }\n          data[value] = isTruthular(setting)\n        } else if (ENV.FLOAT_VARS.has(node)) {\n          data[value] = parseFloat(setting, 10)\n        } else if (ENV.INT_VARS.has(node)) {\n          data[value] = parseInt(setting, 10)\n        } else {\n          data[value] = setting\n        }\n      }\n    } else {\n      // don't crash if the mapping has config keys the current config doesn't.\n      if (!data[value]) data[value] = Object.create(null)\n      this._fromEnvironment(node, data[value])\n    }\n  }, this)\n}\n\n/**\n * Returns true if logging has been manually enabled via configuration file or\n * environment variable.\n *\n * @param {*} inputConfig configuration passed to the Config constructor\n *\n * @returns {boolean}\n */\nConfig.prototype._loggingManuallySet = function _loggingManuallySet(inputConfig) {\n  const inputEnabled = inputConfig && inputConfig.logging && inputConfig.logging.enabled\n  const envEnabled = process.env.NEW_RELIC_LOG_ENABLED\n\n  return (inputEnabled !== undefined) || (envEnabled !== undefined)\n}\n\n/**\n * Returns true if native-metrics has been manually enabled via configuration\n * file or enveironment variable\n * \n * @param {*} inputConfig configuration pass to the Config constructor\n * \n * @returns {boolean}\n */\nConfig.prototype._nativeMetricsManuallySet = \n  function _nativeMetricsManuallySet(inputConfig) {\n    const inputEnabled = inputConfig \n      && inputConfig.plugins \n      && inputConfig.plugins.native_metrics\n      && inputConfig.plugins.native_metrics.enabled\n    const envEnabled = process.env.NEW_RELIC_NATIVE_METRICS_ENABLED\n\n    return (inputEnabled !== undefined) || (envEnabled !== undefined)\n  }\n\n/**\n * Returns true if distributed tracing has been manually enabled via configuration file or\n * environment variable.\n *\n * @param {*} inputConfig configuration passed to the Config constructor\n *\n * @returns {boolean}\n */\nConfig.prototype._DTManuallySet = function _DTManuallySet(inputConfig) {\n  const inputEnabled = inputConfig\n  && inputConfig.distributed_tracing\n  && inputConfig.distributed_tracing.enabled\n\n  const envEnabled = process.env.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED\n\n  return (inputEnabled !== undefined) || (envEnabled !== undefined)\n}\n\n/**\n * Enforces config rules specific to running in serverless_mode:\n *   - disables cross_application_tracer.enabled if set\n *   - defaults logging to disabled\n *   - verifies data specific to running DT is defined either in config file of env vars\n * @param {*} inputConfig configuration passed to the Config constructor\n */\nConfig.prototype._enforceServerless = function _enforceServerless(inputConfig) {\n  if (this.serverless_mode.enabled) {\n    // Explicitly disable old CAT in serverless_mode\n    if (this.cross_application_tracer.enabled) {\n      this.cross_application_tracer.enabled = false\n      logger.info('Cross application tracing is explicitly disabled in serverless_mode.')\n    }\n\n    if (!this._loggingManuallySet(inputConfig)) {\n      this.logging.enabled = false\n\n      logger.info(\n        'Logging is disabled by default when serverless_mode is enabled. ' +\n        'If desired, enable logging via config file or environment variable and ' +\n        'set filepath to a valid path for current environment, stdout or stderr.'\n      )\n    }\n\n    if (this._nativeMetricsManuallySet(inputConfig) && \n      this.plugins.native_metrics.enabled) {\n      logger.info(\n        'Enabling the native-metrics module when in serverless mode may greatly ' +\n        'increase cold-start times. Given the limited benefit of the VM metrics' +\n        'and general lack of control in a serverless environment, we do not ' +\n        'recommend this trade-off.'\n      )\n    } else {\n      this.plugins.native_metrics.enabled = false\n\n      logger.info(\n        'The native-metrics module is disabled by default when serverless_mode ' +\n        'is enabled.  If desired, enable the native-metrics module via config file ' +\n        'or environment variable.'\n      )\n    }\n\n    if (!this._DTManuallySet(inputConfig)) {\n      this.distributed_tracing.enabled = true\n    }\n\n    if (!this.account_id) {\n      if (this.distributed_tracing.enabled) {\n        logger.warn(\n          'Using distributed tracing in serverless mode requires account_id be ' +\n          'defined, either in your newrelic.js file or via environment variables. ' +\n          'Disabling distributed tracing.'\n        )\n        this.distributed_tracing.enabled = false\n      }\n\n      return\n    }\n    // default trusted_account_key to account_id\n    this.trusted_account_key = this.trusted_account_key || this.account_id\n\n    // Not required in serverless mode but must default to Unknown to function.\n    this.primary_application_id = this.primary_application_id || 'Unknown'\n\n    return\n  }\n  const DT_KEYS = ['account_id', 'primary_application_id', 'trusted_account_key']\n  // Don't allow DT config settings to be set if serverless_mode is disabled\n  DT_KEYS.forEach((key) => {\n    if (this[key]) {\n      logger.warn(\n        key + ' was configured locally without enabling serverless_mode. ' +\n        'This local value will be ignored and set by the New Relic servers.'\n      )\n      this[key] = null\n    }\n  })\n}\n\n/**\n * Depending on how the status codes are set, they could be strings, which\n * makes strict equality testing / indexOf fail. To keep things cheap, parse\n * them once, after configuration has finished loading. Other one-off shims\n * based on special properties of configuration values should go here as well.\n */\nConfig.prototype._canonicalize = function _canonicalize() {\n  var statusCodes = this.error_collector && this.error_collector.ignore_status_codes\n  if (statusCodes) {\n    this.error_collector.ignore_status_codes = _parseCodes(statusCodes)\n  }\n\n  const expectedCodes = this.error_collector && this.error_collector.expected_status_codes\n  if (statusCodes) {\n    this.error_collector.expected_status_codes = _parseCodes(expectedCodes)\n  }\n\n  var logAliases = {\n    verbose: 'trace',\n    debugging: 'debug',\n    warning: 'warn',\n    err: 'error'\n  }\n  var level = this.logging.level\n  this.logging.level = logAliases[level] || level\n\n  if (this.host === '') {\n    var region = parseKey(this.license_key)\n    if (region) {\n      this.host = 'collector.' + region + '.nr-data.net'\n    } else {\n      this.host = 'collector.newrelic.com'\n    }\n  }\n\n  if (isTruthular(this.ignore_server_configuration)) {\n    logger.warnOnce(\n      'IgnoreServerConfigurationWarning',\n      'The local config setting `ignore_server_configuration` has been deprecated ' +\n      'and removed as of Agent v5. Please review agent documentation or contact ' +\n      'New Relic support.'\n    )\n  }\n\n  this.api.custom_attributes_enabled = !this.api.custom_attributes_enabled\n    ? this.api.custom_attributes_enabled\n    : this.api.custom_parameters_enabled\n\n  this.serverless_mode.enabled = this.serverless_mode.enabled\n    && this.feature_flag.serverless_mode\n}\n\nfunction _parseCodes(codes) {\n  // range does not support negative values\n  function parseRange(range, parsed) {\n    var split = range.split('-')\n    if (split.length !== 2) {\n      logger.warn('Failed to parse range %s', range)\n      return parsed\n    }\n    if (split[0] === '') { // catch negative code. ex. -7\n      return parsed.push(parseInt(range, 10))\n    }\n    var lower = parseInt(split[0], 10)\n    var upper = parseInt(split[1], 10)\n    if (Number.isNaN(lower) || Number.isNaN(upper)) {\n      logger.warn('Range must contain two numbers %s', range)\n      return parsed\n    }\n    if (lower > upper) {\n      logger.warn('Range must start with lower bound %s', range)\n    } else if (lower < 0 || upper > 1000) {\n      logger.warn('Range must be between 0 and 1000 %s', range)\n    } else { // success\n      for (var i = lower; i <= upper; i++) {\n        parsed.push(i)\n      }\n    }\n    return parsed\n  }\n\n  var parsedCodes = []\n  for (var i = 0; i < codes.length; i++) {\n    var code = codes[i]\n    var parsedCode\n    if (typeof code === 'string' && code.indexOf('-') !== -1) {\n      parseRange(code, parsedCodes)\n    } else {\n      parsedCode = parseInt(code, 10)\n      if (!Number.isNaN(parsedCode)) {\n        parsedCodes.push(parsedCode)\n      } else {\n        logger.warn('Failed to parse status code %s', code)\n      }\n    }\n  }\n  return parsedCodes\n}\n\n/**\n * This goes through the settings that high security mode needs and coerces\n * them to be correct.\n */\nConfig.prototype._applyHighSecurity = function _applyHighSecurity() {\n  var config = this\n  checkNode('', this, HSM.HIGH_SECURITY_SETTINGS)\n  // as a one off, we add a global exclude rule to the list to keep from\n  // clobbering user defined rules\n\n  this.attributes.exclude.push('request.parameters.*')\n\n  function checkNode(base, target, settings) {\n    Object.keys(settings).forEach(checkKey.bind(null, base, target, settings))\n  }\n\n  function checkKey(base, target, settings, key) {\n    var hsValue = settings[key]\n\n    if (hsValue && typeof hsValue === 'object' && !(hsValue instanceof Array)) {\n      if (typeof target[key] !== 'object') {\n        logger.warn(\n          'High Security Mode: %s should be an object, found %s',\n          key,\n          target[key]\n        )\n        target[key] = Object.create(null)\n      }\n\n      return checkNode(base + key + '.', target[key], hsValue)\n    }\n\n    if (target[key] !== hsValue) {\n      logger.warn(\n        'High Security Mode: %s was set to %s, coercing to %s',\n        key,\n        target[key],\n        hsValue\n      )\n      target[key] = hsValue\n      config.emit(base + key, hsValue)\n    }\n  }\n}\n\n/**\n * Checks policies received from preconnect against those expected\n * by the agent, if LASP-enabled. Responds with an error to shut down\n * the agent if necessary.\n *\n * @param {Agent} agent\n * @param {object} policies\n *\n * @returns {CollectorResponse} The result of the processing, with the known\n *  policies as the response payload.\n */\nConfig.prototype.applyLasp = function applyLasp(agent, policies) {\n  var config = this\n  var keys = Object.keys(policies)\n\n  if (!config.security_policies_token) {\n    if (keys.length) {\n      logger.error(\n        'The agent received one or more unexpected security policies and will shut down.'\n      )\n      return CollectorResponse.fatal(null)\n    }\n    return CollectorResponse.success(null)\n  }\n\n  var missingLASP = []\n  var missingRequired = []\n\n  var finalPolicies = keys.reduce(function applyPolicy(obj, name) {\n    var policy = policies[name]\n    var localMapping = LASP_MAP[name]\n\n    if (!localMapping) {\n      if (!policy.required) {\n        // policy is not implemented in agent -- don't send to connect\n        return obj\n      }\n      // policy is required but does not exist in agent -- fail\n      missingRequired.push(name)\n    } else {\n      var splitConfigName = localMapping.path.split('.')\n      var settingBlock = config[splitConfigName[0]]\n      // pull out the configuration subsection that the option lives in\n      for (var i = 1; i < splitConfigName.length - 1; ++i) {\n        settingBlock = settingBlock[splitConfigName[i]]\n      }\n      var valueName = splitConfigName[splitConfigName.length - 1]\n      var localVal = settingBlock[valueName]\n      var policyValues = localMapping.allowedValues\n      var policyValue = policyValues[policy.enabled ? 1 : 0]\n      // get the most secure setting between local config and the policy\n      var finalValue = settingBlock[valueName] = config._getMostSecure(\n        name,\n        localVal,\n        policyValue\n      )\n      policy.enabled = policyValues.indexOf(finalValue) === 1\n      obj[name] = policy\n\n      if (!policy.enabled && localMapping.applyAdditionalSettings) {\n        localMapping.applyAdditionalSettings(config)\n      }\n\n      if (finalValue !== localVal) {\n        // finalValue is more secure than original local val,\n        // so drop corresponding data\n        localMapping.clearData(agent)\n      }\n    }\n\n    return obj\n  }, Object.create(null))\n\n  Object.keys(LASP_MAP).forEach(function checkPolicy(name) {\n    if (!policies[name]) {\n      // agent is expecting a policy that was not sent from server -- fail\n      missingLASP.push(name)\n    }\n  })\n\n  let fatalMessage = null\n  if (missingLASP.length) {\n    fatalMessage =\n      'The agent did not receive one or more security policies that it ' +\n      'expected and will shut down: ' + missingLASP.join(', ') + '.'\n  } else if (missingRequired.length) {\n    fatalMessage =\n      'The agent received one or more required security policies that it ' +\n      'does not recognize and will shut down: ' + missingRequired.join(', ') +\n      '. Please check if a newer agent version supports these policies ' +\n      'or contact support.'\n  }\n\n  if (fatalMessage) {\n    logger.error(fatalMessage)\n    return CollectorResponse.fatal(null)\n  }\n\n  return CollectorResponse.success(finalPolicies)\n}\n\nConfig.prototype.validateFlags = function validateFlags() {\n  Object.keys(this.feature_flag).forEach(function forEachFlag(key) {\n    if (feature_flag.released.indexOf(key) > -1) {\n      logger.warn('Feature flag %s has been released', key)\n    }\n    if (feature_flag.unreleased.indexOf(key) > -1) {\n      logger.warn('Feature flag %s has been deprecated', key)\n    }\n  })\n}\n\n/**\n * Get a JSONifiable object containing all settings we want to report to the\n * collector and store in the environment_values table.\n *\n * @return Object containing simple key-value pairs of settings\n */\nConfig.prototype.publicSettings = function publicSettings() {\n  var settings = Object.create(null)\n\n  for (var key in this) {\n    if (this.hasOwnProperty(key)) {\n      if (HSM.REDACT_BEFORE_SEND.has(key)) {\n        settings[key] = '****'\n      } else if (!HSM.REMOVE_BEFORE_SEND.has(key)) {\n        settings[key] = this[key]\n      }\n    }\n  }\n\n  // Agent-side setting is 'enable', but collector-side setting is\n  // 'auto_instrument'. Send both values up.\n  settings.browser_monitoring.auto_instrument = settings.browser_monitoring.enable\n\n  try {\n    settings = stringify(settings)\n    // Remove simple circular references\n    return flatten(Object.create(null), '', JSON.parse(settings))\n  } catch (err) {\n    logger.error(err, 'Unable to stringify settings object')\n  }\n}\n\nConfig.prototype.getAggregatorConfig = function getAggregatorConfig(method) {\n  const harvestConfig = this.event_harvest_config\n  const isValidConfig = harvestConfigValidator.isValidHarvestConfig(harvestConfig)\n  const limit = harvestConfig.harvest_limits[method]\n  if (!isValidConfig || !harvestConfigValidator.isValidHarvestValue(limit)) {\n    return null\n  }\n\n  return {\n    limit,\n    periodMs: harvestConfig.report_period_ms\n  }\n}\n\n/**\n * Create a configuration, either from a configuration file or the node\n * process's environment.\n *\n * For configuration via file, check these directories, in order, for a\n * file named 'newrelic.js':\n *\n *   1. The process's current working directory at startup.\n *   2. The same directory as the process's main module (i.e. the filename\n *      passed to node on the command line).\n *   3. The directory pointed to by the environment variable NEW_RELIC_HOME.\n *   4. The current process's HOME directory.\n *   5. If this module is installed as a dependency, the directory above the\n *      node_modules folder in which newrelic is installed.\n *\n * For configration via environment (useful on Joyent, Azure, Heroku, or\n * other PaaS offerings), set NEW_RELIC_NO_CONFIG_FILE to something truthy\n * and read README.md for details on what configuration variables are\n * necessary, as well as a complete enumeration of the other available\n * variables.\n *\n * @param {object} config Optional configuration to be used in place of a\n *                        config file.\n */\nfunction initialize(config) {\n  /**\n   * When the logger is required here, it bootstraps itself and then\n   * injects itself into this module's closure via setLogger on the\n   * instance of the logger it creates.\n   */\n  logger = require('../logger')\n\n  if (config) return new Config(config)\n\n  if (isTruthular(process.env.NEW_RELIC_NO_CONFIG_FILE)) {\n    config = new Config(Object.create(null))\n    if (config.newrelic_home) delete config.newrelic_home\n    return config\n  }\n\n  var filepath = _findConfigFile()\n  if (!filepath) {\n    _noConfigFile()\n    return null\n  }\n\n  var userConf\n  try {\n    userConf = require(filepath).config\n  } catch (error) {\n    logger.error(error)\n\n    throw new Error([\n      `Unable to read confguration file \"${filepath}\".`,\n      `A base configuration file can be copied from ${BASE_CONFIG_PATH}`,\n      'and renamed to \"newrelic.js\" in the directory from which you will start',\n      'your application.'\n    ].join('\\n'))\n  }\n\n  config = new Config(userConf)\n  config.config_file_path = filepath\n  logger.debug('Using configuration file %s.', filepath)\n\n  config.validateFlags()\n\n  return config\n}\n\nfunction _noConfigFile() {\n  const mainpath = path.resolve(path.join(process.cwd(), DEFAULT_FILENAME))\n  // If agent was loaded with -r flag, default to the path of the file being executed\n  const mainModule = process.mainModule && process.mainModule.filename || process.argv[1]\n  const altpath = path.resolve(\n    path.dirname(mainModule),\n    DEFAULT_FILENAME\n  )\n\n  let locations = mainpath\n  if (mainpath !== altpath) {\n    locations += ' or\\n' + altpath\n  }\n\n  /* eslint-disable no-console */\n  console.error([\n    'Unable to find New Relic module configuration. A base configuration file',\n    `can be copied from ${BASE_CONFIG_PATH}`,\n    `and put at ${locations}.`,\n    'If you are not using file-based configuration, please set the environment',\n    'variable `NEW_RELIC_NO_CONFIG_FILE=true`.'\n  ].join('\\n'))\n  /* eslint-enable no-console */\n}\n\n/**\n * This function honors the singleton nature of this module while allowing\n * consumers to just request an instance without having to worry if one was\n * already created.\n */\nfunction getOrCreateInstance() {\n  if (_configInstance === null) {\n    try {\n      _configInstance = initialize()\n    } catch (err) {\n      /* eslint-disable no-console */\n      console.error('New Relic for Node.js is disabled due to an error:')\n      console.error(err.stack)\n      /* eslint-enable no-console */\n\n      // Config construction has potential to throw due to invalid settings.\n      // This allows the agent to return a stub api without crashing the process.\n      _configInstance = Object.assign(defaultConfig(), {agent_enabled: false})\n      _configInstance.setLogger = Config.prototype.setLogger\n    }\n  }\n  return _configInstance\n}\n\nfunction getInstance() {\n  return _configInstance\n}\n\nfunction createInstance(config) {\n  _configInstance = initialize(config)\n  return _configInstance\n}\n\n/**\n * Preserve the legacy initializer, but also allow consumers to manage their\n * own configuration if they choose.\n */\nConfig.initialize = initialize\nConfig.getOrCreateInstance = getOrCreateInstance\nConfig.getInstance = getInstance\nConfig.createInstance = createInstance\nConfig.SPAN_EVENT_LIMIT = SPAN_EVENT_LIMIT\n\nmodule.exports = Config\n"]},"metadata":{},"sourceType":"script"}