{"ast":null,"code":"'use strict';\n\nconst logger = require('../logger').child({\n  component: 'ConglomerateShim'\n});\n\nconst Shim = require('./shim');\n\nconst _require = require('./constants'),\n      MODULE_TYPE = _require.MODULE_TYPE;\n\nconst SHIM_CLASSES = {\n  [MODULE_TYPE.GENERIC]: Shim,\n  [MODULE_TYPE.DATASTORE]: require('./datastore-shim'),\n  [MODULE_TYPE.MESSAGE]: require('./message-shim'),\n  [MODULE_TYPE.PROMISE]: require('./promise-shim'),\n  [MODULE_TYPE.TRANSACTION]: require('./transaction-shim'),\n  [MODULE_TYPE.WEB_FRAMEWORK]: require('./webframework-shim')\n};\n/**\n * A shim for wrapping all-in-one modules which implement multiple services.\n *\n * @private\n * @extends Shim\n */\n\nclass ConglomerateShim extends Shim {\n  constructor(agent, moduleName, resolvedName) {\n    super(agent, moduleName, resolvedName);\n    this._logger = logger.child({\n      module: moduleName\n    });\n    this._resolvedName = resolvedName;\n  }\n\n  get GENERIC() {\n    return MODULE_TYPE.GENERIC;\n  }\n\n  get DATASTORE() {\n    return MODULE_TYPE.DATASTORE;\n  }\n\n  get MESSAGE() {\n    return MODULE_TYPE.MESSAGE;\n  }\n\n  get PROMISE() {\n    return MODULE_TYPE.PROMISE;\n  }\n\n  get TRANSACTION() {\n    return MODULE_TYPE.TRANSACTION;\n  }\n\n  get WEB_FRAMEWORK() {\n    return MODULE_TYPE.WEB_FRAMEWORK;\n  }\n  /**\n   * Constructs a new `Shim` of the specified type for instrumenting submodules\n   * of the conglomerate module.\n   *\n   * @param {MODULE_TYPE} type  - The type of shim to construct.\n   * @param {string} submodule  - The name of the submodule this will instrument.\n   *\n   * @return {Shim} A new shim of the given type.\n   */\n\n\n  makeSpecializedShim(type, submodule) {\n    const ShimClass = SHIM_CLASSES[type];\n    const shim = new ShimClass(this.agent, this.moduleName, this._resolvedName);\n    shim._logger = shim._logger.child({\n      submodule\n    });\n    return shim;\n  }\n\n}\n\nmodule.exports = ConglomerateShim;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/shim/conglomerate-shim.js"],"names":["logger","require","child","component","Shim","MODULE_TYPE","SHIM_CLASSES","GENERIC","DATASTORE","MESSAGE","PROMISE","TRANSACTION","WEB_FRAMEWORK","ConglomerateShim","constructor","agent","moduleName","resolvedName","_logger","module","_resolvedName","makeSpecializedShim","type","submodule","ShimClass","shim","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,KAArB,CAA2B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA3B,CAAf;;AACA,MAAMC,IAAI,GAAGH,OAAO,CAAC,QAAD,CAApB;;iBAEsBA,OAAO,CAAC,aAAD,C;MAAtBI,W,YAAAA,W;;AACP,MAAMC,YAAY,GAAG;AACnB,GAACD,WAAW,CAACE,OAAb,GAAuBH,IADJ;AAEnB,GAACC,WAAW,CAACG,SAAb,GAAyBP,OAAO,CAAC,kBAAD,CAFb;AAGnB,GAACI,WAAW,CAACI,OAAb,GAAuBR,OAAO,CAAC,gBAAD,CAHX;AAInB,GAACI,WAAW,CAACK,OAAb,GAAuBT,OAAO,CAAC,gBAAD,CAJX;AAKnB,GAACI,WAAW,CAACM,WAAb,GAA2BV,OAAO,CAAC,oBAAD,CALf;AAMnB,GAACI,WAAW,CAACO,aAAb,GAA6BX,OAAO,CAAC,qBAAD;AANjB,CAArB;AASA;;;;;;;AAMA,MAAMY,gBAAN,SAA+BT,IAA/B,CAAoC;AAClCU,EAAAA,WAAW,CAACC,KAAD,EAAQC,UAAR,EAAoBC,YAApB,EAAkC;AAC3C,UAAMF,KAAN,EAAaC,UAAb,EAAyBC,YAAzB;AACA,SAAKC,OAAL,GAAelB,MAAM,CAACE,KAAP,CAAa;AAACiB,MAAAA,MAAM,EAAEH;AAAT,KAAb,CAAf;AACA,SAAKI,aAAL,GAAqBH,YAArB;AACD;;AAED,MAAIV,OAAJ,GAAc;AACZ,WAAOF,WAAW,CAACE,OAAnB;AACD;;AACD,MAAIC,SAAJ,GAAgB;AACd,WAAOH,WAAW,CAACG,SAAnB;AACD;;AACD,MAAIC,OAAJ,GAAc;AACZ,WAAOJ,WAAW,CAACI,OAAnB;AACD;;AACD,MAAIC,OAAJ,GAAc;AACZ,WAAOL,WAAW,CAACK,OAAnB;AACD;;AACD,MAAIC,WAAJ,GAAkB;AAChB,WAAON,WAAW,CAACM,WAAnB;AACD;;AACD,MAAIC,aAAJ,GAAoB;AAClB,WAAOP,WAAW,CAACO,aAAnB;AACD;AAED;;;;;;;;;;;AASAS,EAAAA,mBAAmB,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACnC,UAAMC,SAAS,GAAGlB,YAAY,CAACgB,IAAD,CAA9B;AACA,UAAMG,IAAI,GAAG,IAAID,SAAJ,CAAc,KAAKT,KAAnB,EAA0B,KAAKC,UAA/B,EAA2C,KAAKI,aAAhD,CAAb;AACAK,IAAAA,IAAI,CAACP,OAAL,GAAeO,IAAI,CAACP,OAAL,CAAahB,KAAb,CAAmB;AAACqB,MAAAA;AAAD,KAAnB,CAAf;AACA,WAAOE,IAAP;AACD;;AAxCiC;;AA2CpCN,MAAM,CAACO,OAAP,GAAiBb,gBAAjB","sourcesContent":["'use strict'\n\nconst logger = require('../logger').child({component: 'ConglomerateShim'})\nconst Shim = require('./shim')\n\nconst {MODULE_TYPE} = require('./constants')\nconst SHIM_CLASSES = {\n  [MODULE_TYPE.GENERIC]: Shim,\n  [MODULE_TYPE.DATASTORE]: require('./datastore-shim'),\n  [MODULE_TYPE.MESSAGE]: require('./message-shim'),\n  [MODULE_TYPE.PROMISE]: require('./promise-shim'),\n  [MODULE_TYPE.TRANSACTION]: require('./transaction-shim'),\n  [MODULE_TYPE.WEB_FRAMEWORK]: require('./webframework-shim')\n}\n\n/**\n * A shim for wrapping all-in-one modules which implement multiple services.\n *\n * @private\n * @extends Shim\n */\nclass ConglomerateShim extends Shim {\n  constructor(agent, moduleName, resolvedName) {\n    super(agent, moduleName, resolvedName)\n    this._logger = logger.child({module: moduleName})\n    this._resolvedName = resolvedName\n  }\n\n  get GENERIC() {\n    return MODULE_TYPE.GENERIC\n  }\n  get DATASTORE() {\n    return MODULE_TYPE.DATASTORE\n  }\n  get MESSAGE() {\n    return MODULE_TYPE.MESSAGE\n  }\n  get PROMISE() {\n    return MODULE_TYPE.PROMISE\n  }\n  get TRANSACTION() {\n    return MODULE_TYPE.TRANSACTION\n  }\n  get WEB_FRAMEWORK() {\n    return MODULE_TYPE.WEB_FRAMEWORK\n  }\n\n  /**\n   * Constructs a new `Shim` of the specified type for instrumenting submodules\n   * of the conglomerate module.\n   *\n   * @param {MODULE_TYPE} type  - The type of shim to construct.\n   * @param {string} submodule  - The name of the submodule this will instrument.\n   *\n   * @return {Shim} A new shim of the given type.\n   */\n  makeSpecializedShim(type, submodule) {\n    const ShimClass = SHIM_CLASSES[type]\n    const shim = new ShimClass(this.agent, this.moduleName, this._resolvedName)\n    shim._logger = shim._logger.child({submodule})\n    return shim\n  }\n}\n\nmodule.exports = ConglomerateShim\n"]},"metadata":{},"sourceType":"script"}