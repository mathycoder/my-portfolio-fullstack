{"ast":null,"code":"'use strict';\n\nconst NAMES = require('../names');\n\nfunction recordDistributedTrace(tx, suffix, duration, exclusive) {\n  const distTraceReceived = !!tx.acceptedDistributedTrace;\n  const tag = [tx.parentType || 'Unknown', tx.parentAcct || 'Unknown', tx.parentApp || 'Unknown', tx.parentTransportType || 'Unknown', 'all'].join('/');\n  const suffixes = ['', suffix];\n  suffixes.forEach(function record(suf) {\n    tx.measure(`${NAMES.DISTRIBUTED_TRACE.DURATION}/${tag}${suf}`, null, duration, exclusive);\n\n    if (tx.hasErrors()) {\n      tx.measure(`${NAMES.DISTRIBUTED_TRACE.ERRORS}/${tag}${suf}`, null, duration, exclusive);\n    }\n\n    if (distTraceReceived) {\n      tx.measure(`${NAMES.DISTRIBUTED_TRACE.TRANSPORT}/${tag}${suf}`, null, duration, exclusive);\n    }\n  });\n}\n\nmodule.exports = recordDistributedTrace;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/metrics/recorders/distributed-trace.js"],"names":["NAMES","require","recordDistributedTrace","tx","suffix","duration","exclusive","distTraceReceived","acceptedDistributedTrace","tag","parentType","parentAcct","parentApp","parentTransportType","join","suffixes","forEach","record","suf","measure","DISTRIBUTED_TRACE","DURATION","hasErrors","ERRORS","TRANSPORT","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsDC,SAAtD,EAAiE;AAC/D,QAAMC,iBAAiB,GAAG,CAAC,CAACJ,EAAE,CAACK,wBAA/B;AACA,QAAMC,GAAG,GAAG,CACVN,EAAE,CAACO,UAAH,IAAiB,SADP,EAEVP,EAAE,CAACQ,UAAH,IAAiB,SAFP,EAGVR,EAAE,CAACS,SAAH,IAAgB,SAHN,EAIVT,EAAE,CAACU,mBAAH,IAA0B,SAJhB,EAKV,KALU,EAMVC,IANU,CAML,GANK,CAAZ;AAQA,QAAMC,QAAQ,GAAG,CAAC,EAAD,EAAKX,MAAL,CAAjB;AAEAW,EAAAA,QAAQ,CAACC,OAAT,CAAiB,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACpCf,IAAAA,EAAE,CAACgB,OAAH,CACG,GAAEnB,KAAK,CAACoB,iBAAN,CAAwBC,QAAS,IAAGZ,GAAI,GAAES,GAAI,EADnD,EAEE,IAFF,EAGEb,QAHF,EAIEC,SAJF;;AAOA,QAAIH,EAAE,CAACmB,SAAH,EAAJ,EAAoB;AAClBnB,MAAAA,EAAE,CAACgB,OAAH,CACG,GAAEnB,KAAK,CAACoB,iBAAN,CAAwBG,MAAO,IAAGd,GAAI,GAAES,GAAI,EADjD,EAEE,IAFF,EAGEb,QAHF,EAIEC,SAJF;AAMD;;AAED,QAAIC,iBAAJ,EAAuB;AACrBJ,MAAAA,EAAE,CAACgB,OAAH,CACG,GAAEnB,KAAK,CAACoB,iBAAN,CAAwBI,SAAU,IAAGf,GAAI,GAAES,GAAI,EADpD,EAEE,IAFF,EAGEb,QAHF,EAIEC,SAJF;AAMD;AACF,GAzBD;AA0BD;;AAEDmB,MAAM,CAACC,OAAP,GAAiBxB,sBAAjB","sourcesContent":["'use strict'\n\nconst NAMES = require('../names')\n\nfunction recordDistributedTrace(tx, suffix, duration, exclusive) {\n  const distTraceReceived = !!tx.acceptedDistributedTrace\n  const tag = [\n    tx.parentType || 'Unknown',\n    tx.parentAcct || 'Unknown',\n    tx.parentApp || 'Unknown',\n    tx.parentTransportType || 'Unknown',\n    'all'\n  ].join('/')\n\n  const suffixes = ['', suffix]\n\n  suffixes.forEach(function record(suf) {\n    tx.measure(\n      `${NAMES.DISTRIBUTED_TRACE.DURATION}/${tag}${suf}`,\n      null,\n      duration,\n      exclusive\n    )\n\n    if (tx.hasErrors()) {\n      tx.measure(\n        `${NAMES.DISTRIBUTED_TRACE.ERRORS}/${tag}${suf}`,\n        null,\n        duration,\n        exclusive\n      )\n    }\n\n    if (distTraceReceived) {\n      tx.measure(\n        `${NAMES.DISTRIBUTED_TRACE.TRANSPORT}/${tag}${suf}`,\n        null,\n        duration,\n        exclusive\n      )\n    }\n  })\n}\n\nmodule.exports = recordDistributedTrace\n"]},"metadata":{},"sourceType":"script"}