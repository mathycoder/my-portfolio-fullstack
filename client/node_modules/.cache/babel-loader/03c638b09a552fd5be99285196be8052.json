{"ast":null,"code":"'use strict';\n/**\n * This file includes all of the configuration variables used by the Node.js\n * module. If there's a configurable element of the module and it's not\n * described in here, there's been a terrible mistake.\n */\n\nexports.config = () => ({\n  /**\n   * Array of application names.\n   *\n   * @env NEW_RELIC_APP_NAME\n   */\n  app_name: [],\n\n  /**\n   * The user's license key. Must be set by per-app configuration file.\n   *\n   * @env NEW_RELIC_LICENSE_KEY\n   */\n  license_key: '',\n\n  /**\n   *\n   * Enables/Disables security politices.  Paste your security policies\n   * token from the New Relic Admin below.\n   *\n   * @env NEW_RELIC_SECURITY_POLICIES_TOKEN\n   */\n  security_policies_token: '',\n\n  /**\n   * Hostname for the New Relic collector proxy.\n   *\n   * You shouldn't need to change this.\n   *\n   * @env NEW_RELIC_HOST\n   */\n  host: '',\n\n  /**\n   * The port on which the collector proxy will be listening.\n   *\n   * You shouldn't need to change this.\n   *\n   * @env NEW_RELIC_PORT\n   */\n  port: 443,\n\n  /**\n   * Whether or not to use SSL to connect to New Relic's servers.\n   *\n   * NOTE: This option can no longer be disabled.\n   *\n   * @env NEW_RELIC_USE_SSL\n   */\n  ssl: true,\n\n  /**\n   * Proxy url\n   *\n   * A proxy url can be used in place of setting\n   * proxy_host, proxy_port, proxy_user, and proxy_pass.\n   *\n   * e.g. http://user:pass@host:port/\n   *\n   * Setting proxy will override other proxy settings.\n   *\n   * @env NEW_RELIC_PROXY_URL\n   */\n  proxy: '',\n\n  /**\n   * Proxy host to use to connect to the internet.\n   *\n   * @env NEW_RELIC_PROXY_HOST\n   */\n  proxy_host: '',\n\n  /**\n   * Proxy port to use to connect to the internet.\n   *\n   * @env NEW_RELIC_PROXY_PORT\n   */\n  proxy_port: '',\n\n  /**\n   * Proxy user name when required.\n   *\n   * @env NEW_RELIC_PROXY_USER\n   */\n  proxy_user: '',\n\n  /**\n   * Proxy password when required.\n   *\n   * @env NEW_RELIC_PROXY_PASS\n   */\n  proxy_pass: '',\n  // Serverless DT config defaults\n  trusted_account_key: null,\n  primary_application_id: null,\n  account_id: null,\n\n  /**\n   * Custom SSL certificates\n   *\n   * If your proxy uses a custom SSL certificate, you can add the CA text to\n   * this array, one entry per certificate.\n   *\n   * The easiest way to do this is with `fs.readFileSync` e.g.\n   *\n   * certificates: [\n   *   require('fs').readFileSync('custom.crt', 'utf8') // don't forget the utf8\n   * ]\n   *\n   */\n  certificates: [],\n\n  /**\n   * Whether the module is enabled.\n   *\n   * @env NEW_RELIC_ENABLED\n   */\n  agent_enabled: true,\n\n  /**\n   * The default Apdex tolerating / threshold value for applications, in\n   * seconds. The default for Node is apdexT to 100 milliseconds, which is\n   * lower than New Relic standard, but Node.js applications tend to be more\n   * latency-sensitive than most.\n   *\n   * NOTE: This setting can not be modified locally. Use server-side configuration\n   * to change your application's apdex.\n   *\n   * @see https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/changing-your-apdex-settings\n   */\n  apdex_t: 0.100,\n\n  /**\n   * When true, all request headers except for those listed in attributes.exclude\n   * will be captured for all traces, unless otherwise specified in a destination's\n   * attributes include/exclude lists.\n   */\n  allow_all_headers: false,\n\n  /**\n   * Attributes are key-value pairs containing information that determines\n   * the properties of an event or transaction.\n   */\n  attributes: {\n    /**\n     * If `true`, enables capture of attributes for all destinations.\n     * If there are specific parameters you want ignored, use `attributes.exclude`.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_ENABLED\n     */\n    enabled: true,\n\n    /**\n     * Prefix of attributes to exclude from all destinations. Allows * as wildcard at end.\n     *\n     * NOTE: If excluding headers, they must be in camelCase form to be filtered.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_EXCLUDE\n     */\n    exclude: [],\n\n    /**\n     * Prefix of attributes to include in all destinations. Allows * as wildcard at end.\n     *\n     * NOTE: If including headers, they must be in camelCase form to be filtered.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_INCLUDE\n     */\n    include: [],\n\n    /**\n     * If `true`, patterns may be added to the `attributes.include`\n     * list.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED\n     */\n    include_enabled: true,\n\n    /**\n     * Controls how many attribute include/exclude rule results are cached by\n     * the filter. Increasing this limit will cause greater memory usage and is\n     * only necessary if you have an extremely high variety of attributes.\n     */\n    filter_cache_limit: 1000\n  },\n  diagnostics: {\n    code_injector: {\n      enabled: false,\n      internal_file_pattern: /nodejs_agent\\/(?:(?!test))|\\/node_modules\\/(?:@)?newrelic/\n    }\n  },\n  logging: {\n    /**\n     * Verbosity of the module's logging. This module uses bunyan\n     * (https://github.com/trentm/node-bunyan) for its logging, and as such the\n     * valid logging levels are 'fatal', 'error', 'warn', 'info', 'debug' and\n     * 'trace'. Logging at levels 'info' and higher is very terse. For support\n     * requests, attaching logs captured at 'trace' level are extremely helpful\n     * in chasing down bugs.\n     *\n     * @env NEW_RELIC_LOG_LEVEL\n     */\n    level: 'info',\n\n    /**\n     * Where to put the log file -- by default just uses process.cwd +\n     * 'newrelic_agent.log'. A special case is a filepath of 'stdout',\n     * in which case all logging will go to stdout, or 'stderr', in which\n     * case all logging will go to stderr.\n     *\n     * @env NEW_RELIC_LOG\n     */\n    filepath: require('path').join(process.cwd(), 'newrelic_agent.log'),\n\n    /**\n     * Whether to write to a log file at all\n     *\n     * @env NEW_RELIC_LOG_ENABLED\n     */\n    enabled: true,\n\n    /**\n     * Enables extra debugging at `warn` level. No need to enable except under\n     * specific debugging conditions.\n     */\n    diagnostics: false\n  },\n  audit_log: {\n    /**\n     * Enables logging of out bound traffic from the Agent to the Collector.\n     * This field is ignored if trace level logging is enabled.\n     * With trace logging, all traffic is logged.\n     *\n     * @env NEW_RELIC_AUDIT_LOG_ENABLED\n     */\n    enabled: false,\n\n    /**\n     * Specify which methods are logged. Used in conjuction with the audit_log flag\n     * If audit_log is enabled and this property is empty, all methods will be logged\n     * Otherwise, if the audit log is enabled, only the methods specified\n     * in the filter will be logged\n     * Methods include: error_data, metric_data, and analytic_event_data\n     *\n     * @env NEW_RELIC_AUDIT_LOG_ENDPOINTS\n     */\n    endpoints: []\n  },\n\n  /**\n   * Whether to collect & submit error traces to New Relic.\n   *\n   * @env NEW_RELIC_ERROR_COLLECTOR_ENABLED\n   */\n  error_collector: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from error collection.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n\n      /**\n       * Prefix of attributes to exclude from error collection.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in error collection.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n\n    /**\n     * Disabling the error tracer just means that errors aren't collected\n     * and sent to New Relic -- it DOES NOT remove any instrumentation.\n     */\n    enabled: true,\n\n    /**\n     * List of HTTP error status codes the error tracer should disregard.\n     * Ignoring a status code means that the transaction is not renamed to\n     * match the code, and the request is not treated as an error by the error\n     * collector.\n     *\n     * NOTE: This configuration value has no effect on errors recorded using\n     * `noticeError()`.\n     *\n     * Defaults to 404 NOT FOUND.\n     *\n     * @env NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES\n     */\n    ignore_status_codes: [404],\n\n    /**\n     * Whether error events are collected.\n     */\n    capture_events: true,\n\n    /**\n     * The agent will collect all error events up to this number per minute.\n     * If there are more than that, a statistical sampling will be collected.\n     * Currently this uses a priority sampling algorithm.\n     *\n     * By increasing this setting you are both increasing the memory\n     * requirements of the agent as well as increasing the payload to the New\n     * Relic servers. The memory concerns are something you should consider for\n     * your own server's sake. The payload of events is compressed, but if it\n     * grows too large the New Relic servers may reject it.\n     */\n    max_event_samples_stored: 100,\n    expected_classes: [],\n    expected_messages: {},\n    expected_status_codes: [],\n    ignore_classes: [],\n    ignore_messages: {}\n  },\n\n  /**\n   * Error message redaction\n   *\n   * Options regarding how the agent handles the redaction of error messages.\n   *\n   */\n  strip_exception_messages: {\n    /**\n     * When `true`, the agent will redact the messages of captured\n     * errors.\n     *\n     *  @env NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED\n     */\n    enabled: false\n  },\n\n  /**\n   * Options regarding collecting system information. Used for system\n   * utilization based pricing scheme.\n   */\n  utilization: {\n    /**\n     * This flag dictates whether the agent attempts to reach out to AWS\n     * to get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_AWS\n     */\n    detect_aws: true,\n\n    /**\n     * This flag dictates whether the agent attempts to detect if the\n     * the process is running on Pivotal Cloud Foundary.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_PCF\n     */\n    detect_pcf: true,\n\n    /**\n     * This flag dictates whether the agent attempts to reach out to Azure to\n     * get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_AZURE\n     */\n    detect_azure: true,\n\n    /**\n     * This flag dictates whether the agent attempts to read files\n     * to get info about the container the process is running in.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_DOCKER\n     */\n    detect_docker: true,\n\n    /**\n     * This flag dictates whether the agent attempts to reach out to GCP\n     * to get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_GCP\n     */\n    detect_gcp: true,\n\n    /**\n     * This flag dictates whether the agent attempts to reach out to\n     * Kubernetes to get info about the container the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_KUBERNETES\n     */\n    detect_kubernetes: true\n  },\n  transaction_tracer: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction traces.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n\n      /**\n       * Prefix of attributes to exclude from transaction traces.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in transaction traces.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n\n    /**\n     * Whether to collect & submit slow transaction traces to New Relic. The\n     * instrumentation is loaded regardless of this setting, as it's necessary\n     * to gather metrics. Disable the agent to prevent the instrumentation from\n     * loading.\n     *\n     * @env NEW_RELIC_TRACER_ENABLED\n     */\n    enabled: true,\n\n    /**\n     * The duration at below which the slow transaction tracer should collect a\n     * transaction trace. If set to 'apdex_f', the threshold will be set to\n     * 4 * apdex_t, which with a default apdex_t value of 500 milliseconds will\n     * be 2 seconds.\n     *\n     * If a time is provided, it is set in seconds.\n     *\n     * @env NEW_RELIC_TRACER_THRESHOLD\n     */\n    transaction_threshold: 'apdex_f',\n\n    /**\n     * Increase this parameter to increase the diversity of the slow\n     * transaction traces recorded by your application over time. Confused?\n     * Read on.\n     *\n     * Transactions are named based on the request (see the README for the\n     * details of how requests are mapped to transactions), and top_n refers to\n     * the \"top n slowest transactions\" grouped by these names. The module will\n     * only replace a recorded trace with a new trace if the new trace is\n     * slower than the previous slowest trace of that name. The default value\n     * for this setting is 20, as the transaction trace view page also defaults\n     * to showing the 20 slowest transactions.\n     *\n     * If you want to record the absolute slowest transaction over the last\n     * minute, set top_n to 0 or 1. This used to be the default, and has a\n     * problem in that it will allow one very slow route to dominate your slow\n     * transaction traces.\n     *\n     * The module will always record at least 5 different slow transactions in\n     * the reporting periods after it starts up, and will reset its internal\n     * slow trace aggregator if no slow transactions have been recorded for the\n     * last 5 harvest cycles, restarting the aggregation process.\n     *\n     * @env NEW_RELIC_TRACER_TOP_N\n     */\n    top_n: 20,\n\n    /**\n     * This option affects both slow-queries and record_sql for transaction\n     * traces.  It can have one of 3 values: 'off', 'obfuscated' or 'raw'\n     * When it is 'off' no slow queries will be captured, and backtraces\n     * and sql will not be included in transaction traces.  If it is 'raw'\n     * or 'obfuscated' and other criteria (slow_sql.enabled etc) are met\n     * for a query. The raw or obfuscated sql will be included in the\n     * transaction trace and a slow query sample will be collected.\n     */\n    record_sql: 'off',\n\n    /**\n     * This option affects both slow-queries and record_sql for transaction\n     * traces.  This is the minimum duration a query must take (in ms) for it\n     * to be considered for for slow query and inclusion in transaction traces.\n     */\n    explain_threshold: 500,\n\n    /**\n     * This option controls the enumerability of internal properties the agent\n     * puts on application objects such as requests and promises while tracing.\n     * When `true`, these properties will be configured with `enumerable: false`\n     * using `Object.defineProperty`.\n     *\n     * XXX: This can have a significant impact on application performance, so if\n     * this is not necessary for your application we recommend disabling the\n     * feature.\n     *\n     * @env NEW_RELIC_HIDE_INTERNALS\n     */\n    hide_internals: true\n  },\n\n  /**\n   * Rules for naming or ignoring transactions.\n   */\n  rules: {\n    /**\n     * A list of rules of the format {pattern: 'pattern', name: 'name'} for\n     * matching incoming request URLs and naming the associated New Relic\n     * transactions. Both pattern and name are required. Additional attributes\n     * are ignored. Patterns may have capture groups (following JavaScript\n     * conventions), and names will use $1-style replacement strings. See\n     * the documentation for addNamingRule for important caveats.\n     *\n     * @env NEW_RELIC_NAMING_RULES\n     */\n    name: [],\n\n    /**\n     * A list of patterns for matching incoming request URLs to be ignored by\n     * the agent. Patterns may be strings or regular expressions.\n     *\n     * By default, socket.io long-polling is ignored.\n     *\n     * @env NEW_RELIC_IGNORING_RULES\n     */\n    ignore: ['^\\/socket\\.io\\/.*\\/xhr-polling/']\n  },\n\n  /**\n   * By default, any transactions that are not affected by other bits of\n   * naming logic (the API, rules, or metric normalization rules) will\n   * have their names set to 'NormalizedUri/*'. Setting this value to\n   * false will set them instead to Uri/path/to/resource. Don't change\n   * this setting unless you understand the implications of New Relic's\n   * metric grouping issues and are confident your application isn't going\n   * to run afoul of them. Your application could end up getting black holed!\n   * Nobody wants that.\n   *\n   * @env NEW_RELIC_ENFORCE_BACKSTOP\n   */\n  enforce_backstop: true,\n\n  /**\n   * Browser Monitoring\n   *\n   * Browser monitoring lets you correlate transactions between the server and browser\n   * giving you accurate data on how long a page request takes, from request,\n   * through the server response, up until the actual page render completes.\n   */\n  browser_monitoring: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from browser monitoring.\n       *\n       * @env NEW_RELIC_BROWSER_MONITOR_ATTRIBUTES\n       */\n      enabled: false,\n\n      /**\n       * Prefix of attributes to exclude from browser monitoring.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in browser monitoring.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n\n    /**\n     * Enable browser monitoring header generation.\n     *\n     * This does not auto-instrument, rather it enables the agent to generate headers.\n     * The newrelic module can generate the appropriate <script> header, but you must\n     * inject the header yourself, or use a module that does so.\n     *\n     * Usage:\n     *\n     *     var newrelic = require('newrelic');\n     *\n     *     router.get('/', function (req, res) {\n     *       var header = newrelic.getBrowserTimingHeader();\n     *       res.write(header)\n     *       // write the rest of the page\n     *     });\n     *\n     * This generates the <script>...</script> header necessary for Browser Monitoring\n     * This script must be manually injected into your templates, as high as possible\n     * in the header, but _after_ any X-UA-COMPATIBLE HTTP-EQUIV meta tags.\n     * Otherwise you may hurt IE!\n     *\n     * This method must be called _during_ a transaction, and must be called every\n     * time you want to generate the headers.\n     *\n     * Do *not* reuse the headers between users, or even between requests.\n     *\n     * @env NEW_RELIC_BROWSER_MONITOR_ENABLE\n     */\n    enable: true,\n\n    /**\n     * Request un-minified sources from the server.\n     *\n     * @env NEW_RELIC_BROWSER_MONITOR_DEBUG\n     */\n    debug: false\n  },\n\n  /**\n   * API Configuration\n   *\n   * Some API end points can be turned off via configuration settings to\n   * allow for more flexible security options. All API configuration\n   * options are disabled when high-security mode is enabled.\n   */\n  api: {\n    /**\n     * Deprecated. Please use `api.custom_attributes_enabled` instead.\n     *\n     * @env NEW_RELIC_API_CUSTOM_PARAMETERS\n     */\n    // TODO: This somehow survived the v5 cut, even though\n    // it's already removed from docs site. Remove in v6.\n    custom_parameters_enabled: true,\n\n    /**\n     * Controls for the `API.addCustomAttribute` method.\n     *\n     * @env NEW_RELIC_API_CUSTOM_ATTRIBUTES\n     */\n    custom_attributes_enabled: true,\n\n    /**\n     * Controls for the `API.recordCustomEvent` method.\n     *\n     * @env NEW_RELIC_API_CUSTOM_EVENTS\n     */\n    custom_events_enabled: true,\n\n    /**\n     * Controls for the `API.noticeError` method.\n     *\n     * @env NEW_RELIC_API_NOTICE_ERROR\n     */\n    notice_error_enabled: true\n  },\n\n  /**\n   * Transaction Events\n   *\n   * Transaction events are sent to New Relic Insights. This event data\n   * includes transaction timing, transaction name, and any custom parameters.\n   *\n   * Read more here: http://newrelic.com/insights\n   */\n  transaction_events: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction events.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n\n      /**\n       * Prefix of attributes to exclude in transaction events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in transaction events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n\n    /**\n     * If this is disabled, the agent does not collect, nor try to send,\n     * analytic data.\n     */\n    enabled: true,\n\n    /**\n     * The agent will collect all events up to this number per minute. If\n     * there are more than that, a statistical sampling will be collected.\n     */\n    max_samples_stored: 10000\n  },\n\n  /**\n   * Custom Insights Events\n   *\n   * Custom insights events are JSON object that are sent to New Relic\n   * Insights. You can tell the agent to send your custom events via the\n   * `newrelic.recordCustomEvent()` API. These events are sampled once the max\n   * queue size is reached. You can tune this setting below.\n   *\n   * Read more here: http://newrelic.com/insights\n   */\n  custom_insights_events: {\n    /**\n     * If this is disabled, the agent does not collect, nor try to send, custom\n     * event data.\n     */\n    enabled: true,\n\n    /**\n     * The agent will collect all events up to this number per minute. If there\n     * are more than that, a statistical sampling will be collected. Currently\n     * this uses a priority sampling algorithm.\n     *\n     * By increasing this setting you are both increasing the memory\n     * requirements of the agent as well as increasing the payload to the New\n     * Relic servers. The memory concerns are something you should consider for\n     * your own server's sake. The payload of events is compressed, but if it\n     * grows too large the New Relic servers may reject it.\n     */\n    max_samples_stored: 1000\n  },\n\n  /**\n   * This is used to configure properties about the user's host name.\n   */\n  process_host: {\n    /**\n     * Configurable display name for hosts\n     *\n     * @env NEW_RELIC_PROCESS_HOST_DISPLAY_NAME\n     */\n    display_name: '',\n\n    /**\n     * ip address preference when creating hostnames\n     *\n     * @env NEW_RELIC_IPV_PREFERENCE\n     */\n    ipv_preference: '4'\n  },\n\n  /**\n   * High Security\n   *\n   * High security mode (v2) is a setting which prevents any sensitive data from\n   * being sent to New Relic. The local setting must match the server setting.\n   * If there is a mismatch the agent will log a message and act as if it is\n   * disabled.\n   *\n   * Attributes of high security mode (when enabled):\n   *  * requires SSL\n   *  * does not allow capturing of http params\n   *  * does not allow custom params\n   *\n   * To read more see: https://docs.newrelic.com/docs/subscriptions/high-security\n   */\n  high_security: false,\n\n  /**\n   * Labels\n   *\n   * An object of label names and values that will be applied to the data sent\n   * from this agent. Both label names and label values have a maximum length of\n   * 255 characters. This object should contain at most 64 labels.\n   */\n  labels: {},\n\n  /**\n   * These options control behavior for slow queries, but do not affect sql\n   * nodes in transaction traces.\n   */\n  slow_sql: {\n    /**\n     * Enables and disables `slow_sql` recording.\n     *\n     * @env NEW_RELIC_SLOW_SQL_ENABLED\n     */\n    enabled: false,\n\n    /**\n     * Sets the maximum number of slow query samples that will be collected in a\n     * single harvest cycle.\n     *\n     * @env NEW_RELIC_MAX_SQL_SAMPLES\n     */\n    max_samples: 10\n  },\n\n  /**\n   * Controls behavior of datastore instance metrics.\n   *\n   * @property {bool} [instance_reporting.enabled=true]\n   *  Enables reporting the host and port/path/id of database servers. Default\n   *  is `true`.\n   *\n   * @property {bool} [database_name_reporting.enabled=true]\n   *  Enables reporting of database/schema names. Default is `true`.\n   */\n  datastore_tracer: {\n    instance_reporting: {\n      enabled: true\n    },\n    database_name_reporting: {\n      enabled: true\n    }\n  },\n\n  /**\n   * Controls the behavior of span events produced by the agent.\n   */\n  span_events: {\n    /**\n     * Enables/disables span event generation\n     *\n     * @env NEW_RELIC_SPAN_EVENTS_ENABLED\n     */\n    enabled: true,\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from span events.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n\n      /**\n       * Prefix of attributes to exclude in span events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in span events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    }\n  },\n\n  /**\n   * Controls the behavior of transaction segments produced by the agent.\n   */\n  transaction_segments: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction segments.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n\n      /**\n       * Prefix of attributes to exclude in transaction segments.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n\n      /**\n       * Prefix of attributes to include in transaction segments.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    }\n  },\n\n  /**\n   * Controls the method of cross agent tracing in the agent.\n   * Distributed tracing lets you see the path that a request takes through your\n   * distributed system. Enabling distributed tracing changes the behavior of some\n   * New Relic features, so carefully consult the transition guide before you enable\n   * this feature: https://docs.newrelic.com/docs/transition-guide-distributed-tracing\n   * Default is false.\n   */\n  distributed_tracing: {\n    /**\n     * Enables/disables distributed tracing.\n     *\n     * @env NEW_RELIC_DISTRIBUTED_TRACING_ENABLED\n     */\n    enabled: false\n  },\n\n  /**\n   * Controls the use of cross-application tracing.\n   *\n   * @property {bool} [enabled=true]\n   *  Enables tracing transactions across multiple applications. Default is `true`.\n   */\n  cross_application_tracer: {\n    enabled: true\n  },\n\n  /**\n   * Controls behavior of message broker tracing.\n   *\n   * @property {bool} [segment_parameters.enabled=true]\n   *  Enables reporting parameters on message broker segments.\n   */\n  message_tracer: {\n    segment_parameters: {\n      enabled: true\n    }\n  },\n\n  /**\n   * Specifies whether the agent will be used to monitor serverless functions.\n   * For example: AWS Lambda\n   *\n   * @env NEW_RELIC_SERVERLESS_MODE_ENABLED\n   */\n  serverless_mode: {\n    enabled: process.env.AWS_LAMBDA_FUNCTION_NAME != null\n  },\n  plugins: {\n    /**\n     * Controls usage of the native metrics module which samples VM and event\n     * loop data.\n     */\n    native_metrics: {\n      enabled: true\n    }\n  }\n});","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/config/default.js"],"names":["exports","config","app_name","license_key","security_policies_token","host","port","ssl","proxy","proxy_host","proxy_port","proxy_user","proxy_pass","trusted_account_key","primary_application_id","account_id","certificates","agent_enabled","apdex_t","allow_all_headers","attributes","enabled","exclude","include","include_enabled","filter_cache_limit","diagnostics","code_injector","internal_file_pattern","logging","level","filepath","require","join","process","cwd","audit_log","endpoints","error_collector","ignore_status_codes","capture_events","max_event_samples_stored","expected_classes","expected_messages","expected_status_codes","ignore_classes","ignore_messages","strip_exception_messages","utilization","detect_aws","detect_pcf","detect_azure","detect_docker","detect_gcp","detect_kubernetes","transaction_tracer","transaction_threshold","top_n","record_sql","explain_threshold","hide_internals","rules","name","ignore","enforce_backstop","browser_monitoring","enable","debug","api","custom_parameters_enabled","custom_attributes_enabled","custom_events_enabled","notice_error_enabled","transaction_events","max_samples_stored","custom_insights_events","process_host","display_name","ipv_preference","high_security","labels","slow_sql","max_samples","datastore_tracer","instance_reporting","database_name_reporting","span_events","transaction_segments","distributed_tracing","cross_application_tracer","message_tracer","segment_parameters","serverless_mode","env","AWS_LAMBDA_FUNCTION_NAME","plugins","native_metrics"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * This file includes all of the configuration variables used by the Node.js\n * module. If there's a configurable element of the module and it's not\n * described in here, there's been a terrible mistake.\n */\n\nexports.config = () => ({\n  /**\n   * Array of application names.\n   *\n   * @env NEW_RELIC_APP_NAME\n   */\n  app_name: [],\n  /**\n   * The user's license key. Must be set by per-app configuration file.\n   *\n   * @env NEW_RELIC_LICENSE_KEY\n   */\n  license_key: '',\n  /**\n   *\n   * Enables/Disables security politices.  Paste your security policies\n   * token from the New Relic Admin below.\n   *\n   * @env NEW_RELIC_SECURITY_POLICIES_TOKEN\n   */\n  security_policies_token: '',\n  /**\n   * Hostname for the New Relic collector proxy.\n   *\n   * You shouldn't need to change this.\n   *\n   * @env NEW_RELIC_HOST\n   */\n  host: '',\n  /**\n   * The port on which the collector proxy will be listening.\n   *\n   * You shouldn't need to change this.\n   *\n   * @env NEW_RELIC_PORT\n   */\n  port: 443,\n  /**\n   * Whether or not to use SSL to connect to New Relic's servers.\n   *\n   * NOTE: This option can no longer be disabled.\n   *\n   * @env NEW_RELIC_USE_SSL\n   */\n  ssl: true,\n  /**\n   * Proxy url\n   *\n   * A proxy url can be used in place of setting\n   * proxy_host, proxy_port, proxy_user, and proxy_pass.\n   *\n   * e.g. http://user:pass@host:port/\n   *\n   * Setting proxy will override other proxy settings.\n   *\n   * @env NEW_RELIC_PROXY_URL\n   */\n  proxy: '',\n  /**\n   * Proxy host to use to connect to the internet.\n   *\n   * @env NEW_RELIC_PROXY_HOST\n   */\n  proxy_host: '',\n  /**\n   * Proxy port to use to connect to the internet.\n   *\n   * @env NEW_RELIC_PROXY_PORT\n   */\n  proxy_port: '',\n  /**\n   * Proxy user name when required.\n   *\n   * @env NEW_RELIC_PROXY_USER\n   */\n  proxy_user: '',\n  /**\n   * Proxy password when required.\n   *\n   * @env NEW_RELIC_PROXY_PASS\n   */\n  proxy_pass: '',\n  // Serverless DT config defaults\n  trusted_account_key: null,\n  primary_application_id: null,\n  account_id: null,\n  /**\n   * Custom SSL certificates\n   *\n   * If your proxy uses a custom SSL certificate, you can add the CA text to\n   * this array, one entry per certificate.\n   *\n   * The easiest way to do this is with `fs.readFileSync` e.g.\n   *\n   * certificates: [\n   *   require('fs').readFileSync('custom.crt', 'utf8') // don't forget the utf8\n   * ]\n   *\n   */\n  certificates: [],\n  /**\n   * Whether the module is enabled.\n   *\n   * @env NEW_RELIC_ENABLED\n   */\n  agent_enabled: true,\n  /**\n   * The default Apdex tolerating / threshold value for applications, in\n   * seconds. The default for Node is apdexT to 100 milliseconds, which is\n   * lower than New Relic standard, but Node.js applications tend to be more\n   * latency-sensitive than most.\n   *\n   * NOTE: This setting can not be modified locally. Use server-side configuration\n   * to change your application's apdex.\n   *\n   * @see https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/changing-your-apdex-settings\n   */\n  apdex_t: 0.100,\n\n  /**\n   * When true, all request headers except for those listed in attributes.exclude\n   * will be captured for all traces, unless otherwise specified in a destination's\n   * attributes include/exclude lists.\n   */\n  allow_all_headers: false,\n\n  /**\n   * Attributes are key-value pairs containing information that determines\n   * the properties of an event or transaction.\n   */\n  attributes: {\n    /**\n     * If `true`, enables capture of attributes for all destinations.\n     * If there are specific parameters you want ignored, use `attributes.exclude`.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_ENABLED\n     */\n    enabled: true,\n\n    /**\n     * Prefix of attributes to exclude from all destinations. Allows * as wildcard at end.\n     *\n     * NOTE: If excluding headers, they must be in camelCase form to be filtered.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_EXCLUDE\n     */\n    exclude: [],\n\n    /**\n     * Prefix of attributes to include in all destinations. Allows * as wildcard at end.\n     *\n     * NOTE: If including headers, they must be in camelCase form to be filtered.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_INCLUDE\n     */\n    include: [],\n\n    /**\n     * If `true`, patterns may be added to the `attributes.include`\n     * list.\n     *\n     * @env NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED\n     */\n    include_enabled: true,\n\n    /**\n     * Controls how many attribute include/exclude rule results are cached by\n     * the filter. Increasing this limit will cause greater memory usage and is\n     * only necessary if you have an extremely high variety of attributes.\n     */\n    filter_cache_limit: 1000\n  },\n\n  diagnostics: {\n    code_injector: {\n      enabled: false,\n      internal_file_pattern: /nodejs_agent\\/(?:(?!test))|\\/node_modules\\/(?:@)?newrelic/\n    }\n  },\n\n  logging: {\n    /**\n     * Verbosity of the module's logging. This module uses bunyan\n     * (https://github.com/trentm/node-bunyan) for its logging, and as such the\n     * valid logging levels are 'fatal', 'error', 'warn', 'info', 'debug' and\n     * 'trace'. Logging at levels 'info' and higher is very terse. For support\n     * requests, attaching logs captured at 'trace' level are extremely helpful\n     * in chasing down bugs.\n     *\n     * @env NEW_RELIC_LOG_LEVEL\n     */\n    level: 'info',\n    /**\n     * Where to put the log file -- by default just uses process.cwd +\n     * 'newrelic_agent.log'. A special case is a filepath of 'stdout',\n     * in which case all logging will go to stdout, or 'stderr', in which\n     * case all logging will go to stderr.\n     *\n     * @env NEW_RELIC_LOG\n     */\n    filepath: require('path').join(process.cwd(), 'newrelic_agent.log'),\n    /**\n     * Whether to write to a log file at all\n     *\n     * @env NEW_RELIC_LOG_ENABLED\n     */\n    enabled: true,\n\n    /**\n     * Enables extra debugging at `warn` level. No need to enable except under\n     * specific debugging conditions.\n     */\n    diagnostics: false\n  },\n\n  audit_log: {\n\n    /**\n     * Enables logging of out bound traffic from the Agent to the Collector.\n     * This field is ignored if trace level logging is enabled.\n     * With trace logging, all traffic is logged.\n     *\n     * @env NEW_RELIC_AUDIT_LOG_ENABLED\n     */\n    enabled: false,\n\n    /**\n     * Specify which methods are logged. Used in conjuction with the audit_log flag\n     * If audit_log is enabled and this property is empty, all methods will be logged\n     * Otherwise, if the audit log is enabled, only the methods specified\n     * in the filter will be logged\n     * Methods include: error_data, metric_data, and analytic_event_data\n     *\n     * @env NEW_RELIC_AUDIT_LOG_ENDPOINTS\n     */\n    endpoints: []\n  },\n  /**\n   * Whether to collect & submit error traces to New Relic.\n   *\n   * @env NEW_RELIC_ERROR_COLLECTOR_ENABLED\n   */\n  error_collector: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from error collection.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n      /**\n       * Prefix of attributes to exclude from error collection.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in error collection.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n    /**\n     * Disabling the error tracer just means that errors aren't collected\n     * and sent to New Relic -- it DOES NOT remove any instrumentation.\n     */\n    enabled: true,\n    /**\n     * List of HTTP error status codes the error tracer should disregard.\n     * Ignoring a status code means that the transaction is not renamed to\n     * match the code, and the request is not treated as an error by the error\n     * collector.\n     *\n     * NOTE: This configuration value has no effect on errors recorded using\n     * `noticeError()`.\n     *\n     * Defaults to 404 NOT FOUND.\n     *\n     * @env NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES\n     */\n    ignore_status_codes: [404],\n    /**\n     * Whether error events are collected.\n     */\n    capture_events: true,\n    /**\n     * The agent will collect all error events up to this number per minute.\n     * If there are more than that, a statistical sampling will be collected.\n     * Currently this uses a priority sampling algorithm.\n     *\n     * By increasing this setting you are both increasing the memory\n     * requirements of the agent as well as increasing the payload to the New\n     * Relic servers. The memory concerns are something you should consider for\n     * your own server's sake. The payload of events is compressed, but if it\n     * grows too large the New Relic servers may reject it.\n     */\n    max_event_samples_stored: 100,\n\n    expected_classes: [],\n    expected_messages: {},\n    expected_status_codes: [],\n    ignore_classes:[],\n    ignore_messages:{}\n  },\n  /**\n   * Error message redaction\n   *\n   * Options regarding how the agent handles the redaction of error messages.\n   *\n   */\n  strip_exception_messages: {\n    /**\n     * When `true`, the agent will redact the messages of captured\n     * errors.\n     *\n     *  @env NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED\n     */\n    enabled: false\n  },\n  /**\n   * Options regarding collecting system information. Used for system\n   * utilization based pricing scheme.\n   */\n  utilization: {\n    /**\n     * This flag dictates whether the agent attempts to reach out to AWS\n     * to get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_AWS\n     */\n    detect_aws: true,\n    /**\n     * This flag dictates whether the agent attempts to detect if the\n     * the process is running on Pivotal Cloud Foundary.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_PCF\n     */\n    detect_pcf: true,\n    /**\n     * This flag dictates whether the agent attempts to reach out to Azure to\n     * get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_AZURE\n     */\n    detect_azure: true,\n    /**\n     * This flag dictates whether the agent attempts to read files\n     * to get info about the container the process is running in.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_DOCKER\n     */\n    detect_docker: true,\n\n    /**\n     * This flag dictates whether the agent attempts to reach out to GCP\n     * to get info about the vm the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_GCP\n     */\n    detect_gcp: true,\n\n    /**\n     * This flag dictates whether the agent attempts to reach out to\n     * Kubernetes to get info about the container the process is running on.\n     *\n     * @env NEW_RELIC_UTILIZATION_DETECT_KUBERNETES\n     */\n    detect_kubernetes: true\n  },\n  transaction_tracer: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction traces.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n      /**\n       * Prefix of attributes to exclude from transaction traces.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in transaction traces.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n    /**\n     * Whether to collect & submit slow transaction traces to New Relic. The\n     * instrumentation is loaded regardless of this setting, as it's necessary\n     * to gather metrics. Disable the agent to prevent the instrumentation from\n     * loading.\n     *\n     * @env NEW_RELIC_TRACER_ENABLED\n     */\n    enabled: true,\n    /**\n     * The duration at below which the slow transaction tracer should collect a\n     * transaction trace. If set to 'apdex_f', the threshold will be set to\n     * 4 * apdex_t, which with a default apdex_t value of 500 milliseconds will\n     * be 2 seconds.\n     *\n     * If a time is provided, it is set in seconds.\n     *\n     * @env NEW_RELIC_TRACER_THRESHOLD\n     */\n    transaction_threshold: 'apdex_f',\n    /**\n     * Increase this parameter to increase the diversity of the slow\n     * transaction traces recorded by your application over time. Confused?\n     * Read on.\n     *\n     * Transactions are named based on the request (see the README for the\n     * details of how requests are mapped to transactions), and top_n refers to\n     * the \"top n slowest transactions\" grouped by these names. The module will\n     * only replace a recorded trace with a new trace if the new trace is\n     * slower than the previous slowest trace of that name. The default value\n     * for this setting is 20, as the transaction trace view page also defaults\n     * to showing the 20 slowest transactions.\n     *\n     * If you want to record the absolute slowest transaction over the last\n     * minute, set top_n to 0 or 1. This used to be the default, and has a\n     * problem in that it will allow one very slow route to dominate your slow\n     * transaction traces.\n     *\n     * The module will always record at least 5 different slow transactions in\n     * the reporting periods after it starts up, and will reset its internal\n     * slow trace aggregator if no slow transactions have been recorded for the\n     * last 5 harvest cycles, restarting the aggregation process.\n     *\n     * @env NEW_RELIC_TRACER_TOP_N\n     */\n    top_n: 20,\n\n    /**\n     * This option affects both slow-queries and record_sql for transaction\n     * traces.  It can have one of 3 values: 'off', 'obfuscated' or 'raw'\n     * When it is 'off' no slow queries will be captured, and backtraces\n     * and sql will not be included in transaction traces.  If it is 'raw'\n     * or 'obfuscated' and other criteria (slow_sql.enabled etc) are met\n     * for a query. The raw or obfuscated sql will be included in the\n     * transaction trace and a slow query sample will be collected.\n     */\n    record_sql: 'off',\n\n    /**\n     * This option affects both slow-queries and record_sql for transaction\n     * traces.  This is the minimum duration a query must take (in ms) for it\n     * to be considered for for slow query and inclusion in transaction traces.\n     */\n    explain_threshold: 500,\n\n    /**\n     * This option controls the enumerability of internal properties the agent\n     * puts on application objects such as requests and promises while tracing.\n     * When `true`, these properties will be configured with `enumerable: false`\n     * using `Object.defineProperty`.\n     *\n     * XXX: This can have a significant impact on application performance, so if\n     * this is not necessary for your application we recommend disabling the\n     * feature.\n     *\n     * @env NEW_RELIC_HIDE_INTERNALS\n     */\n    hide_internals: true\n  },\n  /**\n   * Rules for naming or ignoring transactions.\n   */\n  rules: {\n    /**\n     * A list of rules of the format {pattern: 'pattern', name: 'name'} for\n     * matching incoming request URLs and naming the associated New Relic\n     * transactions. Both pattern and name are required. Additional attributes\n     * are ignored. Patterns may have capture groups (following JavaScript\n     * conventions), and names will use $1-style replacement strings. See\n     * the documentation for addNamingRule for important caveats.\n     *\n     * @env NEW_RELIC_NAMING_RULES\n     */\n    name: [],\n    /**\n     * A list of patterns for matching incoming request URLs to be ignored by\n     * the agent. Patterns may be strings or regular expressions.\n     *\n     * By default, socket.io long-polling is ignored.\n     *\n     * @env NEW_RELIC_IGNORING_RULES\n     */\n    ignore: [\n      '^\\/socket\\.io\\/.*\\/xhr-polling/'\n    ]\n  },\n  /**\n   * By default, any transactions that are not affected by other bits of\n   * naming logic (the API, rules, or metric normalization rules) will\n   * have their names set to 'NormalizedUri/*'. Setting this value to\n   * false will set them instead to Uri/path/to/resource. Don't change\n   * this setting unless you understand the implications of New Relic's\n   * metric grouping issues and are confident your application isn't going\n   * to run afoul of them. Your application could end up getting black holed!\n   * Nobody wants that.\n   *\n   * @env NEW_RELIC_ENFORCE_BACKSTOP\n   */\n  enforce_backstop: true,\n  /**\n   * Browser Monitoring\n   *\n   * Browser monitoring lets you correlate transactions between the server and browser\n   * giving you accurate data on how long a page request takes, from request,\n   * through the server response, up until the actual page render completes.\n   */\n  browser_monitoring: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from browser monitoring.\n       *\n       * @env NEW_RELIC_BROWSER_MONITOR_ATTRIBUTES\n       */\n      enabled: false,\n      /**\n       * Prefix of attributes to exclude from browser monitoring.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in browser monitoring.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n    /**\n     * Enable browser monitoring header generation.\n     *\n     * This does not auto-instrument, rather it enables the agent to generate headers.\n     * The newrelic module can generate the appropriate <script> header, but you must\n     * inject the header yourself, or use a module that does so.\n     *\n     * Usage:\n     *\n     *     var newrelic = require('newrelic');\n     *\n     *     router.get('/', function (req, res) {\n     *       var header = newrelic.getBrowserTimingHeader();\n     *       res.write(header)\n     *       // write the rest of the page\n     *     });\n     *\n     * This generates the <script>...</script> header necessary for Browser Monitoring\n     * This script must be manually injected into your templates, as high as possible\n     * in the header, but _after_ any X-UA-COMPATIBLE HTTP-EQUIV meta tags.\n     * Otherwise you may hurt IE!\n     *\n     * This method must be called _during_ a transaction, and must be called every\n     * time you want to generate the headers.\n     *\n     * Do *not* reuse the headers between users, or even between requests.\n     *\n     * @env NEW_RELIC_BROWSER_MONITOR_ENABLE\n     */\n    enable: true,\n    /**\n     * Request un-minified sources from the server.\n     *\n     * @env NEW_RELIC_BROWSER_MONITOR_DEBUG\n     */\n    debug: false\n  },\n  /**\n   * API Configuration\n   *\n   * Some API end points can be turned off via configuration settings to\n   * allow for more flexible security options. All API configuration\n   * options are disabled when high-security mode is enabled.\n   */\n  api: {\n    /**\n     * Deprecated. Please use `api.custom_attributes_enabled` instead.\n     *\n     * @env NEW_RELIC_API_CUSTOM_PARAMETERS\n     */\n    // TODO: This somehow survived the v5 cut, even though\n    // it's already removed from docs site. Remove in v6.\n    custom_parameters_enabled: true,\n    /**\n     * Controls for the `API.addCustomAttribute` method.\n     *\n     * @env NEW_RELIC_API_CUSTOM_ATTRIBUTES\n     */\n    custom_attributes_enabled: true,\n    /**\n     * Controls for the `API.recordCustomEvent` method.\n     *\n     * @env NEW_RELIC_API_CUSTOM_EVENTS\n     */\n    custom_events_enabled: true,\n    /**\n     * Controls for the `API.noticeError` method.\n     *\n     * @env NEW_RELIC_API_NOTICE_ERROR\n     */\n    notice_error_enabled: true,\n  },\n  /**\n   * Transaction Events\n   *\n   * Transaction events are sent to New Relic Insights. This event data\n   * includes transaction timing, transaction name, and any custom parameters.\n   *\n   * Read more here: http://newrelic.com/insights\n   */\n  transaction_events: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction events.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n      /**\n       * Prefix of attributes to exclude in transaction events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in transaction events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    },\n    /**\n     * If this is disabled, the agent does not collect, nor try to send,\n     * analytic data.\n     */\n    enabled: true,\n    /**\n     * The agent will collect all events up to this number per minute. If\n     * there are more than that, a statistical sampling will be collected.\n     */\n    max_samples_stored: 10000\n  },\n\n  /**\n   * Custom Insights Events\n   *\n   * Custom insights events are JSON object that are sent to New Relic\n   * Insights. You can tell the agent to send your custom events via the\n   * `newrelic.recordCustomEvent()` API. These events are sampled once the max\n   * queue size is reached. You can tune this setting below.\n   *\n   * Read more here: http://newrelic.com/insights\n   */\n  custom_insights_events: {\n    /**\n     * If this is disabled, the agent does not collect, nor try to send, custom\n     * event data.\n     */\n    enabled: true,\n    /**\n     * The agent will collect all events up to this number per minute. If there\n     * are more than that, a statistical sampling will be collected. Currently\n     * this uses a priority sampling algorithm.\n     *\n     * By increasing this setting you are both increasing the memory\n     * requirements of the agent as well as increasing the payload to the New\n     * Relic servers. The memory concerns are something you should consider for\n     * your own server's sake. The payload of events is compressed, but if it\n     * grows too large the New Relic servers may reject it.\n     */\n    max_samples_stored: 1000\n  },\n  /**\n   * This is used to configure properties about the user's host name.\n   */\n  process_host: {\n    /**\n     * Configurable display name for hosts\n     *\n     * @env NEW_RELIC_PROCESS_HOST_DISPLAY_NAME\n     */\n    display_name: '',\n    /**\n     * ip address preference when creating hostnames\n     *\n     * @env NEW_RELIC_IPV_PREFERENCE\n     */\n    ipv_preference: '4'\n  },\n\n  /**\n   * High Security\n   *\n   * High security mode (v2) is a setting which prevents any sensitive data from\n   * being sent to New Relic. The local setting must match the server setting.\n   * If there is a mismatch the agent will log a message and act as if it is\n   * disabled.\n   *\n   * Attributes of high security mode (when enabled):\n   *  * requires SSL\n   *  * does not allow capturing of http params\n   *  * does not allow custom params\n   *\n   * To read more see: https://docs.newrelic.com/docs/subscriptions/high-security\n   */\n  high_security: false,\n\n  /**\n   * Labels\n   *\n   * An object of label names and values that will be applied to the data sent\n   * from this agent. Both label names and label values have a maximum length of\n   * 255 characters. This object should contain at most 64 labels.\n   */\n  labels: {},\n\n  /**\n   * These options control behavior for slow queries, but do not affect sql\n   * nodes in transaction traces.\n   */\n  slow_sql: {\n    /**\n     * Enables and disables `slow_sql` recording.\n     *\n     * @env NEW_RELIC_SLOW_SQL_ENABLED\n     */\n    enabled: false,\n\n    /**\n     * Sets the maximum number of slow query samples that will be collected in a\n     * single harvest cycle.\n     *\n     * @env NEW_RELIC_MAX_SQL_SAMPLES\n     */\n    max_samples: 10\n  },\n\n  /**\n   * Controls behavior of datastore instance metrics.\n   *\n   * @property {bool} [instance_reporting.enabled=true]\n   *  Enables reporting the host and port/path/id of database servers. Default\n   *  is `true`.\n   *\n   * @property {bool} [database_name_reporting.enabled=true]\n   *  Enables reporting of database/schema names. Default is `true`.\n   */\n  datastore_tracer: {\n    instance_reporting: {enabled: true},\n    database_name_reporting: {enabled: true}\n  },\n\n  /**\n   * Controls the behavior of span events produced by the agent.\n   */\n  span_events: {\n    /**\n     * Enables/disables span event generation\n     *\n     * @env NEW_RELIC_SPAN_EVENTS_ENABLED\n     */\n    enabled: true,\n\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from span events.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n      /**\n       * Prefix of attributes to exclude in span events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in span events.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    }\n  },\n\n  /**\n   * Controls the behavior of transaction segments produced by the agent.\n   */\n  transaction_segments: {\n    attributes: {\n      /**\n       * If `true`, the agent captures attributes from transaction segments.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED\n       */\n      enabled: true,\n      /**\n       * Prefix of attributes to exclude in transaction segments.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE\n       */\n      exclude: [],\n      /**\n       * Prefix of attributes to include in transaction segments.\n       * Allows * as wildcard at end.\n       *\n       * @env NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE\n       */\n      include: []\n    }\n  },\n\n  /**\n   * Controls the method of cross agent tracing in the agent.\n   * Distributed tracing lets you see the path that a request takes through your\n   * distributed system. Enabling distributed tracing changes the behavior of some\n   * New Relic features, so carefully consult the transition guide before you enable\n   * this feature: https://docs.newrelic.com/docs/transition-guide-distributed-tracing\n   * Default is false.\n   */\n  distributed_tracing: {\n    /**\n     * Enables/disables distributed tracing.\n     *\n     * @env NEW_RELIC_DISTRIBUTED_TRACING_ENABLED\n     */\n    enabled: false\n  },\n\n  /**\n   * Controls the use of cross-application tracing.\n   *\n   * @property {bool} [enabled=true]\n   *  Enables tracing transactions across multiple applications. Default is `true`.\n   */\n  cross_application_tracer: {enabled: true},\n\n  /**\n   * Controls behavior of message broker tracing.\n   *\n   * @property {bool} [segment_parameters.enabled=true]\n   *  Enables reporting parameters on message broker segments.\n   */\n  message_tracer: {\n    segment_parameters: {enabled: true}\n  },\n\n  /**\n   * Specifies whether the agent will be used to monitor serverless functions.\n   * For example: AWS Lambda\n   *\n   * @env NEW_RELIC_SERVERLESS_MODE_ENABLED\n   */\n  serverless_mode: {\n    enabled: process.env.AWS_LAMBDA_FUNCTION_NAME != null\n  },\n\n  plugins: {\n    /**\n     * Controls usage of the native metrics module which samples VM and event\n     * loop data.\n     */\n    native_metrics: {enabled: true}\n  },\n})\n"]},"metadata":{},"sourceType":"script"}