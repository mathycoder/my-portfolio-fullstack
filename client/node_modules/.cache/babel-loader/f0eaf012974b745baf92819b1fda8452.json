{"ast":null,"code":"'use strict';\n\nconst obfuscate = require('../util/sql/obfuscate');\n\nconst crypto = require('crypto');\n\nconst path = require('path');\n\nconst NR_ROOT = path.resolve(__dirname, '..');\n\nfunction SlowQuery(segment, type, query, trace) {\n  this.obfuscated = obfuscate(query, type);\n  this.normalized = this.obfuscated.replace(/\\?\\s*,\\s*|\\s*/g, '');\n  this.id = normalizedHash(this.normalized);\n  this.segment = segment;\n  this.query = query;\n  this.metric = segment.name;\n  this.trace = formatTrace(trace);\n  this.duration = segment.getDurationInMillis();\n}\n\nfunction normalizedHash(value) {\n  // We leverage the last 16 hex digits of which would mostly fit in a long and\n  // rely on parseInt to drop bits that do not fit in a JS number\n  return parseInt(crypto.createHash('sha1').update(value).digest('hex').slice(-16), 16);\n}\n\nfunction formatTrace(trace) {\n  // remove error message and instrumentation frames from stack trace\n  return trace ? trace.split('\\n').slice(1).filter(notNR).join('\\n') : '';\n}\n\nfunction notNR(frame) {\n  return frame.indexOf(NR_ROOT) === -1;\n}\n\nmodule.exports = SlowQuery;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/db/slow-query.js"],"names":["obfuscate","require","crypto","path","NR_ROOT","resolve","__dirname","SlowQuery","segment","type","query","trace","obfuscated","normalized","replace","id","normalizedHash","metric","name","formatTrace","duration","getDurationInMillis","value","parseInt","createHash","update","digest","slice","split","filter","notNR","join","frame","indexOf","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAaC,SAAb,EAAwB,IAAxB,CAAhB;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgD;AAC9C,OAAKC,UAAL,GAAkBZ,SAAS,CAACU,KAAD,EAAQD,IAAR,CAA3B;AACA,OAAKI,UAAL,GAAkB,KAAKD,UAAL,CAAgBE,OAAhB,CAAwB,gBAAxB,EAA0C,EAA1C,CAAlB;AACA,OAAKC,EAAL,GAAUC,cAAc,CAAC,KAAKH,UAAN,CAAxB;AACA,OAAKL,OAAL,GAAeA,OAAf;AACA,OAAKE,KAAL,GAAaA,KAAb;AACA,OAAKO,MAAL,GAAcT,OAAO,CAACU,IAAtB;AACA,OAAKP,KAAL,GAAaQ,WAAW,CAACR,KAAD,CAAxB;AACA,OAAKS,QAAL,GAAgBZ,OAAO,CAACa,mBAAR,EAAhB;AACD;;AAED,SAASL,cAAT,CAAwBM,KAAxB,EAA+B;AAC7B;AACA;AACA,SAAOC,QAAQ,CAACrB,MAAM,CAACsB,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCH,KAAjC,EAAwCI,MAAxC,CAA+C,KAA/C,EAAsDC,KAAtD,CAA4D,CAAC,EAA7D,CAAD,EAAmE,EAAnE,CAAf;AACD;;AAED,SAASR,WAAT,CAAqBR,KAArB,EAA4B;AAC1B;AACA,SAAOA,KAAK,GAAGA,KAAK,CAACiB,KAAN,CAAY,IAAZ,EAAkBD,KAAlB,CAAwB,CAAxB,EAA2BE,MAA3B,CAAkCC,KAAlC,EAAyCC,IAAzC,CAA8C,IAA9C,CAAH,GAAyD,EAArE;AACD;;AAED,SAASD,KAAT,CAAeE,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,OAAN,CAAc7B,OAAd,MAA2B,CAAC,CAAnC;AACD;;AAED8B,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["'use strict'\n\nconst obfuscate = require('../util/sql/obfuscate')\nconst crypto = require('crypto')\nconst path = require('path')\nconst NR_ROOT = path.resolve(__dirname, '..')\n\nfunction SlowQuery(segment, type, query, trace) {\n  this.obfuscated = obfuscate(query, type)\n  this.normalized = this.obfuscated.replace(/\\?\\s*,\\s*|\\s*/g, '')\n  this.id = normalizedHash(this.normalized)\n  this.segment = segment\n  this.query = query\n  this.metric = segment.name\n  this.trace = formatTrace(trace)\n  this.duration = segment.getDurationInMillis()\n}\n\nfunction normalizedHash(value) {\n  // We leverage the last 16 hex digits of which would mostly fit in a long and\n  // rely on parseInt to drop bits that do not fit in a JS number\n  return parseInt(crypto.createHash('sha1').update(value).digest('hex').slice(-16), 16)\n}\n\nfunction formatTrace(trace) {\n  // remove error message and instrumentation frames from stack trace\n  return trace ? trace.split('\\n').slice(1).filter(notNR).join('\\n') : ''\n}\n\nfunction notNR(frame) {\n  return frame.indexOf(NR_ROOT) === -1\n}\n\nmodule.exports = SlowQuery\n"]},"metadata":{},"sourceType":"script"}