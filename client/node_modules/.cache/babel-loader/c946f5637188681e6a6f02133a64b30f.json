{"ast":null,"code":"'use strict';\n\nvar a = require('async');\n\nvar path = require('path');\n\nvar fs = require('./util/unwrapped-core').fs;\n\nvar os = require('os');\n\nvar logger = require('./logger').child({\n  component: 'environment'\n});\n\nvar stringify = require('json-stringify-safe'); // As of 1.7.0 you can no longer dynamically link v8\n// https://github.com/nodejs/io.js/commit/d726a177ed\n\n\nvar remapping = {\n  node_install_npm: \"npm installed?\",\n  node_install_waf: \"WAF build system installed?\",\n  node_use_openssl: \"OpenSSL support?\",\n  node_shared_openssl: \"Dynamically linked to OpenSSL?\",\n  node_shared_v8: \"Dynamically linked to V8?\",\n  node_shared_zlib: \"Dynamically linked to Zlib?\",\n  node_use_dtrace: \"DTrace support?\",\n  node_use_etw: \"Event Tracing for Windows (ETW) support?\"\n};\nvar settings = Object.create(null);\n/**\n * Fetches the setting of the given name, defaulting to an empty array.\n *\n * @param {string} name - The name of the setting to look for.\n *\n * @return {Array.<string>} An array of values matching that name.\n */\n\nfunction getSetting(name) {\n  return settings[name] || [];\n}\n/**\n * Add a setting to the module's shared settings object.\n *\n * @param {string} name   - The name of the setting value being added.\n * @param {string} value  - The value to add or the setting.\n */\n\n\nfunction addSetting(name, value) {\n  if (!settings[name]) {\n    settings[name] = [value];\n  } else if (settings[name].indexOf(value) === -1) {\n    settings[name].push(value);\n  }\n}\n/**\n * Remove settings with the given name.\n *\n * @param {string} name - The name of the setting to remove.\n */\n\n\nfunction clearSetting(name) {\n  delete settings[name];\n}\n/**\n * Build up a list of top-level packages available to an application relative to\n * the provided root.\n *\n * @param {string}    root          - Path to start listing packages from.\n * @param {Array}     [packages=[]] - Array to append found packages to.\n * @param {function}  callback      - Callback function.\n *\n * @return {Array} List of packages.\n */\n\n\nfunction listPackages(root, packages, callback) {\n  // listPackages(root, callback)\n  if (typeof packages === 'function') {\n    callback = packages;\n    packages = [];\n  }\n\n  _log('Listing packages in %s', root);\n\n  a.waterfall([a.apply(fs.readdir, root), function iterateDirs(dirs, cb) {\n    a.eachLimit(dirs, 2, forEachDir, cb);\n  }], function onAllDirsRead(err) {\n    _log('Done listing packages in %s', root);\n\n    if (err) {\n      logger.trace(err, 'Could not list packages in %s (probably not an error)', root);\n      return callback();\n    }\n\n    callback(null, packages);\n  });\n\n  function forEachDir(dir, cb) {\n    _log('Checking package %s in %s', dir, root); // Skip npm's binary directory where it stores executables.\n\n\n    if (dir === '.bin') {\n      _log('Skipping .bin directory');\n\n      return setImmediate(cb);\n    } // Recurse into module scopes.\n\n\n    if (dir[0] === '@') {\n      logger.trace('Recursing into scoped module directory %s', dir);\n      return listPackages(path.resolve(root, dir), packages, cb);\n    } // Read the package and pull out the name and version of it.\n\n\n    var pkg = path.resolve(root, dir, 'package.json');\n    fs.readFile(pkg, function onPackageRead(err, pkgFile) {\n      _log('Read package at %s', pkg);\n\n      if (err) {\n        logger.debug(err, 'Could not read %s.', pkg);\n        return cb();\n      }\n\n      var name = null;\n      var version = null;\n\n      try {\n        var pkgData = JSON.parse(pkgFile);\n        name = pkgData.name;\n        version = pkgData.version;\n      } catch (e) {\n        logger.debug(err, 'Could not parse package file %s.', pkg);\n      }\n\n      packages.push([name || dir, version || '<unknown>']);\n\n      _log('Package from %s added (%s@%s)', pkg, name, version);\n\n      cb();\n    });\n  }\n}\n/**\n * Build up a list of dependencies from a given node_module root.\n *\n * @param {string}    root        - Path to start listing dependencies from.\n * @param {Array}     [children]  - Array to append found dependencies to.\n * @param {object}    [visited]   - Map of visited directories.\n * @param {function}  callback    - Callback to send deps to.\n *\n * @return {Array} List of dependencies.\n */\n\n\nfunction listDependencies(root, children, visited, callback) {\n  // listDependencies(root, callback)\n  if (typeof children === 'function') {\n    callback = children;\n    children = [];\n    visited = Object.create(null);\n  } // listDependencies(root, {children|visited}, callback)\n\n\n  if (typeof visited === 'function') {\n    callback = visited;\n\n    if (Array.isArray(children)) {\n      visited = Object.create(null);\n    } else {\n      visited = children;\n      children = [];\n    }\n  }\n\n  _log('Listing dependencies in %s', root);\n\n  a.waterfall([a.apply(fs.readdir, root), function iterateDirs(dirs, cb) {\n    a.eachLimit(dirs, 2, forEachEntry, cb);\n  }], function onAllDirsRead(err) {\n    _log('Done listing dependencies in %s', root);\n\n    if (err) {\n      logger.trace(err, 'Could not read directories in %s (probably not an error)', root);\n      return callback();\n    }\n\n    callback(null, children);\n  });\n\n  function forEachEntry(entry, cb) {\n    _log('Checking dependencies in %s (%s)', entry, root);\n\n    var candidate = path.resolve(root, entry, 'node_modules');\n    fs.realpath(candidate, function realPathCb(err, realCandidate) {\n      _log('Resolved %s to real path %s', candidate, realCandidate);\n\n      if (err) {\n        // Don't care to log about files that don't exist.\n        if (err.code !== 'ENOENT') {\n          logger.debug(err, 'Failed to resolve candidate real path %s', candidate);\n        }\n\n        _log(err, 'Real path for %s failed', candidate);\n\n        return cb();\n      } // Make sure we haven't been to this directory before.\n\n\n      if (visited[realCandidate]) {\n        logger.trace('Not revisiting %s (from %s)', realCandidate, candidate);\n        return cb();\n      }\n\n      visited[realCandidate] = true; // Load the packages and dependencies for this directory.\n\n      a.series([a.apply(listPackages, realCandidate, children), a.apply(listDependencies, realCandidate, children, visited)], function onRecurseListComplete(loadErr) {\n        _log('Done with dependencies in %s', realCandidate);\n\n        if (loadErr) {\n          logger.debug(loadErr, 'Failed to list dependencies in %s', realCandidate);\n        }\n\n        cb();\n      });\n    });\n  }\n}\n/**\n * Build up a list of packages, starting from the current directory.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\n\n\nfunction getLocalPackages(callback) {\n  var packages = [];\n  var dependencies = [];\n  var candidate = process.cwd();\n  var visited = Object.create(null);\n\n  _log('Getting local packages');\n\n  a.whilst(function checkCandidate() {\n    return candidate;\n  }, function iterate(cb) {\n    _log('Checking for local packages in %s', candidate);\n\n    var root = path.resolve(candidate, 'node_modules');\n    a.series([a.apply(listPackages, root, packages), a.apply(listDependencies, root, dependencies, visited)], function onListComplete(err) {\n      _log('Done checking for local packages in %s', candidate);\n\n      var last = candidate;\n      candidate = path.dirname(candidate);\n\n      if (last === candidate) {\n        candidate = null;\n      }\n\n      cb(err);\n    });\n  }, function whileComplete(err) {\n    _log('Done getting local packages');\n\n    if (err) {\n      callback(err);\n    } else {\n      callback(null, {\n        packages: packages,\n        dependencies: dependencies\n      });\n    }\n  });\n}\n/**\n * Generic method for getting packages and dependencies relative to a\n * provided root directory.\n *\n * @param {string} root - Where to start looking -- doesn't add node_modules.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\n\n\nfunction getPackages(root, cb) {\n  var packages = [];\n  var dependencies = [];\n\n  _log('Getting packages from %s', root);\n\n  a.series([a.apply(listPackages, root, packages), a.apply(listDependencies, root, dependencies)], function onListComplete(err) {\n    _log('Done getting packages from %s', root);\n\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, {\n        packages: packages,\n        dependencies: dependencies\n      });\n    }\n  });\n}\n/**\n * Generate a list of globally-installed packages, if available / accessible\n * via the environment.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\n\n\nfunction getGlobalPackages(cb) {\n  _log('Getting global packages');\n\n  if (process.config && process.config.variables) {\n    var prefix = process.config.variables.node_prefix;\n\n    if (prefix) {\n      var root = path.resolve(prefix, 'lib', 'node_modules');\n\n      _log('Getting global packages from %s', root);\n\n      return getPackages(root, cb);\n    }\n  }\n\n  _log('No global packages to get');\n\n  setImmediate(cb, null, {\n    packages: [],\n    dependencies: []\n  });\n}\n/**\n * Take a list of packages and reduce it to a list of pairs serialized\n * to JSON (to simplify things on the collector end) where each\n * package appears at most once, with all the versions joined into a\n * comma-delimited list.\n *\n * @return {Array.<string[]>} Sorted list of [name, version] pairs.\n */\n\n\nfunction flattenVersions(packages) {\n  var info = Object.create(null);\n  packages.forEach(function cb_forEach(pair) {\n    var p = pair[0];\n    var v = pair[1];\n\n    if (info[p]) {\n      if (info[p].indexOf(v) < 0) info[p].push(v);\n    } else {\n      info[p] = [v];\n    }\n  });\n  return Object.keys(info).map(function cb_map(key) {\n    return [key, info[key].join(', ')];\n  }).sort().map(function cb_map(pair) {\n    try {\n      return stringify(pair);\n    } catch (err) {\n      logger.debug(err, 'Unabled to stringify package version');\n      return '<unknown>';\n    }\n  });\n}\n/**\n * There are a bunch of settings generated at build time that are useful to\n * know for troubleshooting purposes. These settings are only available in 0.7\n * and up.\n *\n * This function works entirely via side effects using the\n * addSetting function.\n */\n\n\nfunction remapConfigSettings() {\n  if (process.config && process.config.variables) {\n    var variables = process.config.variables;\n    Object.keys(variables).forEach(function cb_forEach(key) {\n      if (remapping[key]) {\n        var value = variables[key];\n        if (value === true || value === 1) value = 'yes';\n        if (value === false || value === 0) value = 'no';\n        addSetting(remapping[key], value);\n      }\n    });\n  }\n}\n\nfunction getOtherPackages(callback) {\n  _log('Getting other packages');\n\n  var other = {\n    packages: [],\n    dependencies: []\n  };\n\n  if (!process.env.NODE_PATH) {\n    return callback(null, other);\n  }\n\n  var paths;\n\n  if (process.platform === 'win32') {\n    // why. WHY.\n    paths = process.env.NODE_PATH.split(';');\n  } else {\n    paths = process.env.NODE_PATH.split(':');\n  }\n\n  _log('Looking for other packages in %j', paths);\n\n  a.eachLimit(paths, 2, function listEachOtherPackage(nodePath, cb) {\n    if (nodePath[0] !== '/') nodePath = path.resolve(process.cwd(), nodePath);\n\n    _log('Getting other packages from %s', nodePath);\n\n    getPackages(nodePath, function onGetPackageFinish(err, nextSet) {\n      _log('Done getting other packages from %s', nodePath);\n\n      if (!err && nextSet) {\n        other.packages.push.apply(other.packages, nextSet.packages);\n        other.dependencies.push.apply(other.dependencies, nextSet.dependencies);\n      }\n\n      cb(err);\n    });\n  }, function onOtherFinish(err) {\n    _log('Done getting other packages');\n\n    callback(err, other);\n  });\n}\n\nfunction getHomePackages(cb) {\n  var homeDir = null;\n\n  if (process.platform === 'win32') {\n    if (process.env.USERDIR) {\n      homeDir = process.env.USERDIR;\n    }\n  } else if (process.env.HOME) {\n    homeDir = process.env.HOME;\n  }\n\n  _log('Getting home packages from %s', homeDir);\n\n  if (!homeDir) {\n    return cb(null, null);\n  }\n\n  a.mapSeries({\n    home: path.resolve(homeDir, '.node_modules'),\n    homeOld: path.resolve(homeDir, '.node_libraries')\n  }, getPackages, function onHomeFinish(err, packages) {\n    _log('Done getting home packages from %s', homeDir);\n\n    cb(err, packages);\n  });\n}\n/**\n * Scrape the list of packages, following the algorithm as described in the\n * node module page:\n *\n * http://nodejs.org/docs/latest/api/modules.html\n *\n * This function works entirely via side effects using the addSetting\n * function.\n */\n\n\nfunction findPackages(cb) {\n  _log('Finding all packages');\n\n  a.parallelLimit({\n    local: time(getLocalPackages),\n    global: time(getGlobalPackages),\n    other: time(getOtherPackages),\n    home: time(getHomePackages)\n  }, 2, function onPackageComplete(err, data) {\n    _log('Done finding all packages');\n\n    if (err) {\n      return cb(err);\n    }\n\n    var packages = data.local.packages;\n    packages.push.apply(packages, data.global.packages);\n    packages.push.apply(packages, data.other.packages);\n    var dependencies = data.local.dependencies;\n    dependencies.push.apply(dependencies, data.global.dependencies);\n    dependencies.push.apply(dependencies, data.other.dependencies);\n\n    if (data.home) {\n      if (data.home.home) {\n        packages.unshift.apply(packages, data.home.home.packages);\n        dependencies.unshift.apply(dependencies, data.home.home.dependencies);\n      }\n\n      if (data.home.homeOld) {\n        packages.unshift.apply(packages, data.home.homeOld.packages);\n        dependencies.unshift.apply(dependencies, data.home.homeOld.dependencies);\n      }\n    }\n\n    addSetting('Packages', flattenVersions(packages));\n    addSetting('Dependencies', flattenVersions(dependencies));\n    cb();\n  });\n}\n\nfunction time(fn) {\n  var name = fn.name;\n  return function timeWrapper(cb) {\n    var start = Date.now();\n    logger.trace('Starting %s', name);\n    return fn(function wrappedCb() {\n      var end = Date.now();\n      logger.trace('Finished %s in %dms', name, end - start);\n      cb.apply(this, arguments);\n    });\n  };\n}\n/**\n * Settings actually get scraped below.\n */\n\n\nfunction gatherEnv() {\n  addSetting('Processors', os.cpus().length);\n  addSetting('OS', os.type());\n  addSetting('OS version', os.release());\n  addSetting('Node.js version', process.version);\n  addSetting('Architecture', process.arch);\n\n  if ('NODE_ENV' in process.env) {\n    addSetting('NODE_ENV', process.env.NODE_ENV);\n  }\n}\n\nfunction refreshSyncOnly() {\n  // gather persisted settings\n  var framework = getSetting('Framework');\n  var dispatcher = getSetting('Dispatcher');\n  var dispatcherVersion = getSetting('Dispatcher Version'); // clearing and rebuilding a global variable\n\n  settings = Object.create(null); // add persisted settings\n\n  if (framework.length) {\n    framework.forEach(function addFrameworks(fw) {\n      addSetting('Framework', fw);\n    });\n  }\n\n  if (dispatcher.length) {\n    dispatcher.forEach(function addDispatchers(d) {\n      addSetting('Dispatcher', d);\n    });\n  }\n\n  if (dispatcherVersion.length) {\n    dispatcher.forEach(function addDispatchers(d) {\n      addSetting('Dispatcher Version', d);\n    });\n  }\n\n  gatherEnv();\n  remapConfigSettings();\n}\n/**\n * Reset settings and gather them, built to minimally refactor this file.\n */\n\n\nfunction refresh(cb) {\n  _log('Refreshing environment settings');\n\n  refreshSyncOnly();\n  var packages = getSetting('Packages');\n  var dependencies = getSetting('Dependencies');\n\n  if (packages.length && dependencies.length) {\n    settings.Packages = packages;\n    settings.Dependencies = dependencies;\n\n    _log('Using cached values');\n\n    setImmediate(cb);\n  } else {\n    _log('Fetching new package information');\n\n    findPackages(cb);\n  }\n}\n/**\n * Refreshes settings and returns the settings object.\n *\n * @private\n *\n * @param {function} cb - Callback to send results to.\n */\n\n\nfunction getJSON(cb) {\n  _log('Getting environment JSON');\n\n  refresh(function onRefreshFinish(err) {\n    _log('Environment refresh finished');\n\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    var items = [];\n    Object.keys(settings).forEach(function settingKeysForEach(key) {\n      settings[key].forEach(function settingsValuesForEach(setting) {\n        items.push([key, setting]);\n      });\n    });\n\n    _log('JSON got');\n\n    cb(null, items);\n  });\n} // At startup, do the synchronous environment scanning stuff.\n\n\nrefreshSyncOnly();\nvar userSetDispatcher = false;\nmodule.exports = {\n  setFramework: function setFramework(framework) {\n    addSetting('Framework', framework);\n  },\n  setDispatcher: function setDispatcher(dispatcher, version, userSet) {\n    if (userSetDispatcher) {\n      return;\n    }\n\n    userSetDispatcher = !!userSet;\n    clearSetting('Dispatcher Version');\n    clearSetting('Dispatcher'); // TODO: Decide if this should only happen once for internals as well.\n\n    if (version) {\n      addSetting('Dispatcher Version', version);\n    }\n\n    addSetting('Dispatcher', dispatcher);\n  },\n  clearFramework: function clearFramework() {\n    clearSetting('Framework');\n  },\n  clearDispatcher: function clearDispatcher() {\n    // This method is only used for tests.\n    userSetDispatcher = false;\n    clearSetting('Dispatcher');\n    clearSetting('Dispatcher Version');\n  },\n  listPackages: listPackages,\n  getJSON: getJSON,\n  get: getSetting,\n  refresh: refresh\n};\n/**\n * For super verbose logging that we can disable completely, separate from the\n * rest of logging.\n */\n\nfunction _log() {// logger.trace.apply(logger, arguments)\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/environment.js"],"names":["a","require","path","fs","os","logger","child","component","stringify","remapping","node_install_npm","node_install_waf","node_use_openssl","node_shared_openssl","node_shared_v8","node_shared_zlib","node_use_dtrace","node_use_etw","settings","Object","create","getSetting","name","addSetting","value","indexOf","push","clearSetting","listPackages","root","packages","callback","_log","waterfall","apply","readdir","iterateDirs","dirs","cb","eachLimit","forEachDir","onAllDirsRead","err","trace","dir","setImmediate","resolve","pkg","readFile","onPackageRead","pkgFile","debug","version","pkgData","JSON","parse","e","listDependencies","children","visited","Array","isArray","forEachEntry","entry","candidate","realpath","realPathCb","realCandidate","code","series","onRecurseListComplete","loadErr","getLocalPackages","dependencies","process","cwd","whilst","checkCandidate","iterate","onListComplete","last","dirname","whileComplete","getPackages","getGlobalPackages","config","variables","prefix","node_prefix","flattenVersions","info","forEach","cb_forEach","pair","p","v","keys","map","cb_map","key","join","sort","remapConfigSettings","getOtherPackages","other","env","NODE_PATH","paths","platform","split","listEachOtherPackage","nodePath","onGetPackageFinish","nextSet","onOtherFinish","getHomePackages","homeDir","USERDIR","HOME","mapSeries","home","homeOld","onHomeFinish","findPackages","parallelLimit","local","time","global","onPackageComplete","data","unshift","fn","timeWrapper","start","Date","now","wrappedCb","end","arguments","gatherEnv","cpus","length","type","release","arch","NODE_ENV","refreshSyncOnly","framework","dispatcher","dispatcherVersion","addFrameworks","fw","addDispatchers","d","refresh","Packages","Dependencies","getJSON","onRefreshFinish","items","settingKeysForEach","settingsValuesForEach","setting","userSetDispatcher","module","exports","setFramework","setDispatcher","userSet","clearFramework","clearDispatcher","get"],"mappings":"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","sourcesContent":["'use strict'\n\nvar a = require('async')\nvar path = require('path')\nvar fs = require('./util/unwrapped-core').fs\nvar os = require('os')\nvar logger = require('./logger').child({component: 'environment'})\nvar stringify = require('json-stringify-safe')\n\n\n// As of 1.7.0 you can no longer dynamically link v8\n// https://github.com/nodejs/io.js/commit/d726a177ed\nvar remapping = {\n  node_install_npm: \"npm installed?\",\n  node_install_waf: \"WAF build system installed?\",\n  node_use_openssl: \"OpenSSL support?\",\n  node_shared_openssl: \"Dynamically linked to OpenSSL?\",\n  node_shared_v8: \"Dynamically linked to V8?\",\n  node_shared_zlib: \"Dynamically linked to Zlib?\",\n  node_use_dtrace: \"DTrace support?\",\n  node_use_etw: \"Event Tracing for Windows (ETW) support?\"\n}\n\nvar settings = Object.create(null)\n\n/**\n * Fetches the setting of the given name, defaulting to an empty array.\n *\n * @param {string} name - The name of the setting to look for.\n *\n * @return {Array.<string>} An array of values matching that name.\n */\nfunction getSetting(name) {\n  return settings[name] || []\n}\n\n/**\n * Add a setting to the module's shared settings object.\n *\n * @param {string} name   - The name of the setting value being added.\n * @param {string} value  - The value to add or the setting.\n */\nfunction addSetting(name, value) {\n  if (!settings[name]) {\n    settings[name] = [value]\n  } else if (settings[name].indexOf(value) === -1) {\n    settings[name].push(value)\n  }\n}\n\n/**\n * Remove settings with the given name.\n *\n * @param {string} name - The name of the setting to remove.\n */\nfunction clearSetting(name) {\n  delete settings[name]\n}\n\n/**\n * Build up a list of top-level packages available to an application relative to\n * the provided root.\n *\n * @param {string}    root          - Path to start listing packages from.\n * @param {Array}     [packages=[]] - Array to append found packages to.\n * @param {function}  callback      - Callback function.\n *\n * @return {Array} List of packages.\n */\nfunction listPackages(root, packages, callback) {\n  // listPackages(root, callback)\n  if (typeof packages === 'function') {\n    callback = packages\n    packages = []\n  }\n  _log('Listing packages in %s', root)\n\n  a.waterfall([\n    a.apply(fs.readdir, root),\n    function iterateDirs(dirs, cb) {\n      a.eachLimit(dirs, 2, forEachDir, cb)\n    }\n  ], function onAllDirsRead(err) {\n    _log('Done listing packages in %s', root)\n    if (err) {\n      logger.trace(err, 'Could not list packages in %s (probably not an error)', root)\n      return callback()\n    }\n    callback(null, packages)\n  })\n\n  function forEachDir(dir, cb) {\n    _log('Checking package %s in %s', dir, root)\n\n    // Skip npm's binary directory where it stores executables.\n    if (dir === '.bin') {\n      _log('Skipping .bin directory')\n      return setImmediate(cb)\n    }\n\n    // Recurse into module scopes.\n    if (dir[0] === '@') {\n      logger.trace('Recursing into scoped module directory %s', dir)\n      return listPackages(path.resolve(root, dir), packages, cb)\n    }\n\n    // Read the package and pull out the name and version of it.\n    var pkg = path.resolve(root, dir, 'package.json')\n    fs.readFile(pkg, function onPackageRead(err, pkgFile) {\n      _log('Read package at %s', pkg)\n      if (err) {\n        logger.debug(err, 'Could not read %s.', pkg)\n        return cb()\n      }\n\n      var name = null\n      var version = null\n      try {\n        var pkgData = JSON.parse(pkgFile)\n        name = pkgData.name\n        version = pkgData.version\n      } catch (e) {\n        logger.debug(err, 'Could not parse package file %s.', pkg)\n      }\n\n      packages.push([name || dir, version || '<unknown>'])\n      _log('Package from %s added (%s@%s)', pkg, name, version)\n      cb()\n    })\n  }\n}\n\n/**\n * Build up a list of dependencies from a given node_module root.\n *\n * @param {string}    root        - Path to start listing dependencies from.\n * @param {Array}     [children]  - Array to append found dependencies to.\n * @param {object}    [visited]   - Map of visited directories.\n * @param {function}  callback    - Callback to send deps to.\n *\n * @return {Array} List of dependencies.\n */\nfunction listDependencies(root, children, visited, callback) {\n  // listDependencies(root, callback)\n  if (typeof children === 'function') {\n    callback = children\n    children = []\n    visited = Object.create(null)\n  }\n  // listDependencies(root, {children|visited}, callback)\n  if (typeof visited === 'function') {\n    callback = visited\n    if (Array.isArray(children)) {\n      visited = Object.create(null)\n    } else {\n      visited = children\n      children = []\n    }\n  }\n  _log('Listing dependencies in %s', root)\n\n  a.waterfall([\n    a.apply(fs.readdir, root),\n    function iterateDirs(dirs, cb) {\n      a.eachLimit(dirs, 2, forEachEntry, cb)\n    }\n  ], function onAllDirsRead(err) {\n    _log('Done listing dependencies in %s', root)\n    if (err) {\n      logger.trace(err, 'Could not read directories in %s (probably not an error)', root)\n      return callback()\n    }\n    callback(null, children)\n  })\n\n  function forEachEntry(entry, cb) {\n    _log('Checking dependencies in %s (%s)', entry, root)\n\n    var candidate = path.resolve(root, entry, 'node_modules')\n    fs.realpath(candidate, function realPathCb(err, realCandidate) {\n      _log('Resolved %s to real path %s', candidate, realCandidate)\n      if (err) {\n        // Don't care to log about files that don't exist.\n        if (err.code !== 'ENOENT') {\n          logger.debug(err, 'Failed to resolve candidate real path %s', candidate)\n        }\n        _log(err, 'Real path for %s failed', candidate)\n        return cb()\n      }\n\n      // Make sure we haven't been to this directory before.\n      if (visited[realCandidate]) {\n        logger.trace('Not revisiting %s (from %s)', realCandidate, candidate)\n        return cb()\n      }\n      visited[realCandidate] = true\n\n      // Load the packages and dependencies for this directory.\n      a.series([\n        a.apply(listPackages, realCandidate, children),\n        a.apply(listDependencies, realCandidate, children, visited)\n      ], function onRecurseListComplete(loadErr) {\n        _log('Done with dependencies in %s', realCandidate)\n        if (loadErr) {\n          logger.debug(loadErr, 'Failed to list dependencies in %s', realCandidate)\n        }\n        cb()\n      })\n    })\n  }\n}\n\n/**\n * Build up a list of packages, starting from the current directory.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\nfunction getLocalPackages(callback) {\n  var packages = []\n  var dependencies = []\n  var candidate = process.cwd()\n  var visited = Object.create(null)\n  _log('Getting local packages')\n\n  a.whilst(function checkCandidate() {\n    return candidate\n  }, function iterate(cb) {\n    _log('Checking for local packages in %s', candidate)\n    var root = path.resolve(candidate, 'node_modules')\n    a.series([\n      a.apply(listPackages, root, packages),\n      a.apply(listDependencies, root, dependencies, visited)\n    ], function onListComplete(err) {\n      _log('Done checking for local packages in %s', candidate)\n      var last = candidate\n      candidate = path.dirname(candidate)\n      if (last === candidate) {\n        candidate = null\n      }\n      cb(err)\n    })\n  }, function whileComplete(err) {\n    _log('Done getting local packages')\n    if (err) {\n      callback(err)\n    } else {\n      callback(null, {packages: packages, dependencies: dependencies})\n    }\n  })\n}\n\n/**\n * Generic method for getting packages and dependencies relative to a\n * provided root directory.\n *\n * @param {string} root - Where to start looking -- doesn't add node_modules.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\nfunction getPackages(root, cb) {\n  var packages = []\n  var dependencies = []\n  _log('Getting packages from %s', root)\n\n  a.series([\n    a.apply(listPackages, root, packages),\n    a.apply(listDependencies, root, dependencies)\n  ], function onListComplete(err) {\n    _log('Done getting packages from %s', root)\n    if (err) {\n      cb(err)\n    } else {\n      cb(null, {packages: packages, dependencies: dependencies})\n    }\n  })\n}\n\n/**\n * Generate a list of globally-installed packages, if available / accessible\n * via the environment.\n *\n * @return {Object} Two lists, of packages and dependencies, with the\n *  appropriate names.\n */\nfunction getGlobalPackages(cb) {\n  _log('Getting global packages')\n  if (process.config && process.config.variables) {\n    var prefix = process.config.variables.node_prefix\n    if (prefix) {\n      var root = path.resolve(prefix, 'lib', 'node_modules')\n      _log('Getting global packages from %s', root)\n      return getPackages(root, cb)\n    }\n  }\n\n  _log('No global packages to get')\n  setImmediate(cb, null, {packages: [], dependencies: []})\n}\n\n/**\n * Take a list of packages and reduce it to a list of pairs serialized\n * to JSON (to simplify things on the collector end) where each\n * package appears at most once, with all the versions joined into a\n * comma-delimited list.\n *\n * @return {Array.<string[]>} Sorted list of [name, version] pairs.\n */\nfunction flattenVersions(packages) {\n  var info = Object.create(null)\n  packages.forEach(function cb_forEach(pair) {\n    var p = pair[0]\n    var v = pair[1]\n\n    if (info[p]) {\n      if (info[p].indexOf(v) < 0) info[p].push(v)\n    } else {\n      info[p] = [v]\n    }\n  })\n\n  return Object.keys(info)\n    .map(function cb_map(key) {\n      return [key, info[key].join(', ')]\n    })\n    .sort()\n    .map(function cb_map(pair) {\n      try {\n        return stringify(pair)\n      } catch (err) {\n        logger.debug(err, 'Unabled to stringify package version')\n        return '<unknown>'\n      }\n    })\n}\n\n/**\n * There are a bunch of settings generated at build time that are useful to\n * know for troubleshooting purposes. These settings are only available in 0.7\n * and up.\n *\n * This function works entirely via side effects using the\n * addSetting function.\n */\nfunction remapConfigSettings() {\n  if (process.config && process.config.variables) {\n    var variables = process.config.variables\n    Object.keys(variables).forEach(function cb_forEach(key) {\n      if (remapping[key]) {\n        var value = variables[key]\n\n        if (value === true || value === 1) value = 'yes'\n        if (value === false || value === 0) value = 'no'\n\n        addSetting(remapping[key], value)\n      }\n    })\n  }\n}\n\nfunction getOtherPackages(callback) {\n  _log('Getting other packages')\n  var other = {packages: [], dependencies: []}\n\n  if (!process.env.NODE_PATH) {\n    return callback(null, other)\n  }\n\n  var paths\n  if (process.platform === 'win32') { // why. WHY.\n    paths = process.env.NODE_PATH.split(';')\n  } else {\n    paths = process.env.NODE_PATH.split(':')\n  }\n  _log('Looking for other packages in %j', paths)\n\n  a.eachLimit(paths, 2, function listEachOtherPackage(nodePath, cb) {\n    if (nodePath[0] !== '/') nodePath = path.resolve(process.cwd(), nodePath)\n    _log('Getting other packages from %s', nodePath)\n    getPackages(nodePath, function onGetPackageFinish(err, nextSet) {\n      _log('Done getting other packages from %s', nodePath)\n      if (!err && nextSet) {\n        other.packages.push.apply(other.packages, nextSet.packages)\n        other.dependencies.push.apply(other.dependencies, nextSet.dependencies)\n      }\n      cb(err)\n    })\n  }, function onOtherFinish(err) {\n    _log('Done getting other packages')\n    callback(err, other)\n  })\n}\n\nfunction getHomePackages(cb) {\n  var homeDir = null\n  if (process.platform === 'win32') {\n    if (process.env.USERDIR) {\n      homeDir = process.env.USERDIR\n    }\n  } else if (process.env.HOME) {\n    homeDir = process.env.HOME\n  }\n\n  _log('Getting home packages from %s', homeDir)\n  if (!homeDir) {\n    return cb(null, null)\n  }\n\n  a.mapSeries({\n    home: path.resolve(homeDir, '.node_modules'),\n    homeOld: path.resolve(homeDir, '.node_libraries')\n  }, getPackages, function onHomeFinish(err, packages) {\n    _log('Done getting home packages from %s', homeDir)\n    cb(err, packages)\n  })\n}\n\n/**\n * Scrape the list of packages, following the algorithm as described in the\n * node module page:\n *\n * http://nodejs.org/docs/latest/api/modules.html\n *\n * This function works entirely via side effects using the addSetting\n * function.\n */\nfunction findPackages(cb) {\n  _log('Finding all packages')\n  a.parallelLimit({\n    local: time(getLocalPackages),\n    global: time(getGlobalPackages),\n    other: time(getOtherPackages),\n    home: time(getHomePackages)\n  }, 2, function onPackageComplete(err, data) {\n    _log('Done finding all packages')\n    if (err) {\n      return cb(err)\n    }\n\n    var packages = data.local.packages\n    packages.push.apply(packages, data.global.packages)\n    packages.push.apply(packages, data.other.packages)\n\n    var dependencies = data.local.dependencies\n    dependencies.push.apply(dependencies, data.global.dependencies)\n    dependencies.push.apply(dependencies, data.other.dependencies)\n\n    if (data.home) {\n      if (data.home.home) {\n        packages.unshift.apply(packages, data.home.home.packages)\n        dependencies.unshift.apply(dependencies, data.home.home.dependencies)\n      }\n      if (data.home.homeOld) {\n        packages.unshift.apply(packages, data.home.homeOld.packages)\n        dependencies.unshift.apply(dependencies, data.home.homeOld.dependencies)\n      }\n    }\n\n    addSetting('Packages', flattenVersions(packages))\n    addSetting('Dependencies', flattenVersions(dependencies))\n    cb()\n  })\n}\n\nfunction time(fn) {\n  var name = fn.name\n  return function timeWrapper(cb) {\n    var start = Date.now()\n    logger.trace('Starting %s', name)\n    return fn(function wrappedCb() {\n      var end = Date.now()\n      logger.trace('Finished %s in %dms', name, end - start)\n      cb.apply(this, arguments)\n    })\n  }\n}\n\n/**\n * Settings actually get scraped below.\n */\nfunction gatherEnv() {\n  addSetting('Processors', os.cpus().length)\n  addSetting('OS', os.type())\n  addSetting('OS version', os.release())\n  addSetting('Node.js version', process.version)\n  addSetting('Architecture', process.arch)\n\n  if ('NODE_ENV' in process.env) {\n    addSetting('NODE_ENV', process.env.NODE_ENV)\n  }\n}\n\nfunction refreshSyncOnly() {\n  // gather persisted settings\n  var framework = getSetting('Framework')\n  var dispatcher = getSetting('Dispatcher')\n  var dispatcherVersion = getSetting('Dispatcher Version')\n\n  // clearing and rebuilding a global variable\n  settings = Object.create(null)\n  // add persisted settings\n  if (framework.length) {\n    framework.forEach(function addFrameworks(fw) {\n      addSetting('Framework', fw)\n    })\n  }\n\n  if (dispatcher.length) {\n    dispatcher.forEach(function addDispatchers(d) {\n      addSetting('Dispatcher', d)\n    })\n  }\n\n  if (dispatcherVersion.length) {\n    dispatcher.forEach(function addDispatchers(d) {\n      addSetting('Dispatcher Version', d)\n    })\n  }\n\n  gatherEnv()\n  remapConfigSettings()\n}\n\n/**\n * Reset settings and gather them, built to minimally refactor this file.\n */\nfunction refresh(cb) {\n  _log('Refreshing environment settings')\n  refreshSyncOnly()\n\n  var packages = getSetting('Packages')\n  var dependencies = getSetting('Dependencies')\n\n  if (packages.length && dependencies.length) {\n    settings.Packages = packages\n    settings.Dependencies = dependencies\n    _log('Using cached values')\n    setImmediate(cb)\n  } else {\n    _log('Fetching new package information')\n    findPackages(cb)\n  }\n}\n\n/**\n * Refreshes settings and returns the settings object.\n *\n * @private\n *\n * @param {function} cb - Callback to send results to.\n */\nfunction getJSON(cb) {\n  _log('Getting environment JSON')\n  refresh(function onRefreshFinish(err) {\n    _log('Environment refresh finished')\n    if (err) {\n      cb(err)\n      return\n    }\n\n    var items = []\n    Object.keys(settings).forEach(function settingKeysForEach(key) {\n      settings[key].forEach(function settingsValuesForEach(setting) {\n        items.push([key, setting])\n      })\n    })\n    _log('JSON got')\n    cb(null, items)\n  })\n}\n\n// At startup, do the synchronous environment scanning stuff.\nrefreshSyncOnly()\n\nvar userSetDispatcher = false\nmodule.exports = {\n  setFramework: function setFramework(framework) {\n    addSetting('Framework', framework)\n  },\n  setDispatcher: function setDispatcher(dispatcher, version, userSet) {\n    if (userSetDispatcher) {\n      return\n    }\n\n    userSetDispatcher = !!userSet\n    clearSetting('Dispatcher Version')\n    clearSetting('Dispatcher')\n\n    // TODO: Decide if this should only happen once for internals as well.\n    if (version) {\n      addSetting('Dispatcher Version', version)\n    }\n\n    addSetting('Dispatcher', dispatcher)\n  },\n  clearFramework: function clearFramework() {\n    clearSetting('Framework')\n  },\n  clearDispatcher: function clearDispatcher() {\n    // This method is only used for tests.\n    userSetDispatcher = false\n    clearSetting('Dispatcher')\n    clearSetting('Dispatcher Version')\n  },\n  listPackages: listPackages,\n  getJSON: getJSON,\n  get: getSetting,\n  refresh: refresh\n}\n\n/**\n * For super verbose logging that we can disable completely, separate from the\n * rest of logging.\n */\nfunction _log() {\n  // logger.trace.apply(logger, arguments)\n}\n"]},"metadata":{},"sourceType":"script"}