{"ast":null,"code":"'use strict';\n\nvar common = require('./common');\n\nvar logger = require('../logger.js').child({\n  component: 'azure-info'\n});\n\nvar NAMES = require('../metrics/names.js');\n\nmodule.exports = fetchAzureInfo;\n\nmodule.exports.clearCache = function clearAzureCache() {\n  results = null;\n};\n\nvar results = null;\n\nfunction fetchAzureInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_azure) {\n    return setImmediate(callback, null, null);\n  }\n\n  if (results) {\n    return setImmediate(callback, null, results);\n  }\n\n  var instanceHost = '169.254.169.254';\n  var apiVersion = '2017-03-01';\n  var endpoint = '/metadata/instance/compute';\n  common.request({\n    host: instanceHost,\n    path: endpoint + '?api-version=' + apiVersion,\n    headers: {\n      Metadata: 'true'\n    }\n  }, agent, function getMetadata(err, data) {\n    if (err) {\n      return callback(err);\n    } // Hopefully the data is parsable as JSON.\n\n\n    try {\n      data = JSON.parse(data);\n    } catch (e) {\n      logger.debug(e, 'Failed to parse Azure metadata.');\n      data = null;\n    } // Get out just the keys we care about.\n\n\n    results = common.getKeys(data, ['location', 'name', 'vmId', 'vmSize']);\n\n    if (results == null) {\n      logger.debug('Azure metadata was invalid.');\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.AZURE_ERROR).incrementCallCount();\n    } // Call back!\n\n\n    callback(null, results);\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/utilization/azure-info.js"],"names":["common","require","logger","child","component","NAMES","module","exports","fetchAzureInfo","clearCache","clearAzureCache","results","agent","callback","config","utilization","detect_azure","setImmediate","instanceHost","apiVersion","endpoint","request","host","path","headers","Metadata","getMetadata","err","data","JSON","parse","e","debug","getKeys","metrics","getOrCreateMetric","UTILIZATION","AZURE_ERROR","incrementCallCount"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBE,KAAxB,CAA8B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA9B,CAAb;;AACA,IAAIC,KAAK,GAAGJ,OAAO,CAAC,qBAAD,CAAnB;;AAGAK,MAAM,CAACC,OAAP,GAAiBC,cAAjB;;AACAF,MAAM,CAACC,OAAP,CAAeE,UAAf,GAA4B,SAASC,eAAT,GAA2B;AACrDC,EAAAA,OAAO,GAAG,IAAV;AACD,CAFD;;AAIA,IAAIA,OAAO,GAAG,IAAd;;AAEA,SAASH,cAAT,CAAwBI,KAAxB,EAA+BC,QAA/B,EAAyC;AACvC,MAAI,CAACD,KAAK,CAACE,MAAN,CAAaC,WAAd,IAA6B,CAACH,KAAK,CAACE,MAAN,CAAaC,WAAb,CAAyBC,YAA3D,EAAyE;AACvE,WAAOC,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAnB;AACD;;AAED,MAAIF,OAAJ,EAAa;AACX,WAAOM,YAAY,CAACJ,QAAD,EAAW,IAAX,EAAiBF,OAAjB,CAAnB;AACD;;AAED,MAAIO,YAAY,GAAG,iBAAnB;AACA,MAAIC,UAAU,GAAG,YAAjB;AACA,MAAIC,QAAQ,GAAG,4BAAf;AACApB,EAAAA,MAAM,CAACqB,OAAP,CAAe;AACbC,IAAAA,IAAI,EAAEJ,YADO;AAEbK,IAAAA,IAAI,EAAEH,QAAQ,GAAG,eAAX,GAA6BD,UAFtB;AAGbK,IAAAA,OAAO,EAAE;AAACC,MAAAA,QAAQ,EAAE;AAAX;AAHI,GAAf,EAIGb,KAJH,EAIU,SAASc,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACxC,QAAID,GAAJ,EAAS;AACP,aAAOd,QAAQ,CAACc,GAAD,CAAf;AACD,KAHuC,CAKxC;;;AACA,QAAI;AACFC,MAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV7B,MAAAA,MAAM,CAAC8B,KAAP,CAAaD,CAAb,EAAgB,iCAAhB;AACAH,MAAAA,IAAI,GAAG,IAAP;AACD,KAXuC,CAaxC;;;AACAjB,IAAAA,OAAO,GAAGX,MAAM,CAACiC,OAAP,CAAeL,IAAf,EAAqB,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,EAA6B,QAA7B,CAArB,CAAV;;AACA,QAAIjB,OAAO,IAAI,IAAf,EAAqB;AACnBT,MAAAA,MAAM,CAAC8B,KAAP,CAAa,6BAAb;AACApB,MAAAA,KAAK,CAACsB,OAAN,CAAcC,iBAAd,CAAgC9B,KAAK,CAAC+B,WAAN,CAAkBC,WAAlD,EAA+DC,kBAA/D;AACD,KAlBuC,CAoBxC;;;AACAzB,IAAAA,QAAQ,CAAC,IAAD,EAAOF,OAAP,CAAR;AACD,GA1BD;AA2BD","sourcesContent":["'use strict'\n\nvar common = require('./common')\nvar logger = require('../logger.js').child({component: 'azure-info'})\nvar NAMES = require('../metrics/names.js')\n\n\nmodule.exports = fetchAzureInfo\nmodule.exports.clearCache = function clearAzureCache() {\n  results = null\n}\n\nvar results = null\n\nfunction fetchAzureInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_azure) {\n    return setImmediate(callback, null, null)\n  }\n\n  if (results) {\n    return setImmediate(callback, null, results)\n  }\n\n  var instanceHost = '169.254.169.254'\n  var apiVersion = '2017-03-01'\n  var endpoint = '/metadata/instance/compute'\n  common.request({\n    host: instanceHost,\n    path: endpoint + '?api-version=' + apiVersion,\n    headers: {Metadata: 'true'}\n  }, agent, function getMetadata(err, data) {\n    if (err) {\n      return callback(err)\n    }\n\n    // Hopefully the data is parsable as JSON.\n    try {\n      data = JSON.parse(data)\n    } catch (e) {\n      logger.debug(e, 'Failed to parse Azure metadata.')\n      data = null\n    }\n\n    // Get out just the keys we care about.\n    results = common.getKeys(data, ['location', 'name', 'vmId', 'vmSize'])\n    if (results == null) {\n      logger.debug('Azure metadata was invalid.')\n      agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.AZURE_ERROR).incrementCallCount()\n    }\n\n    // Call back!\n    callback(null, results)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}