{"ast":null,"code":"'use strict';\n\nmodule.exports = obfuscate;\nvar singleQuote = /'(?:[^']|'')*?(?:\\\\'.*|'(?!'))/;\nvar doubleQuote = /\"(?:[^\"]|\"\")*?(?:\\\\\".*|\"(?!\"))/;\nvar dollarQuote = /(\\$(?!\\d)[^$]*?\\$).*?(?:\\1|$)/;\nvar oracleQuote = /q'\\[.*?(?:\\]'|$)|q'\\{.*?(?:\\}'|$)|q'\\<.*?(?:\\>'|$)|q'\\(.*?(?:\\)'|$)/;\nvar comment = /(?:#|--).*?(?=\\r|\\n|$)/;\nvar multilineComment = /\\/\\*(?:[^/]|\\/[^*])*?(?:\\*\\/|\\/\\*.*)/;\nvar uuid = /\\{?(?:[0-9a-f]\\-*){32}\\}?/;\nvar hex = /0x[0-9a-f]+/;\nvar boolean = /true|false|null/;\nvar number = /\\b-?(?:[0-9]+\\.)?[0-9]+([eE][+-]?[0-9]+)?/;\nvar dialects = obfuscate.dialects = Object.create(null);\ndialects.mysql = [replacer(join([doubleQuote, singleQuote, comment, multilineComment, hex, boolean, number], 'gi')), unmatchedPairs(/'|\"|\\/\\*|\\*\\//)];\ndialects.postgres = [replacer(join([dollarQuote, singleQuote, comment, multilineComment, uuid, boolean, number], 'gi')), unmatchedPairs(/'|\\/\\*|\\*\\/|(?:\\$(?!\\?))/)];\ndialects.cassandra = [replacer(join([singleQuote, comment, multilineComment, uuid, hex, boolean, number], 'gi')), unmatchedPairs(/'|\\/\\*|\\*\\//)];\ndialects.oracle = [replacer(join([oracleQuote, singleQuote, comment, multilineComment, number], 'gi')), unmatchedPairs(/'|\\/\\*|\\*\\//)];\ndialects.default = dialects.mysql;\n\nfunction obfuscate(raw, dialect) {\n  var replacers = dialects[dialect];\n\n  if (!replacers) {\n    replacers = dialects.default;\n  }\n\n  var obfuscated = raw;\n\n  for (var i = 0, l = replacers.length; i < l; ++i) {\n    obfuscated = replacers[i](obfuscated);\n  }\n\n  return obfuscated;\n}\n\nfunction join(expressions, flags) {\n  return new RegExp(expressions.map(toPart).join('|'), flags);\n}\n\nfunction toPart(expressions) {\n  return expressions.toString().slice(1, -1);\n}\n\nfunction replacer(regex) {\n  function replace(sql) {\n    return sql.replace(regex, '?');\n  }\n\n  replace.regex = regex;\n  return replace;\n}\n\nfunction unmatchedPairs(regex) {\n  function check(sql) {\n    return regex.test(sql) ? '?' : sql;\n  }\n\n  check.regex = regex;\n  return check;\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/util/sql/obfuscate.js"],"names":["module","exports","obfuscate","singleQuote","doubleQuote","dollarQuote","oracleQuote","comment","multilineComment","uuid","hex","boolean","number","dialects","Object","create","mysql","replacer","join","unmatchedPairs","postgres","cassandra","oracle","default","raw","dialect","replacers","obfuscated","i","l","length","expressions","flags","RegExp","map","toPart","toString","slice","regex","replace","sql","check","test"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA,IAAIC,WAAW,GAAG,gCAAlB;AACA,IAAIC,WAAW,GAAG,gCAAlB;AACA,IAAIC,WAAW,GAAG,+BAAlB;AACA,IAAIC,WAAW,GAAG,qEAAlB;AACA,IAAIC,OAAO,GAAG,wBAAd;AACA,IAAIC,gBAAgB,GAAG,sCAAvB;AACA,IAAIC,IAAI,GAAG,2BAAX;AACA,IAAIC,GAAG,GAAG,aAAV;AACA,IAAIC,OAAO,GAAG,iBAAd;AACA,IAAIC,MAAM,GAAG,2CAAb;AAEA,IAAIC,QAAQ,GAAGX,SAAS,CAACW,QAAV,GAAqBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAApC;AAEAF,QAAQ,CAACG,KAAT,GAAiB,CACfC,QAAQ,CAACC,IAAI,CACX,CAACd,WAAD,EAAcD,WAAd,EAA2BI,OAA3B,EAAoCC,gBAApC,EAAsDE,GAAtD,EAA2DC,OAA3D,EAAoEC,MAApE,CADW,EAEX,IAFW,CAAL,CADO,EAKfO,cAAc,CAAC,eAAD,CALC,CAAjB;AAQAN,QAAQ,CAACO,QAAT,GAAoB,CAClBH,QAAQ,CAACC,IAAI,CACX,CAACb,WAAD,EAAcF,WAAd,EAA2BI,OAA3B,EAAoCC,gBAApC,EAAsDC,IAAtD,EAA4DE,OAA5D,EAAqEC,MAArE,CADW,EAEX,IAFW,CAAL,CADU,EAKlBO,cAAc,CAAC,0BAAD,CALI,CAApB;AAQAN,QAAQ,CAACQ,SAAT,GAAqB,CACnBJ,QAAQ,CAACC,IAAI,CACX,CAACf,WAAD,EAAcI,OAAd,EAAuBC,gBAAvB,EAAyCC,IAAzC,EAA+CC,GAA/C,EAAoDC,OAApD,EAA6DC,MAA7D,CADW,EAEX,IAFW,CAAL,CADW,EAKnBO,cAAc,CAAC,aAAD,CALK,CAArB;AAQAN,QAAQ,CAACS,MAAT,GAAkB,CAChBL,QAAQ,CAACC,IAAI,CACX,CAACZ,WAAD,EAAcH,WAAd,EAA2BI,OAA3B,EAAoCC,gBAApC,EAAsDI,MAAtD,CADW,EAEX,IAFW,CAAL,CADQ,EAKhBO,cAAc,CAAC,aAAD,CALE,CAAlB;AAQAN,QAAQ,CAACU,OAAT,GAAmBV,QAAQ,CAACG,KAA5B;;AAEA,SAASd,SAAT,CAAmBsB,GAAnB,EAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,SAAS,GAAGb,QAAQ,CAACY,OAAD,CAAxB;;AACA,MAAI,CAACC,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAGb,QAAQ,CAACU,OAArB;AACD;;AAED,MAAII,UAAU,GAAGH,GAAjB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,CAA1C,EAA6C,EAAED,CAA/C,EAAkD;AAChDD,IAAAA,UAAU,GAAGD,SAAS,CAACE,CAAD,CAAT,CAAaD,UAAb,CAAb;AACD;;AAED,SAAOA,UAAP;AACD;;AAED,SAAST,IAAT,CAAca,WAAd,EAA2BC,KAA3B,EAAkC;AAChC,SAAO,IAAIC,MAAJ,CAAWF,WAAW,CAACG,GAAZ,CAAgBC,MAAhB,EAAwBjB,IAAxB,CAA6B,GAA7B,CAAX,EAA8Cc,KAA9C,CAAP;AACD;;AAED,SAASG,MAAT,CAAgBJ,WAAhB,EAA6B;AAC3B,SAAOA,WAAW,CAACK,QAAZ,GAAuBC,KAAvB,CAA6B,CAA7B,EAAgC,CAAC,CAAjC,CAAP;AACD;;AAED,SAASpB,QAAT,CAAkBqB,KAAlB,EAAyB;AACvB,WAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,WAAOA,GAAG,CAACD,OAAJ,CAAYD,KAAZ,EAAmB,GAAnB,CAAP;AACD;;AACDC,EAAAA,OAAO,CAACD,KAAR,GAAgBA,KAAhB;AAEA,SAAOC,OAAP;AACD;;AAED,SAASpB,cAAT,CAAwBmB,KAAxB,EAA+B;AAC7B,WAASG,KAAT,CAAeD,GAAf,EAAoB;AAClB,WAAOF,KAAK,CAACI,IAAN,CAAWF,GAAX,IAAkB,GAAlB,GAAwBA,GAA/B;AACD;;AACDC,EAAAA,KAAK,CAACH,KAAN,GAAcA,KAAd;AAEA,SAAOG,KAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = obfuscate\n\nvar singleQuote = /'(?:[^']|'')*?(?:\\\\'.*|'(?!'))/\nvar doubleQuote = /\"(?:[^\"]|\"\")*?(?:\\\\\".*|\"(?!\"))/\nvar dollarQuote = /(\\$(?!\\d)[^$]*?\\$).*?(?:\\1|$)/\nvar oracleQuote = /q'\\[.*?(?:\\]'|$)|q'\\{.*?(?:\\}'|$)|q'\\<.*?(?:\\>'|$)|q'\\(.*?(?:\\)'|$)/\nvar comment = /(?:#|--).*?(?=\\r|\\n|$)/\nvar multilineComment = /\\/\\*(?:[^/]|\\/[^*])*?(?:\\*\\/|\\/\\*.*)/\nvar uuid = /\\{?(?:[0-9a-f]\\-*){32}\\}?/\nvar hex = /0x[0-9a-f]+/\nvar boolean = /true|false|null/\nvar number = /\\b-?(?:[0-9]+\\.)?[0-9]+([eE][+-]?[0-9]+)?/\n\nvar dialects = obfuscate.dialects = Object.create(null)\n\ndialects.mysql = [\n  replacer(join(\n    [doubleQuote, singleQuote, comment, multilineComment, hex, boolean, number],\n    'gi'\n  )),\n  unmatchedPairs(/'|\"|\\/\\*|\\*\\//)\n]\n\ndialects.postgres = [\n  replacer(join(\n    [dollarQuote, singleQuote, comment, multilineComment, uuid, boolean, number],\n    'gi'\n  )),\n  unmatchedPairs(/'|\\/\\*|\\*\\/|(?:\\$(?!\\?))/)\n]\n\ndialects.cassandra = [\n  replacer(join(\n    [singleQuote, comment, multilineComment, uuid, hex, boolean, number],\n    'gi'\n  )),\n  unmatchedPairs(/'|\\/\\*|\\*\\//)\n]\n\ndialects.oracle = [\n  replacer(join(\n    [oracleQuote, singleQuote, comment, multilineComment, number],\n    'gi'\n  )),\n  unmatchedPairs(/'|\\/\\*|\\*\\//)\n]\n\ndialects.default = dialects.mysql\n\nfunction obfuscate(raw, dialect) {\n  var replacers = dialects[dialect]\n  if (!replacers) {\n    replacers = dialects.default\n  }\n\n  var obfuscated = raw\n  for (var i = 0, l = replacers.length; i < l; ++i) {\n    obfuscated = replacers[i](obfuscated)\n  }\n\n  return obfuscated\n}\n\nfunction join(expressions, flags) {\n  return new RegExp(expressions.map(toPart).join('|'), flags)\n}\n\nfunction toPart(expressions) {\n  return expressions.toString().slice(1, -1)\n}\n\nfunction replacer(regex) {\n  function replace(sql) {\n    return sql.replace(regex, '?')\n  }\n  replace.regex = regex\n\n  return replace\n}\n\nfunction unmatchedPairs(regex) {\n  function check(sql) {\n    return regex.test(sql) ? '?' : sql\n  }\n  check.regex = regex\n\n  return check\n}\n"]},"metadata":{},"sourceType":"script"}