{"ast":null,"code":"'use strict';\n\nvar exec = require('child_process').exec;\n\nvar readProc = require('./utilization/common').readProc;\n\nvar getBootId = require('./utilization/docker-info').getBootId;\n\nvar utilization = require('./utilization');\n\nvar logger = require('./logger.js').child({\n  component: 'system-info'\n});\n\nvar os = require('os');\n\nvar parseCpuInfo = require('./parse-proc-cpuinfo');\n\nvar parseMemInfo = require('./parse-proc-meminfo');\n\nvar platform = os.platform();\nmodule.exports = fetchSystemInfo;\n\nfunction isInteger(i) {\n  return i === parseInt(i, 10);\n}\n\nfunction fetchSystemInfo(agent, callback) {\n  var config = agent.config;\n  var systemInfo = {\n    processorArch: os.arch()\n  };\n  var utilizationConfig = Object.create(null);\n\n  if (config.utilization) {\n    var configProcessors = config.utilization.logical_processors;\n    var configRam = config.utilization.total_ram_mib;\n    var configHostname = config.utilization.billing_hostname;\n\n    if (configProcessors) {\n      var parsedConfigProcessors = parseFloat(configProcessors, 10);\n\n      if (!isNaN(parsedConfigProcessors) && isInteger(parsedConfigProcessors)) {\n        utilizationConfig.logical_processors = parsedConfigProcessors;\n      } else {\n        logger.info('%s supplied in config for utilization.logical_processors, expected a number', configProcessors);\n      }\n    }\n\n    if (configRam) {\n      var parsedConfigRam = parseFloat(configRam, 10);\n\n      if (!isNaN(parsedConfigRam) && isInteger(parsedConfigRam)) {\n        utilizationConfig.total_ram_mib = parsedConfigRam;\n      } else {\n        logger.info('%s supplied in config for utilization.total_ram_mib, expected a number', configRam);\n      }\n    }\n\n    if (configHostname) {\n      if (typeof configHostname === 'string') {\n        utilizationConfig.hostname = configHostname;\n      } else {\n        logger.info('%s supplied in config for utilization.Hostname, expected a string', configHostname);\n      }\n    }\n\n    if (Object.keys(utilizationConfig).length > 0) {\n      systemInfo.config = utilizationConfig;\n    }\n  }\n\n  var tasksDone = 0;\n  var numTasks = 5;\n\n  function finishedResponse() {\n    if (++tasksDone === numTasks) {\n      callback(null, systemInfo);\n    }\n  }\n\n  module.exports._getProcessorStats(function getProcessCB(processorStats) {\n    systemInfo.packages = processorStats.packages;\n    systemInfo.logicalProcessors = processorStats.logical;\n    systemInfo.cores = processorStats.cores;\n    finishedResponse();\n  });\n\n  module.exports._getMemoryStats(function getMemCB(memory) {\n    systemInfo.memory = memory;\n    finishedResponse();\n  });\n\n  getKernelVersion(function getVersionCB(kernelVersion) {\n    systemInfo.kernelVersion = kernelVersion;\n    finishedResponse();\n  });\n  utilization.getVendors(agent, function getVendorInfo(err, vendors) {\n    if (vendors) {\n      systemInfo.vendors = vendors;\n    }\n\n    finishedResponse();\n  });\n  getBootId(agent, function reportBootId(err, bootId) {\n    if (bootId) {\n      systemInfo.bootId = bootId;\n    }\n\n    finishedResponse();\n  });\n} // placed on module for mocking purposes in tests\n\n\nmodule.exports._getProcessorStats = function getProcessorStats(callback) {\n  var processorStats = {\n    logical: null,\n    cores: null,\n    packages: null\n  };\n\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['hw.packages'], function getPackages(packages) {\n      getSysctlValue(['hw.physicalcpu_max', 'hw.physicalcpu'], function getCores(cores) {\n        getSysctlValue(['hw.logicalcpu_max', 'hw.logicalcpu', 'hw.ncpu'], function getLogicalCpu(logical) {\n          processorStats.logical = parseFloat(logical, 10);\n          processorStats.cores = parseFloat(cores, 10);\n          processorStats.packages = parseFloat(packages, 10);\n\n          for (var key in processorStats) {\n            if (!processorStats[key] || !isInteger(processorStats[key])) {\n              processorStats[key] = null;\n            }\n          }\n\n          callback(processorStats);\n        });\n      });\n    });\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['hw.ncpu'], function getLogicalCpu(logical) {\n      processorStats.logical = logical;\n      callback(processorStats);\n    });\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/cpuinfo', function parseProc(err, data) {\n      callback(parseCpuInfo(data));\n    });\n  } else {\n    logger.debug('Unknown platform: %s; could not retrieve processor info', platform);\n    callback(processorStats);\n  }\n}; // placed on module for mocking purposes in tests\n\n\nmodule.exports._getMemoryStats = function getMemoryStats(callback) {\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['hw.memsize'], function getMem(memory) {\n      callback(parseInt(memory, 10) / (1024 * 1024));\n    });\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['hw.realmem'], function getMem(memory) {\n      callback(parseInt(memory, 10) / (1024 * 1024));\n    });\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/meminfo', function parseProc(err, data) {\n      callback(parseMemInfo(data));\n    });\n  } else {\n    logger.debug('Unknown platform: %s; could not retrieve memory info', platform);\n    callback(null);\n  }\n};\n\nfunction getKernelVersion(callback) {\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['kern.version'], function getMem(version) {\n      callback(version);\n    });\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['kern.version'], function getMem(version) {\n      callback(version);\n    });\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/version', function parseProc(err, data) {\n      callback(data);\n    });\n  } else {\n    logger.debug('Unknown platform: %s; could not read kernel version', platform);\n    callback(null);\n  }\n}\n\nfunction getSysctlValue(names, callback) {\n  if (!names) return callback(null);\n  var returned = false;\n  var ran = 0;\n  names.forEach(function sysctlName(name) {\n    exec('sysctl -n ' + name, respond);\n\n    function respond(err, stdout, stderr) {\n      if (returned) return;\n\n      if (err) {\n        logger.debug('Error when trying to run: sysctl -n %s: %s', name, err.message);\n        callback(null);\n        returned = true;\n      } else if (!stderr) {\n        callback(stdout);\n        returned = true;\n      }\n\n      if (++ran === names.length && !returned) {\n        logger.debug('No sysctl info found for names: %j', names);\n        callback(null);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/system-info.js"],"names":["exec","require","readProc","getBootId","utilization","logger","child","component","os","parseCpuInfo","parseMemInfo","platform","module","exports","fetchSystemInfo","isInteger","i","parseInt","agent","callback","config","systemInfo","processorArch","arch","utilizationConfig","Object","create","configProcessors","logical_processors","configRam","total_ram_mib","configHostname","billing_hostname","parsedConfigProcessors","parseFloat","isNaN","info","parsedConfigRam","hostname","keys","length","tasksDone","numTasks","finishedResponse","_getProcessorStats","getProcessCB","processorStats","packages","logicalProcessors","logical","cores","_getMemoryStats","getMemCB","memory","getKernelVersion","getVersionCB","kernelVersion","getVendors","getVendorInfo","err","vendors","reportBootId","bootId","getProcessorStats","match","getSysctlValue","getPackages","getCores","getLogicalCpu","key","parseProc","data","debug","getMemoryStats","getMem","version","names","returned","ran","forEach","sysctlName","name","respond","stdout","stderr","message"],"mappings":"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","sourcesContent":["'use strict'\n\nvar exec = require('child_process').exec\nvar readProc = require('./utilization/common').readProc\nvar getBootId = require('./utilization/docker-info').getBootId\nvar utilization = require('./utilization')\nvar logger = require('./logger.js').child({component: 'system-info'})\nvar os = require('os')\nvar parseCpuInfo = require('./parse-proc-cpuinfo')\nvar parseMemInfo = require('./parse-proc-meminfo')\nvar platform = os.platform()\n\nmodule.exports = fetchSystemInfo\n\nfunction isInteger(i) {\n  return i === parseInt(i, 10)\n}\n\nfunction fetchSystemInfo(agent, callback) {\n  var config = agent.config\n  var systemInfo = {\n    processorArch: os.arch()\n  }\n\n  var utilizationConfig = Object.create(null)\n  if (config.utilization) {\n    var configProcessors = config.utilization.logical_processors\n    var configRam = config.utilization.total_ram_mib\n    var configHostname = config.utilization.billing_hostname\n\n    if (configProcessors) {\n      var parsedConfigProcessors = parseFloat(configProcessors, 10)\n      if (!isNaN(parsedConfigProcessors) && isInteger(parsedConfigProcessors)) {\n        utilizationConfig.logical_processors = parsedConfigProcessors\n      } else {\n        logger.info(\n          '%s supplied in config for utilization.logical_processors, expected a number',\n          configProcessors\n        )\n      }\n    }\n\n    if (configRam) {\n      var parsedConfigRam = parseFloat(configRam, 10)\n      if (!isNaN(parsedConfigRam) && isInteger(parsedConfigRam)) {\n        utilizationConfig.total_ram_mib = parsedConfigRam\n      } else {\n        logger.info(\n          '%s supplied in config for utilization.total_ram_mib, expected a number',\n          configRam\n        )\n      }\n    }\n\n    if (configHostname) {\n      if (typeof configHostname === 'string') {\n        utilizationConfig.hostname = configHostname\n      } else {\n        logger.info(\n          '%s supplied in config for utilization.Hostname, expected a string',\n          configHostname\n        )\n      }\n    }\n\n    if (Object.keys(utilizationConfig).length > 0) {\n      systemInfo.config = utilizationConfig\n    }\n  }\n\n  var tasksDone = 0\n  var numTasks = 5\n  function finishedResponse() {\n    if (++tasksDone === numTasks) {\n      callback(null, systemInfo)\n    }\n  }\n\n  module.exports._getProcessorStats(function getProcessCB(processorStats) {\n    systemInfo.packages = processorStats.packages\n    systemInfo.logicalProcessors = processorStats.logical\n    systemInfo.cores = processorStats.cores\n    finishedResponse()\n  })\n  module.exports._getMemoryStats(function getMemCB(memory) {\n    systemInfo.memory = memory\n    finishedResponse()\n  })\n  getKernelVersion(function getVersionCB(kernelVersion) {\n    systemInfo.kernelVersion = kernelVersion\n    finishedResponse()\n  })\n  utilization.getVendors(agent, function getVendorInfo(err, vendors) {\n    if (vendors) {\n      systemInfo.vendors = vendors\n    }\n    finishedResponse()\n  })\n  getBootId(agent, function reportBootId(err, bootId) {\n    if (bootId) {\n      systemInfo.bootId = bootId\n    }\n    finishedResponse()\n  })\n}\n\n// placed on module for mocking purposes in tests\nmodule.exports._getProcessorStats = function getProcessorStats(callback) {\n  var processorStats = {\n    logical: null,\n    cores: null,\n    packages: null\n  }\n\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['hw.packages'], function getPackages(packages) {\n      getSysctlValue(['hw.physicalcpu_max', 'hw.physicalcpu'], function getCores(cores) {\n        getSysctlValue(\n          ['hw.logicalcpu_max', 'hw.logicalcpu', 'hw.ncpu'],\n          function getLogicalCpu(logical) {\n            processorStats.logical = parseFloat(logical, 10)\n            processorStats.cores = parseFloat(cores, 10)\n            processorStats.packages = parseFloat(packages, 10)\n\n            for (var key in processorStats) {\n              if (!processorStats[key] || !isInteger(processorStats[key])) {\n                processorStats[key] = null\n              }\n            }\n\n            callback(processorStats)\n          }\n        )\n      })\n    })\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['hw.ncpu'], function getLogicalCpu(logical) {\n      processorStats.logical = logical\n      callback(processorStats)\n    })\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/cpuinfo', function parseProc(err, data) {\n      callback(parseCpuInfo(data))\n    })\n  } else {\n    logger.debug('Unknown platform: %s; could not retrieve processor info', platform)\n    callback(processorStats)\n  }\n}\n\n// placed on module for mocking purposes in tests\nmodule.exports._getMemoryStats = function getMemoryStats(callback) {\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['hw.memsize'], function getMem(memory) {\n      callback(parseInt(memory, 10) / (1024 * 1024))\n    })\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['hw.realmem'], function getMem(memory) {\n      callback(parseInt(memory, 10) / (1024 * 1024))\n    })\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/meminfo', function parseProc(err, data) {\n      callback(parseMemInfo(data))\n    })\n  } else {\n    logger.debug('Unknown platform: %s; could not retrieve memory info', platform)\n    callback(null)\n  }\n}\n\nfunction getKernelVersion(callback) {\n  if (platform.match(/darwin/i)) {\n    getSysctlValue(['kern.version'], function getMem(version) {\n      callback(version)\n    })\n  } else if (platform.match(/bsd/i)) {\n    getSysctlValue(['kern.version'], function getMem(version) {\n      callback(version)\n    })\n  } else if (platform.match(/linux/i)) {\n    readProc('/proc/version', function parseProc(err, data) {\n      callback(data)\n    })\n  } else {\n    logger.debug('Unknown platform: %s; could not read kernel version', platform)\n    callback(null)\n  }\n}\n\nfunction getSysctlValue(names, callback) {\n  if (!names) return callback(null)\n  var returned = false\n  var ran = 0\n  names.forEach(function sysctlName(name) {\n    exec('sysctl -n ' + name, respond)\n\n    function respond(err, stdout, stderr) {\n      if (returned) return\n      if (err) {\n        logger.debug('Error when trying to run: sysctl -n %s: %s', name, err.message)\n        callback(null)\n        returned = true\n      } else if (!stderr) {\n        callback(stdout)\n        returned = true\n      }\n      if (++ran === names.length && !returned) {\n        logger.debug('No sysctl info found for names: %j', names)\n        callback(null)\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}