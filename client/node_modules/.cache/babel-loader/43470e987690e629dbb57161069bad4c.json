{"ast":null,"code":"'use strict';\n\nclass MergeServerConfig {\n  // eslint-disable-next-line max-params\n  updateNestedIfChanged(config, remote, local, remoteKey, localKey, logger) {\n    var value = remote[remoteKey]; // if the value hasn't changed, skip this work.\n    // currently, this will always treat objects as\n    // new as it does not do a deep-check.\n\n    if (value === null || local[localKey] === value) {\n      return;\n    } // we need different update/merge logic if the server\n    // value is an array, a simple object, or anything else\n\n\n    if (Array.isArray(value) && Array.isArray(local[localKey])) {\n      this.updateArray(value, local, localKey);\n    } else if (this.isSimpleObject(value) && this.isSimpleObject(local[localKey])) {\n      this.updateObject(value, local, localKey);\n    } else {\n      local[localKey] = value;\n    }\n\n    config.emit(remoteKey, value);\n    logger.debug('Configuration of %s was changed to %s by New Relic.', remoteKey, value);\n  }\n\n  updateArray(value, local, localKey) {\n    value.forEach(element => {\n      if (local[localKey].indexOf(element) === -1) local[localKey].push(element);\n    });\n  }\n\n  updateObject(value, local, localKey) {\n    // go through each key of the object and update it\n    Object.keys(value).forEach(element => {\n      if (Array.isArray(local[localKey][element]) && Array.isArray(value[element])) {\n        // if both key-values are arrays, push the remote value onto the local array\n        value[element].forEach(elementValue => {\n          if (-1 === local[localKey][element].indexOf(elementValue)) {\n            local[localKey][element].push(elementValue);\n          }\n        });\n      } else {\n        // otherwise, replace the local value with the server value\n        local[localKey][element] = value[element];\n      }\n    });\n  }\n\n  isSimpleObject(thing) {\n    return 'object' === typeof thing && thing !== null;\n  }\n\n}\n\nmodule.exports = MergeServerConfig;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/config/merge-server-config.js"],"names":["MergeServerConfig","updateNestedIfChanged","config","remote","local","remoteKey","localKey","logger","value","Array","isArray","updateArray","isSimpleObject","updateObject","emit","debug","forEach","element","indexOf","push","Object","keys","elementValue","thing","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAN,CAAwB;AACtB;AACAC,EAAAA,qBAAqB,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,MAA7C,EAAqD;AACxE,QAAIC,KAAK,GAAGL,MAAM,CAACE,SAAD,CAAlB,CADwE,CAGxE;AACA;AACA;;AACA,QAAIG,KAAK,KAAK,IAAV,IAAkBJ,KAAK,CAACE,QAAD,CAAL,KAAoBE,KAA1C,EAAiD;AAC/C;AACD,KARuE,CAUxE;AACA;;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBC,KAAK,CAACC,OAAN,CAAcN,KAAK,CAACE,QAAD,CAAnB,CAA5B,EAA4D;AAC1D,WAAKK,WAAL,CAAiBH,KAAjB,EAAwBJ,KAAxB,EAA+BE,QAA/B;AACD,KAFD,MAEO,IAAI,KAAKM,cAAL,CAAoBJ,KAApB,KAA8B,KAAKI,cAAL,CAAoBR,KAAK,CAACE,QAAD,CAAzB,CAAlC,EAAwE;AAC7E,WAAKO,YAAL,CAAkBL,KAAlB,EAAyBJ,KAAzB,EAAgCE,QAAhC;AACD,KAFM,MAEA;AACLF,MAAAA,KAAK,CAACE,QAAD,CAAL,GAAkBE,KAAlB;AACD;;AACDN,IAAAA,MAAM,CAACY,IAAP,CAAYT,SAAZ,EAAuBG,KAAvB;AACAD,IAAAA,MAAM,CAACQ,KAAP,CAAa,qDAAb,EAAoEV,SAApE,EAA+EG,KAA/E;AACD;;AAEDG,EAAAA,WAAW,CAACH,KAAD,EAAQJ,KAAR,EAAeE,QAAf,EAAyB;AAClCE,IAAAA,KAAK,CAACQ,OAAN,CAAgBC,OAAD,IAAa;AAC1B,UAAIb,KAAK,CAACE,QAAD,CAAL,CAAgBY,OAAhB,CAAwBD,OAAxB,MAAqC,CAAC,CAA1C,EAA6Cb,KAAK,CAACE,QAAD,CAAL,CAAgBa,IAAhB,CAAqBF,OAArB;AAC9C,KAFD;AAGD;;AAEDJ,EAAAA,YAAY,CAACL,KAAD,EAAQJ,KAAR,EAAeE,QAAf,EAAyB;AACnC;AACAc,IAAAA,MAAM,CAACC,IAAP,CAAYb,KAAZ,EAAmBQ,OAAnB,CAA6BC,OAAD,IAAa;AACvC,UAAIR,KAAK,CAACC,OAAN,CAAcN,KAAK,CAACE,QAAD,CAAL,CAAgBW,OAAhB,CAAd,KAA2CR,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACS,OAAD,CAAnB,CAA/C,EAA8E;AAC5E;AACAT,QAAAA,KAAK,CAACS,OAAD,CAAL,CAAeD,OAAf,CAAyBM,YAAD,IAAkB;AACxC,cAAI,CAAC,CAAD,KAAOlB,KAAK,CAACE,QAAD,CAAL,CAAgBW,OAAhB,EAAyBC,OAAzB,CAAiCI,YAAjC,CAAX,EAA2D;AACzDlB,YAAAA,KAAK,CAACE,QAAD,CAAL,CAAgBW,OAAhB,EAAyBE,IAAzB,CAA8BG,YAA9B;AACD;AACF,SAJD;AAKD,OAPD,MAOO;AACL;AACAlB,QAAAA,KAAK,CAACE,QAAD,CAAL,CAAgBW,OAAhB,IAA2BT,KAAK,CAACS,OAAD,CAAhC;AACD;AACF,KAZD;AAaD;;AAEDL,EAAAA,cAAc,CAACW,KAAD,EAAQ;AACpB,WAAO,aAAc,OAAOA,KAArB,IAA+BA,KAAK,KAAK,IAAhD;AACD;;AAlDqB;;AAqDxBC,MAAM,CAACC,OAAP,GAAiBzB,iBAAjB","sourcesContent":["'use strict'\n\nclass MergeServerConfig {\n  // eslint-disable-next-line max-params\n  updateNestedIfChanged(config, remote, local, remoteKey, localKey, logger) {\n    var value = remote[remoteKey]\n\n    // if the value hasn't changed, skip this work.\n    // currently, this will always treat objects as\n    // new as it does not do a deep-check.\n    if (value === null || local[localKey] === value) {\n      return\n    }\n\n    // we need different update/merge logic if the server\n    // value is an array, a simple object, or anything else\n    if (Array.isArray(value) && Array.isArray(local[localKey])) {\n      this.updateArray(value, local, localKey)\n    } else if (this.isSimpleObject(value) && this.isSimpleObject(local[localKey])) {\n      this.updateObject(value, local, localKey)\n    } else {\n      local[localKey] = value\n    }\n    config.emit(remoteKey, value)\n    logger.debug('Configuration of %s was changed to %s by New Relic.', remoteKey, value)\n  }\n\n  updateArray(value, local, localKey) {\n    value.forEach( (element) => {\n      if (local[localKey].indexOf(element) === -1) local[localKey].push(element)\n    })\n  }\n\n  updateObject(value, local, localKey) {\n    // go through each key of the object and update it\n    Object.keys(value).forEach( (element) => {\n      if (Array.isArray(local[localKey][element]) && Array.isArray(value[element])) {\n        // if both key-values are arrays, push the remote value onto the local array\n        value[element].forEach( (elementValue) => {\n          if (-1 === local[localKey][element].indexOf(elementValue)) {\n            local[localKey][element].push(elementValue)\n          }\n        })\n      } else {\n        // otherwise, replace the local value with the server value\n        local[localKey][element] = value[element]\n      }\n    })\n  }\n\n  isSimpleObject(thing) {\n    return 'object' === (typeof thing) && thing !== null\n  }\n}\n\nmodule.exports = MergeServerConfig\n"]},"metadata":{},"sourceType":"script"}