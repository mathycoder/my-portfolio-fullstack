{"ast":null,"code":"'use strict';\n\nvar semver = require('semver'); // The logger needs to be lazy-loaded to get around ordering issues with config.\n\n\nvar logger = null;\nexports.satisfies = satisfies;\nexports.prerelease = prerelease;\n/**\n * Safely checks if the process version satisfies the given semver range.\n *\n * @param {string} check - The semantic version range to check.\n *\n * @return {bool} True if the process version satisfies the given version, false\n *  otherwise.\n */\n\nfunction satisfies(check) {\n  try {\n    return semver.satisfies(process.version, check);\n  } catch (e) {\n    _logWarn(e, 'Bad process version for satisfies check.');\n\n    return false;\n  }\n}\n/**\n * Safely checks if the process version is a pre-release version.\n *\n * @return {bool} True if the process version is pre-release, false otherwise.\n */\n\n\nfunction prerelease() {\n  try {\n    return semver.prerelease(process.version);\n  } catch (e) {\n    _logWarn(e, 'Bad process version for prelease check.');\n\n    return false;\n  }\n}\n\nfunction _logWarn() {\n  if (!logger) {\n    logger = require('../logger').child({\n      component: 'util-process-version'\n    });\n  }\n\n  logger.warn.apply(logger, arguments);\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/util/process-version.js"],"names":["semver","require","logger","exports","satisfies","prerelease","check","process","version","e","_logWarn","child","component","warn","apply","arguments"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAEA;;;AACA,IAAIC,MAAM,GAAG,IAAb;AAEAC,OAAO,CAACC,SAAR,GAAoBA,SAApB;AACAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;AAEA;;;;;;;;;AAQA,SAASD,SAAT,CAAmBE,KAAnB,EAA0B;AACxB,MAAI;AACF,WAAON,MAAM,CAACI,SAAP,CAAiBG,OAAO,CAACC,OAAzB,EAAkCF,KAAlC,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACVC,IAAAA,QAAQ,CAACD,CAAD,EAAI,0CAAJ,CAAR;;AACA,WAAO,KAAP;AACD;AACF;AAED;;;;;;;AAKA,SAASJ,UAAT,GAAsB;AACpB,MAAI;AACF,WAAOL,MAAM,CAACK,UAAP,CAAkBE,OAAO,CAACC,OAA1B,CAAP;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,QAAQ,CAACD,CAAD,EAAI,yCAAJ,CAAR;;AACA,WAAO,KAAP;AACD;AACF;;AAED,SAASC,QAAT,GAAoB;AAClB,MAAI,CAACR,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBU,KAArB,CAA2B;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAA3B,CAAT;AACD;;AACDV,EAAAA,MAAM,CAACW,IAAP,CAAYC,KAAZ,CAAkBZ,MAAlB,EAA0Ba,SAA1B;AACD","sourcesContent":["'use strict'\n\nvar semver = require('semver')\n\n// The logger needs to be lazy-loaded to get around ordering issues with config.\nvar logger = null\n\nexports.satisfies = satisfies\nexports.prerelease = prerelease\n\n/**\n * Safely checks if the process version satisfies the given semver range.\n *\n * @param {string} check - The semantic version range to check.\n *\n * @return {bool} True if the process version satisfies the given version, false\n *  otherwise.\n */\nfunction satisfies(check) {\n  try {\n    return semver.satisfies(process.version, check)\n  } catch (e) {\n    _logWarn(e, 'Bad process version for satisfies check.')\n    return false\n  }\n}\n\n/**\n * Safely checks if the process version is a pre-release version.\n *\n * @return {bool} True if the process version is pre-release, false otherwise.\n */\nfunction prerelease() {\n  try {\n    return semver.prerelease(process.version)\n  } catch (e) {\n    _logWarn(e, 'Bad process version for prelease check.')\n    return false\n  }\n}\n\nfunction _logWarn() {\n  if (!logger) {\n    logger = require('../logger').child({component: 'util-process-version'})\n  }\n  logger.warn.apply(logger, arguments)\n}\n"]},"metadata":{},"sourceType":"script"}