{"ast":null,"code":"'use strict';\n\nvar DESTINATIONS = require('../config/attribute-filter').DESTINATIONS;\n\nvar NAMES = require('../metrics/names');\n\nvar props = require('../util/properties');\n\nvar urltils = require('../util/urltils');\n\nconst errorHelper = require('../errors/helper');\n\nmodule.exports.createError = createError;\nmodule.exports.createEvent = createEvent;\n/**\n * Given either or both of a transaction and an exception, generate an error\n * trace in the JSON format expected by the collector. Since this will be\n * used by both the HTTP instrumentation, which uses HTTP status codes to\n * determine whether a transaction is in error, and the domain-based error\n * handler, which traps actual instances of Error, try to set sensible\n * defaults for everything.\n *\n * @param {Transaction} transaction      The agent transaction, presumably\n *                                       coming out of the instrumentation.\n * @param {Error}       exception        Something trapped by an error listener.\n * @param {object}      customAttributes Any custom attributes associated with\n *                                       the request (optional).\n */\n\nfunction createError(transaction, exception, customAttributes, config) {\n  let _errorHelper$extractE = errorHelper.extractErrorInformation(transaction, exception, config, urltils),\n      name = _errorHelper$extractE.name,\n      message = _errorHelper$extractE.message,\n      type = _errorHelper$extractE.type;\n\n  var params = {\n    userAttributes: Object.create(null),\n    agentAttributes: Object.create(null),\n    intrinsics: Object.create(null)\n  };\n\n  if (transaction) {\n    // Copy all of the parameters off of the transaction.\n    params.agentAttributes = transaction.trace.attributes.get(DESTINATIONS.ERROR_EVENT);\n    params.intrinsics = transaction.getIntrinsicAttributes(); // There should be no attributes to copy in HSM, but check status anyway\n\n    if (!config.high_security) {\n      var custom = transaction.trace.custom.get(DESTINATIONS.ERROR_EVENT);\n      urltils.overwriteParameters(custom, params.userAttributes);\n    }\n  }\n\n  if (!config.high_security && config.api.custom_attributes_enabled && customAttributes) {\n    for (var key in customAttributes) {\n      if (props.hasOwn(customAttributes, key)) {\n        var dest = config.attributeFilter.filterTransaction(DESTINATIONS.ERROR_EVENT, key);\n\n        if (dest & DESTINATIONS.ERROR_EVENT) {\n          params.userAttributes[key] = customAttributes[key];\n        }\n      }\n    }\n  }\n\n  var stack = exception && exception.stack;\n\n  if (stack) {\n    params.stack_trace = ('' + stack).split(/[\\n\\r]/g);\n\n    if (config.high_security || config.strip_exception_messages.enabled) {\n      params.stack_trace[0] = exception.name + ': <redacted>';\n    }\n  }\n\n  params.intrinsics['error.expected'] = false;\n\n  if (errorHelper.isExpected(type, message, transaction, config, urltils)) {\n    params.intrinsics['error.expected'] = true;\n  }\n\n  var res = [0, name, message, type, params];\n\n  if (transaction) {\n    res.transaction = transaction.id;\n  }\n\n  return res;\n}\n/**\n * Creates a structure for error event that is sent to the collector.\n * The error parameter is an output of the createError() function for a given exception.\n */\n\n\nfunction createEvent(transaction, error, timestamp, config) {\n  var message = error[2];\n  var errorClass = error[3];\n  var errorParams = error[4];\n\n  var intrinsicAttributes = _getErrorEventIntrinsicAttrs(transaction, errorClass, message, errorParams.intrinsics['error.expected'], timestamp, config); // the error structure created by createError() already performs filtering of custom\n  // and agent attributes, so it is ok to just copy them\n\n\n  var userAttributes = Object.assign(Object.create(null), errorParams.userAttributes);\n  var agentAttributes = Object.assign(Object.create(null), errorParams.agentAttributes);\n  var errorEvent = [intrinsicAttributes, userAttributes, agentAttributes];\n  return errorEvent;\n} // eslint-disable-next-line max-params\n\n\nfunction _getErrorEventIntrinsicAttrs(transaction, errorClass, message, expected, timestamp, conf) {\n  // the server expects seconds instead of milliseconds\n  if (timestamp) timestamp = timestamp / 1000;\n  var attributes = {\n    type: \"TransactionError\",\n    \"error.class\": errorClass,\n    \"error.message\": conf.high_security ? '' : message,\n    timestamp: timestamp,\n    'error.expected': expected\n  };\n\n  if (transaction) {\n    attributes.transactionName = transaction.getFullName();\n    attributes.duration = transaction.timer.getDurationInMillis() / 1000;\n    var metric = transaction.metrics.getMetric(NAMES.QUEUETIME);\n\n    if (metric) {\n      attributes.queueDuration = metric.total;\n    }\n\n    metric = transaction.metrics.getMetric(NAMES.EXTERNAL.ALL);\n\n    if (metric) {\n      attributes.externalDuration = metric.total;\n      attributes.externalCallCount = metric.callCount;\n    }\n\n    metric = transaction.metrics.getMetric(NAMES.DB.ALL);\n\n    if (metric) {\n      attributes.databaseDuration = metric.total;\n      attributes.databaseCallCount = metric.callCount;\n    }\n\n    if (transaction.syntheticsData) {\n      attributes[\"nr.syntheticsResourceId\"] = transaction.syntheticsData.resourceId;\n      attributes[\"nr.syntheticsJobId\"] = transaction.syntheticsData.jobId;\n      attributes[\"nr.syntheticsMonitorId\"] = transaction.syntheticsData.monitorId;\n    }\n\n    if (transaction.agent.config.distributed_tracing.enabled) {\n      transaction.addDistributedTraceIntrinsics(attributes);\n    } else {\n      attributes['nr.referringTransactionGuid'] = transaction.referringTransactionGuid;\n    }\n\n    attributes['nr.transactionGuid'] = transaction.id;\n\n    if (transaction.port) {\n      attributes.port = transaction.port;\n    }\n  } else {\n    attributes.transactionName = 'Unknown';\n  }\n\n  return attributes;\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/errors/index.js"],"names":["DESTINATIONS","require","NAMES","props","urltils","errorHelper","module","exports","createError","createEvent","transaction","exception","customAttributes","config","extractErrorInformation","name","message","type","params","userAttributes","Object","create","agentAttributes","intrinsics","trace","attributes","get","ERROR_EVENT","getIntrinsicAttributes","high_security","custom","overwriteParameters","api","custom_attributes_enabled","key","hasOwn","dest","attributeFilter","filterTransaction","stack","stack_trace","split","strip_exception_messages","enabled","isExpected","res","id","error","timestamp","errorClass","errorParams","intrinsicAttributes","_getErrorEventIntrinsicAttrs","assign","errorEvent","expected","conf","transactionName","getFullName","duration","timer","getDurationInMillis","metric","metrics","getMetric","QUEUETIME","queueDuration","total","EXTERNAL","ALL","externalDuration","externalCallCount","callCount","DB","databaseDuration","databaseCallCount","syntheticsData","resourceId","jobId","monitorId","agent","distributed_tracing","addDistributedTraceIntrinsics","referringTransactionGuid","port"],"mappings":"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","sourcesContent":["'use strict'\n\nvar DESTINATIONS = require('../config/attribute-filter').DESTINATIONS\nvar NAMES = require('../metrics/names')\nvar props = require('../util/properties')\nvar urltils = require('../util/urltils')\nconst errorHelper = require('../errors/helper')\n\nmodule.exports.createError = createError\nmodule.exports.createEvent = createEvent\n\n/**\n * Given either or both of a transaction and an exception, generate an error\n * trace in the JSON format expected by the collector. Since this will be\n * used by both the HTTP instrumentation, which uses HTTP status codes to\n * determine whether a transaction is in error, and the domain-based error\n * handler, which traps actual instances of Error, try to set sensible\n * defaults for everything.\n *\n * @param {Transaction} transaction      The agent transaction, presumably\n *                                       coming out of the instrumentation.\n * @param {Error}       exception        Something trapped by an error listener.\n * @param {object}      customAttributes Any custom attributes associated with\n *                                       the request (optional).\n */\nfunction createError(transaction, exception, customAttributes, config) {\n  let {name, message, type} = errorHelper.extractErrorInformation(\n    transaction,\n    exception,\n    config,\n    urltils\n  )\n\n  var params = {\n    userAttributes: Object.create(null),\n    agentAttributes: Object.create(null),\n    intrinsics: Object.create(null)\n  }\n\n  if (transaction) {\n    // Copy all of the parameters off of the transaction.\n    params.agentAttributes = transaction.trace.attributes.get(DESTINATIONS.ERROR_EVENT)\n    params.intrinsics = transaction.getIntrinsicAttributes()\n\n    // There should be no attributes to copy in HSM, but check status anyway\n    if (!config.high_security) {\n      var custom = transaction.trace.custom.get(DESTINATIONS.ERROR_EVENT)\n      urltils.overwriteParameters(custom, params.userAttributes)\n    }\n  }\n\n  if (!config.high_security && config.api.custom_attributes_enabled && customAttributes) {\n    for (var key in customAttributes) {\n      if (props.hasOwn(customAttributes, key)) {\n        var dest = config.attributeFilter.filterTransaction(\n          DESTINATIONS.ERROR_EVENT,\n          key\n        )\n        if (dest & DESTINATIONS.ERROR_EVENT) {\n          params.userAttributes[key] = customAttributes[key]\n        }\n      }\n    }\n  }\n\n\n  var stack = exception && exception.stack\n  if (stack) {\n    params.stack_trace = ('' + stack).split(/[\\n\\r]/g)\n    if (config.high_security || config.strip_exception_messages.enabled) {\n      params.stack_trace[0] = exception.name + ': <redacted>'\n    }\n  }\n\n  params.intrinsics['error.expected'] = false\n  if (errorHelper.isExpected(type, message, transaction, config, urltils)) {\n    params.intrinsics['error.expected'] = true\n  }\n\n  var res = [0, name, message, type, params]\n  if (transaction) {\n    res.transaction = transaction.id\n  }\n  return res\n}\n\n/**\n * Creates a structure for error event that is sent to the collector.\n * The error parameter is an output of the createError() function for a given exception.\n */\nfunction createEvent(transaction, error, timestamp, config) {\n  var message = error[2]\n  var errorClass = error[3]\n  var errorParams = error[4]\n\n  var intrinsicAttributes = _getErrorEventIntrinsicAttrs(\n    transaction,\n    errorClass,\n    message,\n    errorParams.intrinsics['error.expected'],\n    timestamp,\n    config\n  )\n\n  // the error structure created by createError() already performs filtering of custom\n  // and agent attributes, so it is ok to just copy them\n  var userAttributes = Object.assign(Object.create(null), errorParams.userAttributes)\n  var agentAttributes = Object.assign(Object.create(null), errorParams.agentAttributes)\n\n  var errorEvent = [\n    intrinsicAttributes,\n    userAttributes,\n    agentAttributes\n  ]\n\n  return errorEvent\n}\n\n// eslint-disable-next-line max-params\nfunction _getErrorEventIntrinsicAttrs(\n  transaction,\n  errorClass,\n  message,\n  expected,\n  timestamp,\n  conf\n) {\n  // the server expects seconds instead of milliseconds\n  if (timestamp) timestamp = timestamp / 1000\n\n  var attributes = {\n    type: \"TransactionError\",\n    \"error.class\": errorClass,\n    \"error.message\": conf.high_security ? '' : message,\n    timestamp: timestamp,\n    'error.expected': expected\n  }\n\n  if (transaction) {\n    attributes.transactionName = transaction.getFullName()\n    attributes.duration = transaction.timer.getDurationInMillis() / 1000\n\n    var metric = transaction.metrics.getMetric(NAMES.QUEUETIME)\n    if (metric) {\n      attributes.queueDuration = metric.total\n    }\n\n    metric = transaction.metrics.getMetric(NAMES.EXTERNAL.ALL)\n    if (metric) {\n      attributes.externalDuration = metric.total\n      attributes.externalCallCount = metric.callCount\n    }\n\n    metric = transaction.metrics.getMetric(NAMES.DB.ALL)\n    if (metric) {\n      attributes.databaseDuration = metric.total\n      attributes.databaseCallCount = metric.callCount\n    }\n\n    if (transaction.syntheticsData) {\n      attributes[\"nr.syntheticsResourceId\"] = transaction.syntheticsData.resourceId\n      attributes[\"nr.syntheticsJobId\"] = transaction.syntheticsData.jobId\n      attributes[\"nr.syntheticsMonitorId\"] = transaction.syntheticsData.monitorId\n    }\n\n    if (transaction.agent.config.distributed_tracing.enabled) {\n      transaction.addDistributedTraceIntrinsics(attributes)\n    } else {\n      attributes['nr.referringTransactionGuid'] = transaction.referringTransactionGuid\n    }\n\n    attributes['nr.transactionGuid'] = transaction.id\n\n    if (transaction.port) {\n      attributes.port = transaction.port\n    }\n  } else {\n    attributes.transactionName = 'Unknown'\n  }\n\n  return attributes\n}\n"]},"metadata":{},"sourceType":"script"}