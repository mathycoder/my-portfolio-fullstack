{"ast":null,"code":"'use strict';\n\nconst VALID_ATTR_TYPES = new Set(['string', 'number', 'boolean']);\n/**\n * Checks incoming attribute value against valid types:\n * string, number, & boolean.\n *\n * @param {*} val\n *\n * @return {boolean}\n */\n\nfunction isValidType(val) {\n  return VALID_ATTR_TYPES.has(typeof val);\n}\n\nmodule.exports = isValidType;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/util/attribute-types.js"],"names":["VALID_ATTR_TYPES","Set","isValidType","val","has","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAC/B,QAD+B,EAE/B,QAF+B,EAG/B,SAH+B,CAAR,CAAzB;AAMA;;;;;;;;;AAQA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOH,gBAAgB,CAACI,GAAjB,CAAqB,OAAOD,GAA5B,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBJ,WAAjB","sourcesContent":["'use strict'\n\nconst VALID_ATTR_TYPES = new Set([\n  'string',\n  'number',\n  'boolean'\n])\n\n/**\n * Checks incoming attribute value against valid types:\n * string, number, & boolean.\n *\n * @param {*} val\n *\n * @return {boolean}\n */\nfunction isValidType(val) {\n  return VALID_ATTR_TYPES.has(typeof val)\n}\n\nmodule.exports = isValidType\n"]},"metadata":{},"sourceType":"script"}