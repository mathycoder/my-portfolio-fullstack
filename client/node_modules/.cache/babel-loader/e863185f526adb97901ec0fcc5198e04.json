{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger').child({\n  component: 'utilization'\n});\n\nvar VENDOR_METHODS = {\n  aws: require('./aws-info'),\n  pcf: require('./pcf-info'),\n  azure: require('./azure-info'),\n  gcp: require('./gcp-info'),\n  docker: require('./docker-info').getVendorInfo,\n  kubernetes: require('./kubernetes-info')\n};\nvar VENDOR_NAMES = Object.keys(VENDOR_METHODS);\nmodule.exports.getVendors = getVendors;\n\nfunction getVendors(agent, callback) {\n  var done = 0;\n  var vendors = null;\n  VENDOR_NAMES.forEach(function getVendorInfo(vendor) {\n    VENDOR_METHODS[vendor](agent, function getInfo(err, result) {\n      logger.trace('Vendor %s finished.', vendor);\n\n      if (result) {\n        vendors = vendors || Object.create(null);\n        vendors[vendor] = result;\n      }\n\n      if (++done === VENDOR_NAMES.length) {\n        callback(null, vendors);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/utilization/index.js"],"names":["logger","require","child","component","VENDOR_METHODS","aws","pcf","azure","gcp","docker","getVendorInfo","kubernetes","VENDOR_NAMES","Object","keys","module","exports","getVendors","agent","callback","done","vendors","forEach","vendor","getInfo","err","result","trace","create","length"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,KAArB,CAA2B;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAA3B,CAAb;;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,GAAG,EAAEJ,OAAO,CAAC,YAAD,CADO;AAEnBK,EAAAA,GAAG,EAAEL,OAAO,CAAC,YAAD,CAFO;AAGnBM,EAAAA,KAAK,EAAEN,OAAO,CAAC,cAAD,CAHK;AAInBO,EAAAA,GAAG,EAAEP,OAAO,CAAC,YAAD,CAJO;AAKnBQ,EAAAA,MAAM,EAAER,OAAO,CAAC,eAAD,CAAP,CAAyBS,aALd;AAMnBC,EAAAA,UAAU,EAAEV,OAAO,CAAC,mBAAD;AANA,CAArB;AAQA,IAAIW,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYV,cAAZ,CAAnB;AAEAW,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4BA,UAA5B;;AACA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AACnC,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,OAAO,GAAG,IAAd;AACAT,EAAAA,YAAY,CAACU,OAAb,CAAqB,SAASZ,aAAT,CAAuBa,MAAvB,EAA+B;AAClDnB,IAAAA,cAAc,CAACmB,MAAD,CAAd,CAAuBL,KAAvB,EAA8B,SAASM,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8B;AAC1D1B,MAAAA,MAAM,CAAC2B,KAAP,CAAa,qBAAb,EAAoCJ,MAApC;;AACA,UAAIG,MAAJ,EAAY;AACVL,QAAAA,OAAO,GAAGA,OAAO,IAAIR,MAAM,CAACe,MAAP,CAAc,IAAd,CAArB;AACAP,QAAAA,OAAO,CAACE,MAAD,CAAP,GAAkBG,MAAlB;AACD;;AAED,UAAI,EAAEN,IAAF,KAAWR,YAAY,CAACiB,MAA5B,EAAoC;AAClCV,QAAAA,QAAQ,CAAC,IAAD,EAAOE,OAAP,CAAR;AACD;AACF,KAVD;AAWD,GAZD;AAaD","sourcesContent":["'use strict'\n\nvar logger = require('../logger').child({component: 'utilization'})\n\nvar VENDOR_METHODS = {\n  aws: require('./aws-info'),\n  pcf: require('./pcf-info'),\n  azure: require('./azure-info'),\n  gcp: require('./gcp-info'),\n  docker: require('./docker-info').getVendorInfo,\n  kubernetes: require('./kubernetes-info')\n}\nvar VENDOR_NAMES = Object.keys(VENDOR_METHODS)\n\nmodule.exports.getVendors = getVendors\nfunction getVendors(agent, callback) {\n  var done = 0\n  var vendors = null\n  VENDOR_NAMES.forEach(function getVendorInfo(vendor) {\n    VENDOR_METHODS[vendor](agent, function getInfo(err, result) {\n      logger.trace('Vendor %s finished.', vendor)\n      if (result) {\n        vendors = vendors || Object.create(null)\n        vendors[vendor] = result\n      }\n\n      if (++done === VENDOR_NAMES.length) {\n        callback(null, vendors)\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}