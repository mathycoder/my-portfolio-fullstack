{"ast":null,"code":"'use strict';\n\nvar logger = require('../logger').child({\n  component: 'docker-info'\n});\n\nvar common = require('./common');\n\nvar NAMES = require('../metrics/names');\n\nvar os = require('os');\n\nmodule.exports.getVendorInfo = fetchDockerVendorInfo;\n\nmodule.exports.clearVendorCache = function clearDockerVendorCache() {\n  vendorInfo = null;\n};\n\nmodule.exports.getBootId = function getBootId(agent, callback) {\n  if (!/linux/i.test(os.platform())) {\n    logger.debug('Platform is not a flavor of linux, omitting boot info');\n    return setImmediate(callback, null, null);\n  }\n\n  common.readProc('/proc/sys/kernel/random/boot_id', function readProcBootId(err, data) {\n    if (!data) {\n      bootIdError();\n      return callback(null, null);\n    }\n\n    data = data.trim();\n    var asciiData = Buffer.from(data, 'ascii').toString();\n\n    if (data !== asciiData) {\n      bootIdError();\n      return callback(null, null);\n    }\n\n    if (data.length !== 36) {\n      bootIdError();\n\n      if (data.length > 128) {\n        data = data.substr(0, 128);\n      }\n    }\n\n    return callback(null, data);\n  });\n\n  function bootIdError() {\n    agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.BOOT_ID_ERROR).incrementCallCount();\n  }\n};\n\nvar vendorInfo = null;\n\nfunction fetchDockerVendorInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_docker) {\n    return callback(null, null);\n  }\n\n  if (vendorInfo) {\n    return callback(null, vendorInfo);\n  }\n\n  if (!os.platform().match(/linux/i)) {\n    logger.debug('Platform is not a flavor of linux, omitting docker info');\n    return callback(null);\n  }\n\n  common.readProc('/proc/self/cgroup', function getCGroup(err, data) {\n    if (!data) {\n      return callback(null);\n    }\n\n    var id = null;\n    findCGroups(data, 'cpu', function forEachCpuGroup(cpuGroup) {\n      var match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup);\n\n      if (match) {\n        id = match[1];\n        return false;\n      }\n\n      return true;\n    });\n\n    if (id) {\n      vendorInfo = {\n        id: id\n      };\n      callback(null, vendorInfo);\n    } else {\n      logger.debug('No matching cpu group found.');\n      callback(null, null);\n    }\n  });\n}\n\nfunction findCGroups(info, cgroup, eachCb) {\n  var target = new RegExp('^\\\\d+:[^:]*?\\\\b' + cgroup + '\\\\b[^:]*:');\n  var lines = info.split('\\n');\n\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i];\n\n    if (target.test(line) && !eachCb(line.split(':')[2])) {\n      break;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/utilization/docker-info.js"],"names":["logger","require","child","component","common","NAMES","os","module","exports","getVendorInfo","fetchDockerVendorInfo","clearVendorCache","clearDockerVendorCache","vendorInfo","getBootId","agent","callback","test","platform","debug","setImmediate","readProc","readProcBootId","err","data","bootIdError","trim","asciiData","Buffer","from","toString","length","substr","metrics","getOrCreateMetric","UTILIZATION","BOOT_ID_ERROR","incrementCallCount","config","utilization","detect_docker","match","getCGroup","id","findCGroups","forEachCpuGroup","cpuGroup","exec","info","cgroup","eachCb","target","RegExp","lines","split","i","line"],"mappings":"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","sourcesContent":["'use strict'\n\nvar logger = require('../logger').child({component: 'docker-info'})\nvar common = require('./common')\nvar NAMES = require('../metrics/names')\nvar os = require('os')\n\nmodule.exports.getVendorInfo = fetchDockerVendorInfo\nmodule.exports.clearVendorCache = function clearDockerVendorCache() {\n  vendorInfo = null\n}\n\nmodule.exports.getBootId = function getBootId(agent, callback) {\n  if (!/linux/i.test(os.platform())) {\n    logger.debug('Platform is not a flavor of linux, omitting boot info')\n    return setImmediate(callback, null, null)\n  }\n\n  common.readProc('/proc/sys/kernel/random/boot_id', function readProcBootId(err, data) {\n    if (!data) {\n      bootIdError()\n      return callback(null, null)\n    }\n\n    data = data.trim()\n    var asciiData = Buffer.from(data, 'ascii').toString()\n\n    if (data !== asciiData) {\n      bootIdError()\n      return callback(null, null)\n    }\n\n    if (data.length !== 36) {\n      bootIdError()\n      if (data.length > 128) {\n        data = data.substr(0, 128)\n      }\n    }\n\n    return callback(null, data)\n  })\n\n  function bootIdError() {\n    agent.metrics.getOrCreateMetric(NAMES.UTILIZATION.BOOT_ID_ERROR)\n      .incrementCallCount()\n  }\n}\n\nvar vendorInfo = null\n\nfunction fetchDockerVendorInfo(agent, callback) {\n  if (!agent.config.utilization || !agent.config.utilization.detect_docker) {\n    return callback(null, null)\n  }\n\n  if (vendorInfo) {\n    return callback(null, vendorInfo)\n  }\n\n  if (!os.platform().match(/linux/i)) {\n    logger.debug('Platform is not a flavor of linux, omitting docker info')\n    return callback(null)\n  }\n\n  common.readProc('/proc/self/cgroup', function getCGroup(err, data) {\n    if (!data) {\n      return callback(null)\n    }\n\n    var id = null\n    findCGroups(data, 'cpu', function forEachCpuGroup(cpuGroup) {\n      var match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup)\n      if (match) {\n        id = match[1]\n        return false\n      }\n\n      return true\n    })\n\n    if (id) {\n      vendorInfo = {id: id}\n      callback(null, vendorInfo)\n    } else {\n      logger.debug('No matching cpu group found.')\n      callback(null, null)\n    }\n  })\n}\n\nfunction findCGroups(info, cgroup, eachCb) {\n  var target = new RegExp('^\\\\d+:[^:]*?\\\\b' + cgroup + '\\\\b[^:]*:')\n  var lines = info.split('\\n')\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i]\n    if (target.test(line) && !eachCb(line.split(':')[2])) {\n      break\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}