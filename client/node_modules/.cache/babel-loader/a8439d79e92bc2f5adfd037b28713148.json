{"ast":null,"code":"'use strict';\n\nconst NAMES = require('../../metrics/names');\n\nconst recordDistributedTrace = require('./distributed-trace');\n\nconst TO_MILLIS = 1e3;\n\nfunction recordWeb(segment, scope) {\n  // in web metrics, scope is required\n  if (!scope) return;\n  var tx = segment.transaction; // if there was a nested webTransaction use its recorder instead\n\n  if (tx.type === 'web' && tx.baseSegment && segment !== tx.baseSegment) {\n    return;\n  }\n\n  var duration = segment.getDurationInMillis();\n  var totalTime = tx.trace.getTotalTimeDurationInMillis();\n  var exclusive = segment.getExclusiveDurationInMillis();\n  var partial = segment.partialName;\n  var config = segment.transaction.agent.config; // named / key transaction support requires per-name apdexT\n\n  var keyApdexInMillis = config.web_transactions_apdex[scope] * TO_MILLIS || 0;\n  tx.measure(NAMES.WEB.RESPONSE_TIME, null, duration, exclusive);\n  tx.measure(NAMES.WEB.TOTAL_TIME, null, totalTime, exclusive);\n  tx.measure(NAMES.HTTP, null, duration, exclusive);\n  tx.measure(scope, null, duration, exclusive);\n  tx.measure(NAMES.WEB.TOTAL_TIME + '/' + partial, null, totalTime, exclusive);\n\n  if (tx.queueTime > 0) {\n    tx.measure(NAMES.QUEUETIME, null, tx.queueTime);\n  }\n\n  if (config.distributed_tracing.enabled) {\n    recordDistributedTrace(tx, 'Web', duration, exclusive);\n  } else if (tx.incomingCatId) {\n    tx.measure(NAMES.CLIENT_APPLICATION + '/' + tx.incomingCatId + \"/all\", null, tx.catResponseTime);\n  }\n\n  tx._setApdex(NAMES.APDEX + '/' + partial, duration, keyApdexInMillis);\n\n  tx._setApdex(NAMES.APDEX, duration, keyApdexInMillis);\n}\n\nmodule.exports = recordWeb;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/metrics/recorders/http.js"],"names":["NAMES","require","recordDistributedTrace","TO_MILLIS","recordWeb","segment","scope","tx","transaction","type","baseSegment","duration","getDurationInMillis","totalTime","trace","getTotalTimeDurationInMillis","exclusive","getExclusiveDurationInMillis","partial","partialName","config","agent","keyApdexInMillis","web_transactions_apdex","measure","WEB","RESPONSE_TIME","TOTAL_TIME","HTTP","queueTime","QUEUETIME","distributed_tracing","enabled","incomingCatId","CLIENT_APPLICATION","catResponseTime","_setApdex","APDEX","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAArB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,qBAAD,CAAtC;;AAEA,MAAME,SAAS,GAAG,GAAlB;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,KAA5B,EAAmC;AACjC;AACA,MAAI,CAACA,KAAL,EAAY;AAEZ,MAAIC,EAAE,GAAGF,OAAO,CAACG,WAAjB,CAJiC,CAKjC;;AACA,MAAID,EAAE,CAACE,IAAH,KAAY,KAAZ,IAAqBF,EAAE,CAACG,WAAxB,IAAuCL,OAAO,KAAKE,EAAE,CAACG,WAA1D,EAAuE;AACrE;AACD;;AAED,MAAIC,QAAQ,GAAGN,OAAO,CAACO,mBAAR,EAAf;AACA,MAAIC,SAAS,GAAGN,EAAE,CAACO,KAAH,CAASC,4BAAT,EAAhB;AACA,MAAIC,SAAS,GAAGX,OAAO,CAACY,4BAAR,EAAhB;AACA,MAAIC,OAAO,GAAGb,OAAO,CAACc,WAAtB;AACA,MAAIC,MAAM,GAAGf,OAAO,CAACG,WAAR,CAAoBa,KAApB,CAA0BD,MAAvC,CAdiC,CAejC;;AACA,MAAIE,gBAAgB,GAAGF,MAAM,CAACG,sBAAP,CAA8BjB,KAA9B,IAAuCH,SAAvC,IAAoD,CAA3E;AAEAI,EAAAA,EAAE,CAACiB,OAAH,CAAWxB,KAAK,CAACyB,GAAN,CAAUC,aAArB,EAAoC,IAApC,EAA0Cf,QAA1C,EAAoDK,SAApD;AACAT,EAAAA,EAAE,CAACiB,OAAH,CAAWxB,KAAK,CAACyB,GAAN,CAAUE,UAArB,EAAiC,IAAjC,EAAuCd,SAAvC,EAAkDG,SAAlD;AACAT,EAAAA,EAAE,CAACiB,OAAH,CAAWxB,KAAK,CAAC4B,IAAjB,EAAuB,IAAvB,EAA6BjB,QAA7B,EAAuCK,SAAvC;AACAT,EAAAA,EAAE,CAACiB,OAAH,CAAWlB,KAAX,EAAkB,IAAlB,EAAwBK,QAAxB,EAAkCK,SAAlC;AACAT,EAAAA,EAAE,CAACiB,OAAH,CAAWxB,KAAK,CAACyB,GAAN,CAAUE,UAAV,GAAuB,GAAvB,GAA6BT,OAAxC,EAAiD,IAAjD,EAAuDL,SAAvD,EAAkEG,SAAlE;;AAEA,MAAIT,EAAE,CAACsB,SAAH,GAAe,CAAnB,EAAsB;AACpBtB,IAAAA,EAAE,CAACiB,OAAH,CAAWxB,KAAK,CAAC8B,SAAjB,EAA4B,IAA5B,EAAkCvB,EAAE,CAACsB,SAArC;AACD;;AAED,MAAIT,MAAM,CAACW,mBAAP,CAA2BC,OAA/B,EAAwC;AACtC9B,IAAAA,sBAAsB,CAACK,EAAD,EAAK,KAAL,EAAYI,QAAZ,EAAsBK,SAAtB,CAAtB;AACD,GAFD,MAEO,IAAIT,EAAE,CAAC0B,aAAP,EAAsB;AAC3B1B,IAAAA,EAAE,CAACiB,OAAH,CACExB,KAAK,CAACkC,kBAAN,GAA2B,GAA3B,GAAiC3B,EAAE,CAAC0B,aAApC,GAAoD,MADtD,EAEE,IAFF,EAGE1B,EAAE,CAAC4B,eAHL;AAKD;;AAED5B,EAAAA,EAAE,CAAC6B,SAAH,CAAapC,KAAK,CAACqC,KAAN,GAAc,GAAd,GAAoBnB,OAAjC,EAA0CP,QAA1C,EAAoDW,gBAApD;;AACAf,EAAAA,EAAE,CAAC6B,SAAH,CAAapC,KAAK,CAACqC,KAAnB,EAA0B1B,QAA1B,EAAoCW,gBAApC;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBnC,SAAjB","sourcesContent":["'use strict'\n\nconst NAMES = require('../../metrics/names')\nconst recordDistributedTrace = require('./distributed-trace')\n\nconst TO_MILLIS = 1e3\n\nfunction recordWeb(segment, scope) {\n  // in web metrics, scope is required\n  if (!scope) return\n\n  var tx = segment.transaction\n  // if there was a nested webTransaction use its recorder instead\n  if (tx.type === 'web' && tx.baseSegment && segment !== tx.baseSegment) {\n    return\n  }\n\n  var duration = segment.getDurationInMillis()\n  var totalTime = tx.trace.getTotalTimeDurationInMillis()\n  var exclusive = segment.getExclusiveDurationInMillis()\n  var partial = segment.partialName\n  var config = segment.transaction.agent.config\n  // named / key transaction support requires per-name apdexT\n  var keyApdexInMillis = config.web_transactions_apdex[scope] * TO_MILLIS || 0\n\n  tx.measure(NAMES.WEB.RESPONSE_TIME, null, duration, exclusive)\n  tx.measure(NAMES.WEB.TOTAL_TIME, null, totalTime, exclusive)\n  tx.measure(NAMES.HTTP, null, duration, exclusive)\n  tx.measure(scope, null, duration, exclusive)\n  tx.measure(NAMES.WEB.TOTAL_TIME + '/' + partial, null, totalTime, exclusive)\n\n  if (tx.queueTime > 0) {\n    tx.measure(NAMES.QUEUETIME, null, tx.queueTime)\n  }\n\n  if (config.distributed_tracing.enabled) {\n    recordDistributedTrace(tx, 'Web', duration, exclusive)\n  } else if (tx.incomingCatId) {\n    tx.measure(\n      NAMES.CLIENT_APPLICATION + '/' + tx.incomingCatId + \"/all\",\n      null,\n      tx.catResponseTime\n    )\n  }\n\n  tx._setApdex(NAMES.APDEX + '/' + partial, duration, keyApdexInMillis)\n  tx._setApdex(NAMES.APDEX, duration, keyApdexInMillis)\n}\n\nmodule.exports = recordWeb\n"]},"metadata":{},"sourceType":"script"}