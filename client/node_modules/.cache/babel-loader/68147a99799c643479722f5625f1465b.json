{"ast":null,"code":"'use strict';\n\nvar logger = require('./logger.js').child({\n  component: 'proc-cpuinfo'\n});\n\nmodule.exports = parseProcCPUInfo;\n\nfunction parseProcCPUInfo(data) {\n  var relevantAttributes = ['processor', 'physical id', 'cpu cores', 'core id'];\n  var processorStats = {\n    logical: null,\n    cores: null,\n    packages: null\n  }; // seperate the processors\n\n  var splitData = data.split('\\n').map(function formatAttribute(attr) {\n    return attr.split(':').map(function eliminateExtraWhitespace(s) {\n      return s.replace(/\\\\r|\\\\t| {2,}/g, '').trim();\n    });\n  });\n  var validData = splitData.filter(function checkForValidAttrs(a) {\n    return a.length === 2 && relevantAttributes.indexOf(a[0]) !== -1;\n  });\n\n  if (validData.length === 0) {\n    logger.debug('No applicable cpu attributes found');\n    return processorStats;\n  }\n\n  splitData = collapseMultilineValues(splitData);\n  var processors = seperateProcessors(splitData);\n  processorStats = countProcessorStats(processors);\n\n  if (!processorStats.cores) {\n    if (processorStats.logical === 1) {\n      // some older, single-core processors might not list ids,\n      // so we'll mark them 1\n      processorStats.cores = 1;\n      processorStats.packages = 1;\n    } else {\n      // there is no way of knowing how many packages\n      // or cores there are\n      processorStats.cores = null;\n      processorStats.packages = null;\n    }\n  }\n\n  return processorStats;\n} // some values are split up over multiple lines, these won't be broken\n// by split(':'), and should be folded into the last seen valid value\n\n\nfunction collapseMultilineValues(li) {\n  var tmp = [];\n  var last;\n\n  for (var i = 0; i < li.length; ++i) {\n    if (li[i].length === 2) {\n      // store the last valid entry to append invalid entries to\n      last = li[i];\n      tmp.push(last);\n    } else {\n      last[1] += li[i][0];\n    }\n  }\n\n  return tmp;\n} // walk through the processed list of key, value pairs and populate\n// objects till you find a collision\n\n\nfunction seperateProcessors(processorData) {\n  var processors = [];\n  var processor = Object.create(null);\n\n  for (var i = 0; i < processorData.length; ++i) {\n    var key = processorData[i][0];\n    var value = processorData[i][1];\n\n    if (processor[key] !== undefined) {\n      processors.push(processor);\n      processor = Object.create(null);\n    }\n\n    processor[key] = value;\n  }\n\n  processors.push(processor);\n  return processors;\n}\n\nfunction countProcessorStats(processors) {\n  var phys = [];\n  var cores = [];\n\n  for (var i = 0; i < processors.length; i++) {\n    var processor = processors[i];\n\n    if (processor['physical id'] && processor['cpu cores'] && phys.indexOf(processor['physical id']) === -1) {\n      phys.push(processor['physical id']);\n      cores.push(processor['cpu cores']);\n    }\n  }\n\n  return {\n    logical: processors.length,\n    cores: cores.map(function convertToInt(s) {\n      return parseInt(s, 10);\n    }).reduce(function sum(a, b) {\n      return a + b;\n    }, 0),\n    packages: phys.length\n  };\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/parse-proc-cpuinfo.js"],"names":["logger","require","child","component","module","exports","parseProcCPUInfo","data","relevantAttributes","processorStats","logical","cores","packages","splitData","split","map","formatAttribute","attr","eliminateExtraWhitespace","s","replace","trim","validData","filter","checkForValidAttrs","a","length","indexOf","debug","collapseMultilineValues","processors","seperateProcessors","countProcessorStats","li","tmp","last","i","push","processorData","processor","Object","create","key","value","undefined","phys","convertToInt","parseInt","reduce","sum","b"],"mappings":"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","sourcesContent":["'use strict'\n\nvar logger = require('./logger.js').child({component: 'proc-cpuinfo'})\nmodule.exports = parseProcCPUInfo\n\nfunction parseProcCPUInfo(data) {\n  var relevantAttributes = [\n    'processor',\n    'physical id',\n    'cpu cores',\n    'core id'\n  ]\n\n  var processorStats = {\n    logical: null,\n    cores: null,\n    packages: null\n  }\n\n  // seperate the processors\n  var splitData = data.split('\\n')\n    .map(function formatAttribute(attr) {\n      return attr.split(':')\n        .map(function eliminateExtraWhitespace(s) {\n          return s.replace(/\\\\r|\\\\t| {2,}/g, '').trim()\n        })\n    })\n\n  var validData = splitData.filter(function checkForValidAttrs(a) {\n    return a.length === 2 && relevantAttributes.indexOf(a[0]) !== -1\n  })\n  if (validData.length === 0) {\n    logger.debug('No applicable cpu attributes found')\n    return processorStats\n  }\n\n  splitData = collapseMultilineValues(splitData)\n\n  var processors = seperateProcessors(splitData)\n\n  processorStats = countProcessorStats(processors)\n  if (!processorStats.cores) {\n    if (processorStats.logical === 1) {\n      // some older, single-core processors might not list ids,\n      // so we'll mark them 1\n      processorStats.cores = 1\n      processorStats.packages = 1\n    } else {\n      // there is no way of knowing how many packages\n      // or cores there are\n      processorStats.cores = null\n      processorStats.packages = null\n    }\n  }\n  return processorStats\n}\n\n// some values are split up over multiple lines, these won't be broken\n// by split(':'), and should be folded into the last seen valid value\nfunction collapseMultilineValues(li) {\n  var tmp = []\n  var last\n  for (var i = 0; i < li.length; ++i) {\n    if (li[i].length === 2) {\n      // store the last valid entry to append invalid entries to\n      last = li[i]\n      tmp.push(last)\n    } else {\n      last[1] += li[i][0]\n    }\n  }\n\n  return tmp\n}\n\n// walk through the processed list of key, value pairs and populate\n// objects till you find a collision\nfunction seperateProcessors(processorData) {\n  var processors = []\n  var processor = Object.create(null)\n  for (var i = 0; i < processorData.length; ++i) {\n    var key = processorData[i][0]\n    var value = processorData[i][1]\n    if (processor[key] !== undefined) {\n      processors.push(processor)\n      processor = Object.create(null)\n    }\n    processor[key] = value\n  }\n  processors.push(processor)\n  return processors\n}\n\nfunction countProcessorStats(processors) {\n  var phys = []\n  var cores = []\n\n  for (var i = 0; i < processors.length; i++) {\n    var processor = processors[i]\n    if (processor['physical id'] &&\n        processor['cpu cores'] &&\n        phys.indexOf(processor['physical id']) === -1) {\n      phys.push(processor['physical id'])\n      cores.push(processor['cpu cores'])\n    }\n  }\n\n  return {\n    logical: processors.length,\n    cores: cores\n      .map(function convertToInt(s) {\n        return parseInt(s, 10)\n      })\n      .reduce(function sum(a, b) {\n        return a + b\n      }, 0),\n    packages: phys.length\n  }\n}\n"]},"metadata":{},"sourceType":"script"}