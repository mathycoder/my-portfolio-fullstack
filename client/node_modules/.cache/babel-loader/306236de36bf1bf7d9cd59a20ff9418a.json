{"ast":null,"code":"'use strict';\n/*\n *\n * CONSTANTS\n *\n */\n\nvar FROM_MILLIS = 1e-3;\n\nfunction ApdexStats(apdexT) {\n  if (!apdexT && apdexT !== 0) {\n    throw new Error('Apdex summary must be created with apdexT.');\n  }\n\n  this.apdexT = apdexT;\n  this.satisfying = 0;\n  this.tolerating = 0;\n  this.frustrating = 0;\n}\n\nApdexStats.prototype.recordValue = function recordValue(time, overrideApdex) {\n  var apdexT = overrideApdex || this.apdexT;\n\n  if (time <= apdexT) {\n    ++this.satisfying;\n  } else if (time <= 4 * apdexT) {\n    ++this.tolerating;\n  } else {\n    ++this.frustrating;\n  }\n};\n\nApdexStats.prototype.recordValueInMillis = function recordValueInMillis(timeInMillis, overrideApdex) {\n  this.recordValue(timeInMillis * FROM_MILLIS, overrideApdex * FROM_MILLIS);\n};\n/**\n * Used by the error handler to indicate that a user was frustrated by a page\n * error.\n */\n\n\nApdexStats.prototype.incrementFrustrating = function incrementFrustrating() {\n  ++this.frustrating;\n};\n/**\n * When merging apdex stastics, the apdex tolerating value isn't brought along\n * for the ride.\n *\n * @param {ApdexStats} other The existing apdex stats being merged in.\n */\n\n\nApdexStats.prototype.merge = function merge(other) {\n  this.satisfying += other.satisfying;\n  this.tolerating += other.tolerating;\n  this.frustrating += other.frustrating;\n};\n/**\n * This feels dirty: ApdexStats override the ordinary statistics serialization\n * format by putting satisfying, tolerating and frustrating values in the\n * first three fields in the array and setting the next two to the apdex (used\n * by calculations inside RPM), followed by 0.\n *\n * @returns {Array} A six-value array where only the first three values are\n *                  significant: satisfying, tolerating, and frustrating\n *                  load times, respectively.\n */\n\n\nApdexStats.prototype.toJSON = function toJSON() {\n  return [this.satisfying, this.tolerating, this.frustrating, this.apdexT, this.apdexT, 0];\n};\n\nmodule.exports = ApdexStats;","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/lib/stats/apdex.js"],"names":["FROM_MILLIS","ApdexStats","apdexT","Error","satisfying","tolerating","frustrating","prototype","recordValue","time","overrideApdex","recordValueInMillis","timeInMillis","incrementFrustrating","merge","other","toJSON","module","exports"],"mappings":"AAAA;AAEA;;;;;;AAKA,IAAIA,WAAW,GAAG,IAAlB;;AAGA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,MAAI,CAACA,MAAD,IAAWA,MAAM,KAAK,CAA1B,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,OAAKD,MAAL,GAAcA,MAAd;AAEA,OAAKE,UAAL,GAAkB,CAAlB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACD;;AAEDL,UAAU,CAACM,SAAX,CAAqBC,WAArB,GAAmC,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,aAA3B,EAA0C;AAC3E,MAAIR,MAAM,GAAGQ,aAAa,IAAI,KAAKR,MAAnC;;AACA,MAAIO,IAAI,IAAIP,MAAZ,EAAoB;AAClB,MAAE,KAAKE,UAAP;AACD,GAFD,MAEO,IAAIK,IAAI,IAAI,IAAIP,MAAhB,EAAwB;AAC7B,MAAE,KAAKG,UAAP;AACD,GAFM,MAEA;AACL,MAAE,KAAKC,WAAP;AACD;AACF,CATD;;AAWAL,UAAU,CAACM,SAAX,CAAqBI,mBAArB,GACA,SAASA,mBAAT,CAA6BC,YAA7B,EAA2CF,aAA3C,EAA0D;AACxD,OAAKF,WAAL,CAAiBI,YAAY,GAAGZ,WAAhC,EAA6CU,aAAa,GAAGV,WAA7D;AACD,CAHD;AAKA;;;;;;AAIAC,UAAU,CAACM,SAAX,CAAqBM,oBAArB,GAA4C,SAASA,oBAAT,GAAgC;AAC1E,IAAE,KAAKP,WAAP;AACD,CAFD;AAIA;;;;;;;;AAMAL,UAAU,CAACM,SAAX,CAAqBO,KAArB,GAA6B,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACjD,OAAKX,UAAL,IAAmBW,KAAK,CAACX,UAAzB;AACA,OAAKC,UAAL,IAAmBU,KAAK,CAACV,UAAzB;AACA,OAAKC,WAAL,IAAoBS,KAAK,CAACT,WAA1B;AACD,CAJD;AAMA;;;;;;;;;;;;AAUAL,UAAU,CAACM,SAAX,CAAqBS,MAArB,GAA8B,SAASA,MAAT,GAAkB;AAC9C,SAAO,CACL,KAAKZ,UADA,EAEL,KAAKC,UAFA,EAGL,KAAKC,WAHA,EAIL,KAAKJ,MAJA,EAKL,KAAKA,MALA,EAML,CANK,CAAP;AAQD,CATD;;AAWAe,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["'use strict'\n\n/*\n *\n * CONSTANTS\n *\n */\nvar FROM_MILLIS = 1e-3\n\n\nfunction ApdexStats(apdexT) {\n  if (!apdexT && apdexT !== 0) {\n    throw new Error('Apdex summary must be created with apdexT.')\n  }\n  this.apdexT = apdexT\n\n  this.satisfying = 0\n  this.tolerating = 0\n  this.frustrating = 0\n}\n\nApdexStats.prototype.recordValue = function recordValue(time, overrideApdex) {\n  var apdexT = overrideApdex || this.apdexT\n  if (time <= apdexT) {\n    ++this.satisfying\n  } else if (time <= 4 * apdexT) {\n    ++this.tolerating\n  } else {\n    ++this.frustrating\n  }\n}\n\nApdexStats.prototype.recordValueInMillis =\nfunction recordValueInMillis(timeInMillis, overrideApdex) {\n  this.recordValue(timeInMillis * FROM_MILLIS, overrideApdex * FROM_MILLIS)\n}\n\n/**\n * Used by the error handler to indicate that a user was frustrated by a page\n * error.\n */\nApdexStats.prototype.incrementFrustrating = function incrementFrustrating() {\n  ++this.frustrating\n}\n\n/**\n * When merging apdex stastics, the apdex tolerating value isn't brought along\n * for the ride.\n *\n * @param {ApdexStats} other The existing apdex stats being merged in.\n */\nApdexStats.prototype.merge = function merge(other) {\n  this.satisfying += other.satisfying\n  this.tolerating += other.tolerating\n  this.frustrating += other.frustrating\n}\n\n/**\n * This feels dirty: ApdexStats override the ordinary statistics serialization\n * format by putting satisfying, tolerating and frustrating values in the\n * first three fields in the array and setting the next two to the apdex (used\n * by calculations inside RPM), followed by 0.\n *\n * @returns {Array} A six-value array where only the first three values are\n *                  significant: satisfying, tolerating, and frustrating\n *                  load times, respectively.\n */\nApdexStats.prototype.toJSON = function toJSON() {\n  return [\n    this.satisfying,\n    this.tolerating,\n    this.frustrating,\n    this.apdexT,\n    this.apdexT,\n    0\n  ]\n}\n\nmodule.exports = ApdexStats\n"]},"metadata":{},"sourceType":"script"}