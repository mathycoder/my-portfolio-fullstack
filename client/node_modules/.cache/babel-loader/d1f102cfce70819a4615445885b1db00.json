{"ast":null,"code":"'use strict'; // Record opening times before loading any other files.\n\nconst preAgentTime = process.uptime();\nconst agentStart = Date.now(); // Load unwrapped core now to ensure it gets the freshest properties.\n\nrequire('./lib/util/unwrapped-core');\n\nconst featureFlags = require('./lib/feature_flags').prerelease;\n\nconst psemver = require('./lib/util/process-version');\n\nlet logger = require('./lib/logger'); // Gets re-loaded after initialization.\n\n\nconst pkgJSON = require('./package.json');\n\nlogger.info('Using New Relic for Node.js. Agent version: %s; Node version: %s.', pkgJSON.version, process.version);\n\nif (require.cache.__NR_cache) {\n  logger.warn('Attempting to load a second copy of newrelic from %s, using cache instead', __dirname);\n\n  if (require.cache.__NR_cache.agent) {\n    require.cache.__NR_cache.agent.recordSupportability('Agent/DoubleLoad');\n  }\n\n  module.exports = require.cache.__NR_cache;\n} else {\n  initialize();\n}\n\nfunction initialize() {\n  logger.debug('Loading agent from %s', __dirname);\n  let agent = null;\n  let message = null;\n\n  try {\n    logger.debug('Process was running %s seconds before agent was loaded.', preAgentTime); // TODO: Update this check when Node v6 is deprecated.\n\n    if (psemver.satisfies('<6.0.0')) {\n      message = 'New Relic for Node.js requires a version of Node equal to or\\n' + 'greater than 6.0.0. Not starting!';\n      logger.error(message);\n      throw new Error(message);\n    } else if (!psemver.satisfies(pkgJSON.engines.node)) {\n      logger.warn('New Relic for Node.js %s has not been tested on Node.js %s. Please ' + 'update the agent or downgrade your version of Node.js', pkgJSON.version, process.version);\n    }\n\n    logger.debug('Current working directory at module load is %s.', process.cwd());\n    logger.debug('Process title is %s.', process.title);\n    logger.debug('Application was invoked as %s.', process.argv.join(' '));\n\n    const config = require('./lib/config').getOrCreateInstance(); // Get the initialized logger as we likely have a bootstrap logger which\n    // just pipes to stdout.\n\n\n    logger = require('./lib/logger');\n\n    if (!config || !config.agent_enabled) {\n      logger.info('Module not enabled in configuration; not starting.');\n    } else {\n      agent = createAgent(config);\n      addStartupSupportabilities(agent);\n    }\n  } catch (error) {\n    message = 'New Relic for Node.js was unable to bootstrap itself due to an error:';\n    logger.error(error, message);\n    /* eslint-disable no-console */\n\n    console.error(message);\n    console.error(error.stack);\n    /* eslint-enable no-console */\n  }\n\n  let API = null;\n\n  if (agent) {\n    API = require('./api');\n  } else {\n    API = require('./stub_api');\n  }\n\n  require.cache.__NR_cache = module.exports = new API(agent); // If we loaded an agent, record a startup time for the agent.\n  // NOTE: Metrics are recorded in seconds, so divide the value by 1000.\n\n  if (agent) {\n    const initDuration = (Date.now() - agentStart) / 1000;\n    agent.recordSupportability('Nodejs/Application/Opening/Duration', preAgentTime);\n    agent.recordSupportability('Nodejs/Application/Initialization/Duration', initDuration);\n    agent.once('started', function timeAgentStart() {\n      agent.recordSupportability('Nodejs/Application/Registration/Duration', (Date.now() - agentStart) / 1000);\n    });\n  }\n}\n\nfunction createAgent(config) {\n  /* Only load the rest of the module if configuration is available and the\n   * configurator didn't throw.\n   *\n   * The agent must be a singleton, or else module loading will be patched\n   * multiple times, with undefined results. New Relic's instrumentation\n   * can't be enabled or disabled without an application restart.\n   */\n  const Agent = require('./lib/agent');\n\n  const agent = new Agent(config);\n  const appNames = agent.config.applications();\n\n  if (config.logging.diagnostics) {\n    logger.warn('Diagnostics logging is enabled, this may cause significant overhead.');\n  }\n\n  if (appNames.length < 1) {\n    const message = 'New Relic requires that you name this application!\\n' + 'Set app_name in your newrelic.js file or set environment variable\\n' + 'NEW_RELIC_APP_NAME. Not starting!';\n    logger.error(message);\n    throw new Error(message);\n  }\n\n  const shimmer = require('./lib/shimmer');\n\n  shimmer.patchModule(agent);\n  shimmer.bootstrapInstrumentation(agent); // Check for already loaded modules and warn about them.\n\n  const uninstrumented = require('./lib/uninstrumented');\n\n  uninstrumented.check(shimmer.registeredInstrumentations);\n  agent.start(function afterStart(error) {\n    if (error) {\n      const errorMessage = 'New Relic for Node.js halted startup due to an error:';\n      logger.error(error, errorMessage);\n      /* eslint-disable no-console */\n\n      console.error(errorMessage);\n      console.error(error.stack);\n      /* eslint-enable no-console */\n\n      return;\n    }\n\n    logger.debug('New Relic for Node.js is connected to New Relic.');\n  });\n  return agent;\n}\n\nfunction addStartupSupportabilities(agent) {\n  // TODO: As new versions come out, make sure to update Angler metrics.\n  const nodeMajor = /^v?(\\d+)/.exec(process.version);\n  agent.recordSupportability('Nodejs/Version/' + (nodeMajor && nodeMajor[1] || 'unknown'));\n  const configFlags = Object.keys(agent.config.feature_flag);\n\n  for (let i = 0; i < configFlags.length; ++i) {\n    const flag = configFlags[i];\n    const enabled = agent.config.feature_flag[flag];\n\n    if (enabled !== featureFlags[flag]) {\n      agent.recordSupportability('Nodejs/FeatureFlag/' + flag + '/' + (enabled ? 'enabled' : 'disabled'));\n    }\n  }\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/my-portfolio/node_modules/newrelic/index.js"],"names":["preAgentTime","process","uptime","agentStart","Date","now","require","featureFlags","prerelease","psemver","logger","pkgJSON","info","version","cache","__NR_cache","warn","__dirname","agent","recordSupportability","module","exports","initialize","debug","message","satisfies","error","Error","engines","node","cwd","title","argv","join","config","getOrCreateInstance","agent_enabled","createAgent","addStartupSupportabilities","console","stack","API","initDuration","once","timeAgentStart","Agent","appNames","applications","logging","diagnostics","length","shimmer","patchModule","bootstrapInstrumentation","uninstrumented","check","registeredInstrumentations","start","afterStart","errorMessage","nodeMajor","exec","configFlags","Object","keys","feature_flag","i","flag","enabled"],"mappings":"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","sourcesContent":["'use strict'\n\n// Record opening times before loading any other files.\nconst preAgentTime = process.uptime()\nconst agentStart = Date.now()\n\n// Load unwrapped core now to ensure it gets the freshest properties.\nrequire('./lib/util/unwrapped-core')\n\nconst featureFlags = require('./lib/feature_flags').prerelease\nconst psemver = require('./lib/util/process-version')\nlet logger = require('./lib/logger') // Gets re-loaded after initialization.\n\n\nconst pkgJSON = require('./package.json')\nlogger.info(\n  'Using New Relic for Node.js. Agent version: %s; Node version: %s.',\n  pkgJSON.version,\n  process.version\n)\n\nif (require.cache.__NR_cache) {\n  logger.warn(\n    'Attempting to load a second copy of newrelic from %s, using cache instead',\n    __dirname\n  )\n  if (require.cache.__NR_cache.agent) {\n    require.cache.__NR_cache.agent.recordSupportability('Agent/DoubleLoad')\n  }\n  module.exports = require.cache.__NR_cache\n} else {\n  initialize()\n}\n\nfunction initialize() {\n  logger.debug('Loading agent from %s', __dirname)\n  let agent = null\n  let message = null\n\n  try {\n    logger.debug(\n      'Process was running %s seconds before agent was loaded.',\n      preAgentTime\n    )\n\n    // TODO: Update this check when Node v6 is deprecated.\n    if (psemver.satisfies('<6.0.0')) {\n      message = 'New Relic for Node.js requires a version of Node equal to or\\n' +\n                'greater than 6.0.0. Not starting!'\n\n      logger.error(message)\n      throw new Error(message)\n    } else if (!psemver.satisfies(pkgJSON.engines.node)) {\n      logger.warn(\n        'New Relic for Node.js %s has not been tested on Node.js %s. Please ' +\n        'update the agent or downgrade your version of Node.js',\n        pkgJSON.version,\n        process.version\n      )\n    }\n\n    logger.debug('Current working directory at module load is %s.', process.cwd())\n    logger.debug('Process title is %s.', process.title)\n    logger.debug('Application was invoked as %s.', process.argv.join(' '))\n\n    const config = require('./lib/config').getOrCreateInstance()\n\n    // Get the initialized logger as we likely have a bootstrap logger which\n    // just pipes to stdout.\n    logger = require('./lib/logger')\n\n    if (!config || !config.agent_enabled) {\n      logger.info('Module not enabled in configuration; not starting.')\n    } else {\n      agent = createAgent(config)\n      addStartupSupportabilities(agent)\n    }\n  } catch (error) {\n    message = 'New Relic for Node.js was unable to bootstrap itself due to an error:'\n    logger.error(error, message)\n\n    /* eslint-disable no-console */\n    console.error(message)\n    console.error(error.stack)\n    /* eslint-enable no-console */\n  }\n\n  let API = null\n  if (agent) {\n    API = require('./api')\n  } else {\n    API = require('./stub_api')\n  }\n\n  require.cache.__NR_cache = module.exports = new API(agent)\n\n  // If we loaded an agent, record a startup time for the agent.\n  // NOTE: Metrics are recorded in seconds, so divide the value by 1000.\n  if (agent) {\n    const initDuration = (Date.now() - agentStart) / 1000\n    agent.recordSupportability('Nodejs/Application/Opening/Duration', preAgentTime)\n    agent.recordSupportability('Nodejs/Application/Initialization/Duration', initDuration)\n    agent.once('started', function timeAgentStart() {\n      agent.recordSupportability(\n        'Nodejs/Application/Registration/Duration',\n        (Date.now() - agentStart) / 1000\n      )\n    })\n  }\n}\n\nfunction createAgent(config) {\n  /* Only load the rest of the module if configuration is available and the\n   * configurator didn't throw.\n   *\n   * The agent must be a singleton, or else module loading will be patched\n   * multiple times, with undefined results. New Relic's instrumentation\n   * can't be enabled or disabled without an application restart.\n   */\n  const Agent = require('./lib/agent')\n  const agent = new Agent(config)\n  const appNames = agent.config.applications()\n\n  if (config.logging.diagnostics) {\n    logger.warn(\n      'Diagnostics logging is enabled, this may cause significant overhead.'\n    )\n  }\n\n  if (appNames.length < 1) {\n    const message =\n      'New Relic requires that you name this application!\\n' +\n      'Set app_name in your newrelic.js file or set environment variable\\n' +\n      'NEW_RELIC_APP_NAME. Not starting!'\n    logger.error(message)\n    throw new Error(message)\n  }\n\n  const shimmer = require('./lib/shimmer')\n  shimmer.patchModule(agent)\n  shimmer.bootstrapInstrumentation(agent)\n\n  // Check for already loaded modules and warn about them.\n  const uninstrumented = require('./lib/uninstrumented')\n  uninstrumented.check(shimmer.registeredInstrumentations)\n\n  agent.start(function afterStart(error) {\n    if (error) {\n      const errorMessage = 'New Relic for Node.js halted startup due to an error:'\n      logger.error(error, errorMessage)\n\n      /* eslint-disable no-console */\n      console.error(errorMessage)\n      console.error(error.stack)\n      /* eslint-enable no-console */\n\n      return\n    }\n\n    logger.debug('New Relic for Node.js is connected to New Relic.')\n  })\n\n  return agent\n}\n\nfunction addStartupSupportabilities(agent) {\n  // TODO: As new versions come out, make sure to update Angler metrics.\n  const nodeMajor = /^v?(\\d+)/.exec(process.version)\n  agent.recordSupportability(\n    'Nodejs/Version/' + ((nodeMajor && nodeMajor[1]) || 'unknown')\n  )\n\n  const configFlags = Object.keys(agent.config.feature_flag)\n  for (let i = 0; i < configFlags.length; ++i) {\n    const flag = configFlags[i]\n    const enabled = agent.config.feature_flag[flag]\n\n    if (enabled !== featureFlags[flag]) {\n      agent.recordSupportability(\n        'Nodejs/FeatureFlag/' + flag + '/' + (enabled ? 'enabled' : 'disabled')\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}